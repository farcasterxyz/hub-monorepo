syntax = "proto3";

import "messages/message.proto";
import "messages/id_registry_event.proto";
import "messages/name_registry_event.proto";
import "messages/hub_event.proto";

message Empty {}

message SubscribeRequest {
  repeated messages.HubEventType event_types = 1;
  optional uint64 from_id = 2;
}

message EventRequest {
  uint64 id = 1;
}

// Response Types for the Sync RPC Methods
message HubInfoResponse {
  string version = 1;
  bool is_synced = 2;
  string nickname = 3;
  string root_hash = 4;
}

message TrieNodeMetadataResponse {
  bytes prefix = 1;
  uint64 num_messages = 2;
  string hash = 3;
  repeated TrieNodeMetadataResponse children = 4;
}

message TrieNodeSnapshotResponse {
  bytes prefix = 1;
  repeated string excluded_hashes = 2;
  uint64 num_messages = 3;
  string root_hash = 4;
}

message TrieNodePrefix {
  bytes prefix = 1;
}

message SyncIds {
  repeated bytes sync_ids = 1;
}

message FidRequest {
  uint64 fid = 1;
  optional uint32 page_size = 2;
  optional bytes page_token = 3;
}

message FidsRequest {
  optional uint32 page_size = 1;
  optional bytes page_token = 2;
}

message FidsResponse {
  repeated uint64 fids = 1;
  optional bytes next_page_token = 2;
}

message MessagesResponse {
  repeated messages.Message messages = 1;
  optional bytes next_page_token = 2;
}

message CastsByParentRequest {
  messages.CastId cast_id = 1;
  optional uint32 page_size = 2;
  optional bytes page_token = 3;
}

message ReactionRequest {
  uint64 fid = 1;
  messages.ReactionType reaction_type = 2;
  messages.CastId cast_id = 3;
}

message ReactionsByFidRequest {
  uint64 fid = 1;
  optional messages.ReactionType reaction_type = 2;
  optional uint32 page_size = 3;
  optional bytes page_token = 4;
}

message ReactionsByCastRequest {
  messages.CastId cast_id = 1;
  optional messages.ReactionType reaction_type = 2;
  optional uint32 page_size = 3;
  optional bytes page_token = 4;
}

message UserDataRequest {
  uint64 fid = 1;
  messages.UserDataType user_data_type = 2;
}

message NameRegistryEventRequest {
  bytes name = 1;
}

message VerificationRequest {
  uint64 fid = 1;
  bytes address = 2;
}

message SignerRequest {
  uint64 fid = 1;
  bytes signer = 2;
}

service HubService {
  // Submit Methods
  rpc SubmitMessage(messages.Message) returns (messages.Message);

  // Event Methods
  rpc Subscribe(SubscribeRequest) returns (stream messages.HubEvent);
  rpc GetEvent(EventRequest) returns (messages.HubEvent);

  // Casts
  rpc GetCast(messages.CastId) returns (messages.Message);
  rpc GetCastsByFid(FidRequest) returns (MessagesResponse);
  rpc GetCastsByParent(CastsByParentRequest) returns (MessagesResponse);
  rpc GetCastsByMention(FidRequest) returns (MessagesResponse);

  // Reactions
  rpc GetReaction(ReactionRequest) returns (messages.Message);
  rpc GetReactionsByFid(ReactionsByFidRequest) returns (MessagesResponse);
  rpc GetReactionsByCast(ReactionsByCastRequest) returns (MessagesResponse);

  // User Data
  rpc GetUserData(UserDataRequest) returns (messages.Message);
  rpc GetUserDataByFid(FidRequest) returns (MessagesResponse);
  rpc GetNameRegistryEvent(NameRegistryEventRequest) returns (messages.NameRegistryEvent);

  // Verifications
  rpc GetVerification(VerificationRequest) returns (messages.Message);
  rpc GetVerificationsByFid(FidRequest) returns (MessagesResponse);

  // Signer
  rpc GetSigner(SignerRequest) returns (messages.Message);
  rpc GetSignersByFid(FidRequest) returns (MessagesResponse);
  rpc GetIdRegistryEvent(FidRequest) returns (messages.IdRegistryEvent);
  rpc GetFids(FidsRequest) returns (FidsResponse);

  // Bulk Methods
  rpc GetAllCastMessagesByFid(FidRequest) returns (MessagesResponse);
  rpc GetAllReactionMessagesByFid(FidRequest) returns (MessagesResponse);
  rpc GetAllVerificationMessagesByFid(FidRequest) returns (MessagesResponse);
  rpc GetAllSignerMessagesByFid(FidRequest) returns (MessagesResponse);
  rpc GetAllUserDataMessagesByFid(FidRequest) returns (MessagesResponse);

  // Sync Methods
  rpc GetInfo(Empty) returns (HubInfoResponse);
  rpc GetAllSyncIdsByPrefix(TrieNodePrefix) returns (SyncIds);
  rpc GetAllMessagesBySyncIds(SyncIds) returns (MessagesResponse);
  rpc GetSyncMetadataByPrefix(TrieNodePrefix) returns (TrieNodeMetadataResponse);
  rpc GetSyncSnapshotByPrefix(TrieNodePrefix) returns (TrieNodeSnapshotResponse);
}

service AdminService {
  rpc RebuildSyncTrie(Empty) returns (Empty);
  rpc DeleteAllMessagesFromDb(Empty) returns (Empty);
  
  rpc SubmitIdRegistryEvent(messages.IdRegistryEvent) returns (messages.IdRegistryEvent);
  rpc SubmitNameRegistryEvent(messages.NameRegistryEvent) returns (messages.NameRegistryEvent);
}
