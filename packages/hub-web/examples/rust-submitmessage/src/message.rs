// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Message {
    // message fields
    pub data: ::protobuf::SingularPtrField<MessageData>,
    pub hash: ::std::vec::Vec<u8>,
    pub hash_scheme: HashScheme,
    pub signature: ::std::vec::Vec<u8>,
    pub signature_scheme: SignatureScheme,
    pub signer: ::std::vec::Vec<u8>,
    pub data_bytes: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // .MessageData data = 1;


    pub fn get_data(&self) -> &MessageData {
        self.data.as_ref().unwrap_or_else(|| <MessageData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: MessageData) {
        self.data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut MessageData {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> MessageData {
        self.data.take().unwrap_or_else(|| MessageData::new())
    }

    // bytes hash = 2;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }

    // .HashScheme hash_scheme = 3;


    pub fn get_hash_scheme(&self) -> HashScheme {
        self.hash_scheme
    }
    pub fn clear_hash_scheme(&mut self) {
        self.hash_scheme = HashScheme::HASH_SCHEME_NONE;
    }

    // Param is passed by value, moved
    pub fn set_hash_scheme(&mut self, v: HashScheme) {
        self.hash_scheme = v;
    }

    // bytes signature = 4;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }

    // .SignatureScheme signature_scheme = 5;


    pub fn get_signature_scheme(&self) -> SignatureScheme {
        self.signature_scheme
    }
    pub fn clear_signature_scheme(&mut self) {
        self.signature_scheme = SignatureScheme::SIGNATURE_SCHEME_NONE;
    }

    // Param is passed by value, moved
    pub fn set_signature_scheme(&mut self, v: SignatureScheme) {
        self.signature_scheme = v;
    }

    // bytes signer = 6;


    pub fn get_signer(&self) -> &[u8] {
        &self.signer
    }
    pub fn clear_signer(&mut self) {
        self.signer.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer(&mut self, v: ::std::vec::Vec<u8>) {
        self.signer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signer
    }

    // Take field
    pub fn take_signer(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signer, ::std::vec::Vec::new())
    }

    // bytes data_bytes = 7;


    pub fn get_data_bytes(&self) -> &[u8] {
        &self.data_bytes
    }
    pub fn clear_data_bytes(&mut self) {
        self.data_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_data_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.data_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data_bytes
    }

    // Take field
    pub fn take_data_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data_bytes, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Message {
    fn is_initialized(&self) -> bool {
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.data)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.hash_scheme, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.signature_scheme, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signer)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data_bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        if self.hash_scheme != HashScheme::HASH_SCHEME_NONE {
            my_size += ::protobuf::rt::enum_size(3, self.hash_scheme);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.signature);
        }
        if self.signature_scheme != SignatureScheme::SIGNATURE_SCHEME_NONE {
            my_size += ::protobuf::rt::enum_size(5, self.signature_scheme);
        }
        if !self.signer.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.signer);
        }
        if !self.data_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.data_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.data.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        if self.hash_scheme != HashScheme::HASH_SCHEME_NONE {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.hash_scheme))?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(4, &self.signature)?;
        }
        if self.signature_scheme != SignatureScheme::SIGNATURE_SCHEME_NONE {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.signature_scheme))?;
        }
        if !self.signer.is_empty() {
            os.write_bytes(6, &self.signer)?;
        }
        if !self.data_bytes.is_empty() {
            os.write_bytes(7, &self.data_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Message {
        Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MessageData>>(
                "data",
                |m: &Message| { &m.data },
                |m: &mut Message| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hash",
                |m: &Message| { &m.hash },
                |m: &mut Message| { &mut m.hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<HashScheme>>(
                "hash_scheme",
                |m: &Message| { &m.hash_scheme },
                |m: &mut Message| { &mut m.hash_scheme },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &Message| { &m.signature },
                |m: &mut Message| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SignatureScheme>>(
                "signature_scheme",
                |m: &Message| { &m.signature_scheme },
                |m: &mut Message| { &mut m.signature_scheme },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signer",
                |m: &Message| { &m.signer },
                |m: &mut Message| { &mut m.signer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data_bytes",
                |m: &Message| { &m.data_bytes },
                |m: &mut Message| { &mut m.data_bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Message>(
                "Message",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Message {
        static instance: ::protobuf::rt::LazyV2<Message> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Message::new)
    }
}

impl ::protobuf::Clear for Message {
    fn clear(&mut self) {
        self.data.clear();
        self.hash.clear();
        self.hash_scheme = HashScheme::HASH_SCHEME_NONE;
        self.signature.clear();
        self.signature_scheme = SignatureScheme::SIGNATURE_SCHEME_NONE;
        self.signer.clear();
        self.data_bytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MessageData {
    // message fields
    pub field_type: MessageType,
    pub fid: u64,
    pub timestamp: u32,
    pub network: FarcasterNetwork,
    // message oneof groups
    pub body: ::std::option::Option<MessageData_oneof_body>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MessageData {
    fn default() -> &'a MessageData {
        <MessageData as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum MessageData_oneof_body {
    cast_add_body(CastAddBody),
    cast_remove_body(CastRemoveBody),
    reaction_body(ReactionBody),
    verification_add_eth_address_body(VerificationAddEthAddressBody),
    verification_remove_body(VerificationRemoveBody),
    user_data_body(UserDataBody),
    link_body(LinkBody),
    username_proof_body(super::username_proof::UserNameProof),
}

impl MessageData {
    pub fn new() -> MessageData {
        ::std::default::Default::default()
    }

    // .MessageType type = 1;


    pub fn get_field_type(&self) -> MessageType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = MessageType::MESSAGE_TYPE_NONE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: MessageType) {
        self.field_type = v;
    }

    // uint64 fid = 2;


    pub fn get_fid(&self) -> u64 {
        self.fid
    }
    pub fn clear_fid(&mut self) {
        self.fid = 0;
    }

    // Param is passed by value, moved
    pub fn set_fid(&mut self, v: u64) {
        self.fid = v;
    }

    // uint32 timestamp = 3;


    pub fn get_timestamp(&self) -> u32 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u32) {
        self.timestamp = v;
    }

    // .FarcasterNetwork network = 4;


    pub fn get_network(&self) -> FarcasterNetwork {
        self.network
    }
    pub fn clear_network(&mut self) {
        self.network = FarcasterNetwork::FARCASTER_NETWORK_NONE;
    }

    // Param is passed by value, moved
    pub fn set_network(&mut self, v: FarcasterNetwork) {
        self.network = v;
    }

    // .CastAddBody cast_add_body = 5;


    pub fn get_cast_add_body(&self) -> &CastAddBody {
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::cast_add_body(ref v)) => v,
            _ => <CastAddBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_cast_add_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_cast_add_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::cast_add_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cast_add_body(&mut self, v: CastAddBody) {
        self.body = ::std::option::Option::Some(MessageData_oneof_body::cast_add_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cast_add_body(&mut self) -> &mut CastAddBody {
        if let ::std::option::Option::Some(MessageData_oneof_body::cast_add_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(MessageData_oneof_body::cast_add_body(CastAddBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::cast_add_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cast_add_body(&mut self) -> CastAddBody {
        if self.has_cast_add_body() {
            match self.body.take() {
                ::std::option::Option::Some(MessageData_oneof_body::cast_add_body(v)) => v,
                _ => panic!(),
            }
        } else {
            CastAddBody::new()
        }
    }

    // .CastRemoveBody cast_remove_body = 6;


    pub fn get_cast_remove_body(&self) -> &CastRemoveBody {
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::cast_remove_body(ref v)) => v,
            _ => <CastRemoveBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_cast_remove_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_cast_remove_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::cast_remove_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cast_remove_body(&mut self, v: CastRemoveBody) {
        self.body = ::std::option::Option::Some(MessageData_oneof_body::cast_remove_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cast_remove_body(&mut self) -> &mut CastRemoveBody {
        if let ::std::option::Option::Some(MessageData_oneof_body::cast_remove_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(MessageData_oneof_body::cast_remove_body(CastRemoveBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::cast_remove_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cast_remove_body(&mut self) -> CastRemoveBody {
        if self.has_cast_remove_body() {
            match self.body.take() {
                ::std::option::Option::Some(MessageData_oneof_body::cast_remove_body(v)) => v,
                _ => panic!(),
            }
        } else {
            CastRemoveBody::new()
        }
    }

    // .ReactionBody reaction_body = 7;


    pub fn get_reaction_body(&self) -> &ReactionBody {
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::reaction_body(ref v)) => v,
            _ => <ReactionBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_reaction_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_reaction_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::reaction_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reaction_body(&mut self, v: ReactionBody) {
        self.body = ::std::option::Option::Some(MessageData_oneof_body::reaction_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reaction_body(&mut self) -> &mut ReactionBody {
        if let ::std::option::Option::Some(MessageData_oneof_body::reaction_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(MessageData_oneof_body::reaction_body(ReactionBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::reaction_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reaction_body(&mut self) -> ReactionBody {
        if self.has_reaction_body() {
            match self.body.take() {
                ::std::option::Option::Some(MessageData_oneof_body::reaction_body(v)) => v,
                _ => panic!(),
            }
        } else {
            ReactionBody::new()
        }
    }

    // .VerificationAddEthAddressBody verification_add_eth_address_body = 9;


    pub fn get_verification_add_eth_address_body(&self) -> &VerificationAddEthAddressBody {
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::verification_add_eth_address_body(ref v)) => v,
            _ => <VerificationAddEthAddressBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_verification_add_eth_address_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_verification_add_eth_address_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::verification_add_eth_address_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_verification_add_eth_address_body(&mut self, v: VerificationAddEthAddressBody) {
        self.body = ::std::option::Option::Some(MessageData_oneof_body::verification_add_eth_address_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_verification_add_eth_address_body(&mut self) -> &mut VerificationAddEthAddressBody {
        if let ::std::option::Option::Some(MessageData_oneof_body::verification_add_eth_address_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(MessageData_oneof_body::verification_add_eth_address_body(VerificationAddEthAddressBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::verification_add_eth_address_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_verification_add_eth_address_body(&mut self) -> VerificationAddEthAddressBody {
        if self.has_verification_add_eth_address_body() {
            match self.body.take() {
                ::std::option::Option::Some(MessageData_oneof_body::verification_add_eth_address_body(v)) => v,
                _ => panic!(),
            }
        } else {
            VerificationAddEthAddressBody::new()
        }
    }

    // .VerificationRemoveBody verification_remove_body = 10;


    pub fn get_verification_remove_body(&self) -> &VerificationRemoveBody {
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::verification_remove_body(ref v)) => v,
            _ => <VerificationRemoveBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_verification_remove_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_verification_remove_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::verification_remove_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_verification_remove_body(&mut self, v: VerificationRemoveBody) {
        self.body = ::std::option::Option::Some(MessageData_oneof_body::verification_remove_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_verification_remove_body(&mut self) -> &mut VerificationRemoveBody {
        if let ::std::option::Option::Some(MessageData_oneof_body::verification_remove_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(MessageData_oneof_body::verification_remove_body(VerificationRemoveBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::verification_remove_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_verification_remove_body(&mut self) -> VerificationRemoveBody {
        if self.has_verification_remove_body() {
            match self.body.take() {
                ::std::option::Option::Some(MessageData_oneof_body::verification_remove_body(v)) => v,
                _ => panic!(),
            }
        } else {
            VerificationRemoveBody::new()
        }
    }

    // .UserDataBody user_data_body = 12;


    pub fn get_user_data_body(&self) -> &UserDataBody {
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::user_data_body(ref v)) => v,
            _ => <UserDataBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_user_data_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_user_data_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::user_data_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_user_data_body(&mut self, v: UserDataBody) {
        self.body = ::std::option::Option::Some(MessageData_oneof_body::user_data_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_user_data_body(&mut self) -> &mut UserDataBody {
        if let ::std::option::Option::Some(MessageData_oneof_body::user_data_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(MessageData_oneof_body::user_data_body(UserDataBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::user_data_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_user_data_body(&mut self) -> UserDataBody {
        if self.has_user_data_body() {
            match self.body.take() {
                ::std::option::Option::Some(MessageData_oneof_body::user_data_body(v)) => v,
                _ => panic!(),
            }
        } else {
            UserDataBody::new()
        }
    }

    // .LinkBody link_body = 14;


    pub fn get_link_body(&self) -> &LinkBody {
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::link_body(ref v)) => v,
            _ => <LinkBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_link_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_link_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::link_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_link_body(&mut self, v: LinkBody) {
        self.body = ::std::option::Option::Some(MessageData_oneof_body::link_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_link_body(&mut self) -> &mut LinkBody {
        if let ::std::option::Option::Some(MessageData_oneof_body::link_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(MessageData_oneof_body::link_body(LinkBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::link_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_link_body(&mut self) -> LinkBody {
        if self.has_link_body() {
            match self.body.take() {
                ::std::option::Option::Some(MessageData_oneof_body::link_body(v)) => v,
                _ => panic!(),
            }
        } else {
            LinkBody::new()
        }
    }

    // .UserNameProof username_proof_body = 15;


    pub fn get_username_proof_body(&self) -> &super::username_proof::UserNameProof {
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::username_proof_body(ref v)) => v,
            _ => <super::username_proof::UserNameProof as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_username_proof_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_username_proof_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::username_proof_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_username_proof_body(&mut self, v: super::username_proof::UserNameProof) {
        self.body = ::std::option::Option::Some(MessageData_oneof_body::username_proof_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_username_proof_body(&mut self) -> &mut super::username_proof::UserNameProof {
        if let ::std::option::Option::Some(MessageData_oneof_body::username_proof_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(MessageData_oneof_body::username_proof_body(super::username_proof::UserNameProof::new()));
        }
        match self.body {
            ::std::option::Option::Some(MessageData_oneof_body::username_proof_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_username_proof_body(&mut self) -> super::username_proof::UserNameProof {
        if self.has_username_proof_body() {
            match self.body.take() {
                ::std::option::Option::Some(MessageData_oneof_body::username_proof_body(v)) => v,
                _ => panic!(),
            }
        } else {
            super::username_proof::UserNameProof::new()
        }
    }
}

impl ::protobuf::Message for MessageData {
    fn is_initialized(&self) -> bool {
        if let Some(MessageData_oneof_body::cast_add_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MessageData_oneof_body::cast_remove_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MessageData_oneof_body::reaction_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MessageData_oneof_body::verification_add_eth_address_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MessageData_oneof_body::verification_remove_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MessageData_oneof_body::user_data_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MessageData_oneof_body::link_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MessageData_oneof_body::username_proof_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.fid = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.timestamp = tmp;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.network, 4, &mut self.unknown_fields)?
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(MessageData_oneof_body::cast_add_body(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(MessageData_oneof_body::cast_remove_body(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(MessageData_oneof_body::reaction_body(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(MessageData_oneof_body::verification_add_eth_address_body(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(MessageData_oneof_body::verification_remove_body(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(MessageData_oneof_body::user_data_body(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(MessageData_oneof_body::link_body(is.read_message()?));
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(MessageData_oneof_body::username_proof_body(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != MessageType::MESSAGE_TYPE_NONE {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if self.fid != 0 {
            my_size += ::protobuf::rt::value_size(2, self.fid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.network != FarcasterNetwork::FARCASTER_NETWORK_NONE {
            my_size += ::protobuf::rt::enum_size(4, self.network);
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &MessageData_oneof_body::cast_add_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MessageData_oneof_body::cast_remove_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MessageData_oneof_body::reaction_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MessageData_oneof_body::verification_add_eth_address_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MessageData_oneof_body::verification_remove_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MessageData_oneof_body::user_data_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MessageData_oneof_body::link_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MessageData_oneof_body::username_proof_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != MessageType::MESSAGE_TYPE_NONE {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.fid != 0 {
            os.write_uint64(2, self.fid)?;
        }
        if self.timestamp != 0 {
            os.write_uint32(3, self.timestamp)?;
        }
        if self.network != FarcasterNetwork::FARCASTER_NETWORK_NONE {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.network))?;
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &MessageData_oneof_body::cast_add_body(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MessageData_oneof_body::cast_remove_body(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MessageData_oneof_body::reaction_body(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MessageData_oneof_body::verification_add_eth_address_body(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MessageData_oneof_body::verification_remove_body(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MessageData_oneof_body::user_data_body(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MessageData_oneof_body::link_body(ref v) => {
                    os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MessageData_oneof_body::username_proof_body(ref v) => {
                    os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MessageData {
        MessageData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MessageType>>(
                "type",
                |m: &MessageData| { &m.field_type },
                |m: &mut MessageData| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "fid",
                |m: &MessageData| { &m.fid },
                |m: &mut MessageData| { &mut m.fid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "timestamp",
                |m: &MessageData| { &m.timestamp },
                |m: &mut MessageData| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FarcasterNetwork>>(
                "network",
                |m: &MessageData| { &m.network },
                |m: &mut MessageData| { &mut m.network },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CastAddBody>(
                "cast_add_body",
                MessageData::has_cast_add_body,
                MessageData::get_cast_add_body,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CastRemoveBody>(
                "cast_remove_body",
                MessageData::has_cast_remove_body,
                MessageData::get_cast_remove_body,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ReactionBody>(
                "reaction_body",
                MessageData::has_reaction_body,
                MessageData::get_reaction_body,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, VerificationAddEthAddressBody>(
                "verification_add_eth_address_body",
                MessageData::has_verification_add_eth_address_body,
                MessageData::get_verification_add_eth_address_body,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, VerificationRemoveBody>(
                "verification_remove_body",
                MessageData::has_verification_remove_body,
                MessageData::get_verification_remove_body,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, UserDataBody>(
                "user_data_body",
                MessageData::has_user_data_body,
                MessageData::get_user_data_body,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LinkBody>(
                "link_body",
                MessageData::has_link_body,
                MessageData::get_link_body,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::username_proof::UserNameProof>(
                "username_proof_body",
                MessageData::has_username_proof_body,
                MessageData::get_username_proof_body,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MessageData>(
                "MessageData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MessageData {
        static instance: ::protobuf::rt::LazyV2<MessageData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MessageData::new)
    }
}

impl ::protobuf::Clear for MessageData {
    fn clear(&mut self) {
        self.field_type = MessageType::MESSAGE_TYPE_NONE;
        self.fid = 0;
        self.timestamp = 0;
        self.network = FarcasterNetwork::FARCASTER_NETWORK_NONE;
        self.body = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MessageData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UserDataBody {
    // message fields
    pub field_type: UserDataType,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UserDataBody {
    fn default() -> &'a UserDataBody {
        <UserDataBody as ::protobuf::Message>::default_instance()
    }
}

impl UserDataBody {
    pub fn new() -> UserDataBody {
        ::std::default::Default::default()
    }

    // .UserDataType type = 1;


    pub fn get_field_type(&self) -> UserDataType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = UserDataType::USER_DATA_TYPE_NONE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: UserDataType) {
        self.field_type = v;
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for UserDataBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != UserDataType::USER_DATA_TYPE_NONE {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != UserDataType::USER_DATA_TYPE_NONE {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UserDataBody {
        UserDataBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<UserDataType>>(
                "type",
                |m: &UserDataBody| { &m.field_type },
                |m: &mut UserDataBody| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &UserDataBody| { &m.value },
                |m: &mut UserDataBody| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UserDataBody>(
                "UserDataBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UserDataBody {
        static instance: ::protobuf::rt::LazyV2<UserDataBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UserDataBody::new)
    }
}

impl ::protobuf::Clear for UserDataBody {
    fn clear(&mut self) {
        self.field_type = UserDataType::USER_DATA_TYPE_NONE;
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UserDataBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserDataBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Embed {
    // message oneof groups
    pub embed: ::std::option::Option<Embed_oneof_embed>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Embed {
    fn default() -> &'a Embed {
        <Embed as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Embed_oneof_embed {
    url(::std::string::String),
    cast_id(CastId),
}

impl Embed {
    pub fn new() -> Embed {
        ::std::default::Default::default()
    }

    // string url = 1;


    pub fn get_url(&self) -> &str {
        match self.embed {
            ::std::option::Option::Some(Embed_oneof_embed::url(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_url(&mut self) {
        self.embed = ::std::option::Option::None;
    }

    pub fn has_url(&self) -> bool {
        match self.embed {
            ::std::option::Option::Some(Embed_oneof_embed::url(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.embed = ::std::option::Option::Some(Embed_oneof_embed::url(v))
    }

    // Mutable pointer to the field.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Embed_oneof_embed::url(_)) = self.embed {
        } else {
            self.embed = ::std::option::Option::Some(Embed_oneof_embed::url(::std::string::String::new()));
        }
        match self.embed {
            ::std::option::Option::Some(Embed_oneof_embed::url(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        if self.has_url() {
            match self.embed.take() {
                ::std::option::Option::Some(Embed_oneof_embed::url(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .CastId cast_id = 2;


    pub fn get_cast_id(&self) -> &CastId {
        match self.embed {
            ::std::option::Option::Some(Embed_oneof_embed::cast_id(ref v)) => v,
            _ => <CastId as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_cast_id(&mut self) {
        self.embed = ::std::option::Option::None;
    }

    pub fn has_cast_id(&self) -> bool {
        match self.embed {
            ::std::option::Option::Some(Embed_oneof_embed::cast_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cast_id(&mut self, v: CastId) {
        self.embed = ::std::option::Option::Some(Embed_oneof_embed::cast_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cast_id(&mut self) -> &mut CastId {
        if let ::std::option::Option::Some(Embed_oneof_embed::cast_id(_)) = self.embed {
        } else {
            self.embed = ::std::option::Option::Some(Embed_oneof_embed::cast_id(CastId::new()));
        }
        match self.embed {
            ::std::option::Option::Some(Embed_oneof_embed::cast_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cast_id(&mut self) -> CastId {
        if self.has_cast_id() {
            match self.embed.take() {
                ::std::option::Option::Some(Embed_oneof_embed::cast_id(v)) => v,
                _ => panic!(),
            }
        } else {
            CastId::new()
        }
    }
}

impl ::protobuf::Message for Embed {
    fn is_initialized(&self) -> bool {
        if let Some(Embed_oneof_embed::cast_id(ref v)) = self.embed {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.embed = ::std::option::Option::Some(Embed_oneof_embed::url(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.embed = ::std::option::Option::Some(Embed_oneof_embed::cast_id(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.embed {
            match v {
                &Embed_oneof_embed::url(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &Embed_oneof_embed::cast_id(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.embed {
            match v {
                &Embed_oneof_embed::url(ref v) => {
                    os.write_string(1, v)?;
                },
                &Embed_oneof_embed::cast_id(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Embed {
        Embed::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "url",
                Embed::has_url,
                Embed::get_url,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CastId>(
                "cast_id",
                Embed::has_cast_id,
                Embed::get_cast_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Embed>(
                "Embed",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Embed {
        static instance: ::protobuf::rt::LazyV2<Embed> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Embed::new)
    }
}

impl ::protobuf::Clear for Embed {
    fn clear(&mut self) {
        self.embed = ::std::option::Option::None;
        self.embed = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Embed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Embed {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CastAddBody {
    // message fields
    pub embeds_deprecated: ::protobuf::RepeatedField<::std::string::String>,
    pub mentions: ::std::vec::Vec<u64>,
    pub text: ::std::string::String,
    pub mentions_positions: ::std::vec::Vec<u32>,
    pub embeds: ::protobuf::RepeatedField<Embed>,
    // message oneof groups
    pub parent: ::std::option::Option<CastAddBody_oneof_parent>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CastAddBody {
    fn default() -> &'a CastAddBody {
        <CastAddBody as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum CastAddBody_oneof_parent {
    parent_cast_id(CastId),
    parent_url(::std::string::String),
}

impl CastAddBody {
    pub fn new() -> CastAddBody {
        ::std::default::Default::default()
    }

    // repeated string embeds_deprecated = 1;


    pub fn get_embeds_deprecated(&self) -> &[::std::string::String] {
        &self.embeds_deprecated
    }
    pub fn clear_embeds_deprecated(&mut self) {
        self.embeds_deprecated.clear();
    }

    // Param is passed by value, moved
    pub fn set_embeds_deprecated(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.embeds_deprecated = v;
    }

    // Mutable pointer to the field.
    pub fn mut_embeds_deprecated(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.embeds_deprecated
    }

    // Take field
    pub fn take_embeds_deprecated(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.embeds_deprecated, ::protobuf::RepeatedField::new())
    }

    // repeated uint64 mentions = 2;


    pub fn get_mentions(&self) -> &[u64] {
        &self.mentions
    }
    pub fn clear_mentions(&mut self) {
        self.mentions.clear();
    }

    // Param is passed by value, moved
    pub fn set_mentions(&mut self, v: ::std::vec::Vec<u64>) {
        self.mentions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mentions(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.mentions
    }

    // Take field
    pub fn take_mentions(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.mentions, ::std::vec::Vec::new())
    }

    // .CastId parent_cast_id = 3;


    pub fn get_parent_cast_id(&self) -> &CastId {
        match self.parent {
            ::std::option::Option::Some(CastAddBody_oneof_parent::parent_cast_id(ref v)) => v,
            _ => <CastId as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_parent_cast_id(&mut self) {
        self.parent = ::std::option::Option::None;
    }

    pub fn has_parent_cast_id(&self) -> bool {
        match self.parent {
            ::std::option::Option::Some(CastAddBody_oneof_parent::parent_cast_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_parent_cast_id(&mut self, v: CastId) {
        self.parent = ::std::option::Option::Some(CastAddBody_oneof_parent::parent_cast_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_parent_cast_id(&mut self) -> &mut CastId {
        if let ::std::option::Option::Some(CastAddBody_oneof_parent::parent_cast_id(_)) = self.parent {
        } else {
            self.parent = ::std::option::Option::Some(CastAddBody_oneof_parent::parent_cast_id(CastId::new()));
        }
        match self.parent {
            ::std::option::Option::Some(CastAddBody_oneof_parent::parent_cast_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_parent_cast_id(&mut self) -> CastId {
        if self.has_parent_cast_id() {
            match self.parent.take() {
                ::std::option::Option::Some(CastAddBody_oneof_parent::parent_cast_id(v)) => v,
                _ => panic!(),
            }
        } else {
            CastId::new()
        }
    }

    // string parent_url = 7;


    pub fn get_parent_url(&self) -> &str {
        match self.parent {
            ::std::option::Option::Some(CastAddBody_oneof_parent::parent_url(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_parent_url(&mut self) {
        self.parent = ::std::option::Option::None;
    }

    pub fn has_parent_url(&self) -> bool {
        match self.parent {
            ::std::option::Option::Some(CastAddBody_oneof_parent::parent_url(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_parent_url(&mut self, v: ::std::string::String) {
        self.parent = ::std::option::Option::Some(CastAddBody_oneof_parent::parent_url(v))
    }

    // Mutable pointer to the field.
    pub fn mut_parent_url(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(CastAddBody_oneof_parent::parent_url(_)) = self.parent {
        } else {
            self.parent = ::std::option::Option::Some(CastAddBody_oneof_parent::parent_url(::std::string::String::new()));
        }
        match self.parent {
            ::std::option::Option::Some(CastAddBody_oneof_parent::parent_url(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_parent_url(&mut self) -> ::std::string::String {
        if self.has_parent_url() {
            match self.parent.take() {
                ::std::option::Option::Some(CastAddBody_oneof_parent::parent_url(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string text = 4;


    pub fn get_text(&self) -> &str {
        &self.text
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        &mut self.text
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.text, ::std::string::String::new())
    }

    // repeated uint32 mentions_positions = 5;


    pub fn get_mentions_positions(&self) -> &[u32] {
        &self.mentions_positions
    }
    pub fn clear_mentions_positions(&mut self) {
        self.mentions_positions.clear();
    }

    // Param is passed by value, moved
    pub fn set_mentions_positions(&mut self, v: ::std::vec::Vec<u32>) {
        self.mentions_positions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mentions_positions(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.mentions_positions
    }

    // Take field
    pub fn take_mentions_positions(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.mentions_positions, ::std::vec::Vec::new())
    }

    // repeated .Embed embeds = 6;


    pub fn get_embeds(&self) -> &[Embed] {
        &self.embeds
    }
    pub fn clear_embeds(&mut self) {
        self.embeds.clear();
    }

    // Param is passed by value, moved
    pub fn set_embeds(&mut self, v: ::protobuf::RepeatedField<Embed>) {
        self.embeds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_embeds(&mut self) -> &mut ::protobuf::RepeatedField<Embed> {
        &mut self.embeds
    }

    // Take field
    pub fn take_embeds(&mut self) -> ::protobuf::RepeatedField<Embed> {
        ::std::mem::replace(&mut self.embeds, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CastAddBody {
    fn is_initialized(&self) -> bool {
        if let Some(CastAddBody_oneof_parent::parent_cast_id(ref v)) = self.parent {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.embeds {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.embeds_deprecated)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.mentions)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.parent = ::std::option::Option::Some(CastAddBody_oneof_parent::parent_cast_id(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.parent = ::std::option::Option::Some(CastAddBody_oneof_parent::parent_url(is.read_string()?));
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.text)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.mentions_positions)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.embeds)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.embeds_deprecated {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.mentions {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.text);
        }
        for value in &self.mentions_positions {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.embeds {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.parent {
            match v {
                &CastAddBody_oneof_parent::parent_cast_id(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CastAddBody_oneof_parent::parent_url(ref v) => {
                    my_size += ::protobuf::rt::string_size(7, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.embeds_deprecated {
            os.write_string(1, &v)?;
        };
        for v in &self.mentions {
            os.write_uint64(2, *v)?;
        };
        if !self.text.is_empty() {
            os.write_string(4, &self.text)?;
        }
        for v in &self.mentions_positions {
            os.write_uint32(5, *v)?;
        };
        for v in &self.embeds {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.parent {
            match v {
                &CastAddBody_oneof_parent::parent_cast_id(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CastAddBody_oneof_parent::parent_url(ref v) => {
                    os.write_string(7, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CastAddBody {
        CastAddBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "embeds_deprecated",
                |m: &CastAddBody| { &m.embeds_deprecated },
                |m: &mut CastAddBody| { &mut m.embeds_deprecated },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "mentions",
                |m: &CastAddBody| { &m.mentions },
                |m: &mut CastAddBody| { &mut m.mentions },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CastId>(
                "parent_cast_id",
                CastAddBody::has_parent_cast_id,
                CastAddBody::get_parent_cast_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "parent_url",
                CastAddBody::has_parent_url,
                CastAddBody::get_parent_url,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "text",
                |m: &CastAddBody| { &m.text },
                |m: &mut CastAddBody| { &mut m.text },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "mentions_positions",
                |m: &CastAddBody| { &m.mentions_positions },
                |m: &mut CastAddBody| { &mut m.mentions_positions },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Embed>>(
                "embeds",
                |m: &CastAddBody| { &m.embeds },
                |m: &mut CastAddBody| { &mut m.embeds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CastAddBody>(
                "CastAddBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CastAddBody {
        static instance: ::protobuf::rt::LazyV2<CastAddBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CastAddBody::new)
    }
}

impl ::protobuf::Clear for CastAddBody {
    fn clear(&mut self) {
        self.embeds_deprecated.clear();
        self.mentions.clear();
        self.parent = ::std::option::Option::None;
        self.parent = ::std::option::Option::None;
        self.text.clear();
        self.mentions_positions.clear();
        self.embeds.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CastAddBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CastAddBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CastRemoveBody {
    // message fields
    pub target_hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CastRemoveBody {
    fn default() -> &'a CastRemoveBody {
        <CastRemoveBody as ::protobuf::Message>::default_instance()
    }
}

impl CastRemoveBody {
    pub fn new() -> CastRemoveBody {
        ::std::default::Default::default()
    }

    // bytes target_hash = 1;


    pub fn get_target_hash(&self) -> &[u8] {
        &self.target_hash
    }
    pub fn clear_target_hash(&mut self) {
        self.target_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_target_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.target_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.target_hash
    }

    // Take field
    pub fn take_target_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.target_hash, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CastRemoveBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.target_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.target_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.target_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.target_hash.is_empty() {
            os.write_bytes(1, &self.target_hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CastRemoveBody {
        CastRemoveBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "target_hash",
                |m: &CastRemoveBody| { &m.target_hash },
                |m: &mut CastRemoveBody| { &mut m.target_hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CastRemoveBody>(
                "CastRemoveBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CastRemoveBody {
        static instance: ::protobuf::rt::LazyV2<CastRemoveBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CastRemoveBody::new)
    }
}

impl ::protobuf::Clear for CastRemoveBody {
    fn clear(&mut self) {
        self.target_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CastRemoveBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CastRemoveBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CastId {
    // message fields
    pub fid: u64,
    pub hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CastId {
    fn default() -> &'a CastId {
        <CastId as ::protobuf::Message>::default_instance()
    }
}

impl CastId {
    pub fn new() -> CastId {
        ::std::default::Default::default()
    }

    // uint64 fid = 1;


    pub fn get_fid(&self) -> u64 {
        self.fid
    }
    pub fn clear_fid(&mut self) {
        self.fid = 0;
    }

    // Param is passed by value, moved
    pub fn set_fid(&mut self, v: u64) {
        self.fid = v;
    }

    // bytes hash = 2;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CastId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.fid = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.fid != 0 {
            my_size += ::protobuf::rt::value_size(1, self.fid, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.fid != 0 {
            os.write_uint64(1, self.fid)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CastId {
        CastId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "fid",
                |m: &CastId| { &m.fid },
                |m: &mut CastId| { &mut m.fid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hash",
                |m: &CastId| { &m.hash },
                |m: &mut CastId| { &mut m.hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CastId>(
                "CastId",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CastId {
        static instance: ::protobuf::rt::LazyV2<CastId> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CastId::new)
    }
}

impl ::protobuf::Clear for CastId {
    fn clear(&mut self) {
        self.fid = 0;
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CastId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CastId {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReactionBody {
    // message fields
    pub field_type: ReactionType,
    // message oneof groups
    pub target: ::std::option::Option<ReactionBody_oneof_target>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReactionBody {
    fn default() -> &'a ReactionBody {
        <ReactionBody as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ReactionBody_oneof_target {
    target_cast_id(CastId),
    target_url(::std::string::String),
}

impl ReactionBody {
    pub fn new() -> ReactionBody {
        ::std::default::Default::default()
    }

    // .ReactionType type = 1;


    pub fn get_field_type(&self) -> ReactionType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ReactionType::REACTION_TYPE_NONE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ReactionType) {
        self.field_type = v;
    }

    // .CastId target_cast_id = 2;


    pub fn get_target_cast_id(&self) -> &CastId {
        match self.target {
            ::std::option::Option::Some(ReactionBody_oneof_target::target_cast_id(ref v)) => v,
            _ => <CastId as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_target_cast_id(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_target_cast_id(&self) -> bool {
        match self.target {
            ::std::option::Option::Some(ReactionBody_oneof_target::target_cast_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_target_cast_id(&mut self, v: CastId) {
        self.target = ::std::option::Option::Some(ReactionBody_oneof_target::target_cast_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_target_cast_id(&mut self) -> &mut CastId {
        if let ::std::option::Option::Some(ReactionBody_oneof_target::target_cast_id(_)) = self.target {
        } else {
            self.target = ::std::option::Option::Some(ReactionBody_oneof_target::target_cast_id(CastId::new()));
        }
        match self.target {
            ::std::option::Option::Some(ReactionBody_oneof_target::target_cast_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_target_cast_id(&mut self) -> CastId {
        if self.has_target_cast_id() {
            match self.target.take() {
                ::std::option::Option::Some(ReactionBody_oneof_target::target_cast_id(v)) => v,
                _ => panic!(),
            }
        } else {
            CastId::new()
        }
    }

    // string target_url = 3;


    pub fn get_target_url(&self) -> &str {
        match self.target {
            ::std::option::Option::Some(ReactionBody_oneof_target::target_url(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_target_url(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_target_url(&self) -> bool {
        match self.target {
            ::std::option::Option::Some(ReactionBody_oneof_target::target_url(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_target_url(&mut self, v: ::std::string::String) {
        self.target = ::std::option::Option::Some(ReactionBody_oneof_target::target_url(v))
    }

    // Mutable pointer to the field.
    pub fn mut_target_url(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(ReactionBody_oneof_target::target_url(_)) = self.target {
        } else {
            self.target = ::std::option::Option::Some(ReactionBody_oneof_target::target_url(::std::string::String::new()));
        }
        match self.target {
            ::std::option::Option::Some(ReactionBody_oneof_target::target_url(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_target_url(&mut self) -> ::std::string::String {
        if self.has_target_url() {
            match self.target.take() {
                ::std::option::Option::Some(ReactionBody_oneof_target::target_url(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for ReactionBody {
    fn is_initialized(&self) -> bool {
        if let Some(ReactionBody_oneof_target::target_cast_id(ref v)) = self.target {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.target = ::std::option::Option::Some(ReactionBody_oneof_target::target_cast_id(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.target = ::std::option::Option::Some(ReactionBody_oneof_target::target_url(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != ReactionType::REACTION_TYPE_NONE {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if let ::std::option::Option::Some(ref v) = self.target {
            match v {
                &ReactionBody_oneof_target::target_cast_id(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReactionBody_oneof_target::target_url(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != ReactionType::REACTION_TYPE_NONE {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if let ::std::option::Option::Some(ref v) = self.target {
            match v {
                &ReactionBody_oneof_target::target_cast_id(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReactionBody_oneof_target::target_url(ref v) => {
                    os.write_string(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReactionBody {
        ReactionBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ReactionType>>(
                "type",
                |m: &ReactionBody| { &m.field_type },
                |m: &mut ReactionBody| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CastId>(
                "target_cast_id",
                ReactionBody::has_target_cast_id,
                ReactionBody::get_target_cast_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "target_url",
                ReactionBody::has_target_url,
                ReactionBody::get_target_url,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReactionBody>(
                "ReactionBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReactionBody {
        static instance: ::protobuf::rt::LazyV2<ReactionBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReactionBody::new)
    }
}

impl ::protobuf::Clear for ReactionBody {
    fn clear(&mut self) {
        self.field_type = ReactionType::REACTION_TYPE_NONE;
        self.target = ::std::option::Option::None;
        self.target = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReactionBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReactionBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VerificationAddEthAddressBody {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    pub eth_signature: ::std::vec::Vec<u8>,
    pub block_hash: ::std::vec::Vec<u8>,
    pub verification_type: u32,
    pub chain_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VerificationAddEthAddressBody {
    fn default() -> &'a VerificationAddEthAddressBody {
        <VerificationAddEthAddressBody as ::protobuf::Message>::default_instance()
    }
}

impl VerificationAddEthAddressBody {
    pub fn new() -> VerificationAddEthAddressBody {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }

    // bytes eth_signature = 2;


    pub fn get_eth_signature(&self) -> &[u8] {
        &self.eth_signature
    }
    pub fn clear_eth_signature(&mut self) {
        self.eth_signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_eth_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.eth_signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eth_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.eth_signature
    }

    // Take field
    pub fn take_eth_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.eth_signature, ::std::vec::Vec::new())
    }

    // bytes block_hash = 3;


    pub fn get_block_hash(&self) -> &[u8] {
        &self.block_hash
    }
    pub fn clear_block_hash(&mut self) {
        self.block_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_hash
    }

    // Take field
    pub fn take_block_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_hash, ::std::vec::Vec::new())
    }

    // uint32 verification_type = 4;


    pub fn get_verification_type(&self) -> u32 {
        self.verification_type
    }
    pub fn clear_verification_type(&mut self) {
        self.verification_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_verification_type(&mut self, v: u32) {
        self.verification_type = v;
    }

    // uint32 chain_id = 5;


    pub fn get_chain_id(&self) -> u32 {
        self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: u32) {
        self.chain_id = v;
    }
}

impl ::protobuf::Message for VerificationAddEthAddressBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.eth_signature)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_hash)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.verification_type = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.chain_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        if !self.eth_signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.eth_signature);
        }
        if !self.block_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.block_hash);
        }
        if self.verification_type != 0 {
            my_size += ::protobuf::rt::value_size(4, self.verification_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.chain_id != 0 {
            my_size += ::protobuf::rt::value_size(5, self.chain_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        if !self.eth_signature.is_empty() {
            os.write_bytes(2, &self.eth_signature)?;
        }
        if !self.block_hash.is_empty() {
            os.write_bytes(3, &self.block_hash)?;
        }
        if self.verification_type != 0 {
            os.write_uint32(4, self.verification_type)?;
        }
        if self.chain_id != 0 {
            os.write_uint32(5, self.chain_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VerificationAddEthAddressBody {
        VerificationAddEthAddressBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &VerificationAddEthAddressBody| { &m.address },
                |m: &mut VerificationAddEthAddressBody| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "eth_signature",
                |m: &VerificationAddEthAddressBody| { &m.eth_signature },
                |m: &mut VerificationAddEthAddressBody| { &mut m.eth_signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "block_hash",
                |m: &VerificationAddEthAddressBody| { &m.block_hash },
                |m: &mut VerificationAddEthAddressBody| { &mut m.block_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "verification_type",
                |m: &VerificationAddEthAddressBody| { &m.verification_type },
                |m: &mut VerificationAddEthAddressBody| { &mut m.verification_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "chain_id",
                |m: &VerificationAddEthAddressBody| { &m.chain_id },
                |m: &mut VerificationAddEthAddressBody| { &mut m.chain_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VerificationAddEthAddressBody>(
                "VerificationAddEthAddressBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VerificationAddEthAddressBody {
        static instance: ::protobuf::rt::LazyV2<VerificationAddEthAddressBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VerificationAddEthAddressBody::new)
    }
}

impl ::protobuf::Clear for VerificationAddEthAddressBody {
    fn clear(&mut self) {
        self.address.clear();
        self.eth_signature.clear();
        self.block_hash.clear();
        self.verification_type = 0;
        self.chain_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VerificationAddEthAddressBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VerificationAddEthAddressBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VerificationRemoveBody {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VerificationRemoveBody {
    fn default() -> &'a VerificationRemoveBody {
        <VerificationRemoveBody as ::protobuf::Message>::default_instance()
    }
}

impl VerificationRemoveBody {
    pub fn new() -> VerificationRemoveBody {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for VerificationRemoveBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VerificationRemoveBody {
        VerificationRemoveBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &VerificationRemoveBody| { &m.address },
                |m: &mut VerificationRemoveBody| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VerificationRemoveBody>(
                "VerificationRemoveBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VerificationRemoveBody {
        static instance: ::protobuf::rt::LazyV2<VerificationRemoveBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VerificationRemoveBody::new)
    }
}

impl ::protobuf::Clear for VerificationRemoveBody {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VerificationRemoveBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VerificationRemoveBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LinkBody {
    // message fields
    pub field_type: ::std::string::String,
    pub displayTimestamp: u32,
    // message oneof groups
    pub target: ::std::option::Option<LinkBody_oneof_target>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LinkBody {
    fn default() -> &'a LinkBody {
        <LinkBody as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum LinkBody_oneof_target {
    target_fid(u64),
}

impl LinkBody {
    pub fn new() -> LinkBody {
        ::std::default::Default::default()
    }

    // string type = 1;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // uint32 displayTimestamp = 2;


    pub fn get_displayTimestamp(&self) -> u32 {
        self.displayTimestamp
    }
    pub fn clear_displayTimestamp(&mut self) {
        self.displayTimestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_displayTimestamp(&mut self, v: u32) {
        self.displayTimestamp = v;
    }

    // uint64 target_fid = 3;


    pub fn get_target_fid(&self) -> u64 {
        match self.target {
            ::std::option::Option::Some(LinkBody_oneof_target::target_fid(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_target_fid(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_target_fid(&self) -> bool {
        match self.target {
            ::std::option::Option::Some(LinkBody_oneof_target::target_fid(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_target_fid(&mut self, v: u64) {
        self.target = ::std::option::Option::Some(LinkBody_oneof_target::target_fid(v))
    }
}

impl ::protobuf::Message for LinkBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.displayTimestamp = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.target = ::std::option::Option::Some(LinkBody_oneof_target::target_fid(is.read_uint64()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if self.displayTimestamp != 0 {
            my_size += ::protobuf::rt::value_size(2, self.displayTimestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.target {
            match v {
                &LinkBody_oneof_target::target_fid(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if self.displayTimestamp != 0 {
            os.write_uint32(2, self.displayTimestamp)?;
        }
        if let ::std::option::Option::Some(ref v) = self.target {
            match v {
                &LinkBody_oneof_target::target_fid(v) => {
                    os.write_uint64(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LinkBody {
        LinkBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &LinkBody| { &m.field_type },
                |m: &mut LinkBody| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "displayTimestamp",
                |m: &LinkBody| { &m.displayTimestamp },
                |m: &mut LinkBody| { &mut m.displayTimestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor::<_>(
                "target_fid",
                LinkBody::has_target_fid,
                LinkBody::get_target_fid,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LinkBody>(
                "LinkBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LinkBody {
        static instance: ::protobuf::rt::LazyV2<LinkBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LinkBody::new)
    }
}

impl ::protobuf::Clear for LinkBody {
    fn clear(&mut self) {
        self.field_type.clear();
        self.displayTimestamp = 0;
        self.target = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LinkBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LinkBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HashScheme {
    HASH_SCHEME_NONE = 0,
    HASH_SCHEME_BLAKE3 = 1,
}

impl ::protobuf::ProtobufEnum for HashScheme {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HashScheme> {
        match value {
            0 => ::std::option::Option::Some(HashScheme::HASH_SCHEME_NONE),
            1 => ::std::option::Option::Some(HashScheme::HASH_SCHEME_BLAKE3),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HashScheme] = &[
            HashScheme::HASH_SCHEME_NONE,
            HashScheme::HASH_SCHEME_BLAKE3,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<HashScheme>("HashScheme", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for HashScheme {
}

impl ::std::default::Default for HashScheme {
    fn default() -> Self {
        HashScheme::HASH_SCHEME_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for HashScheme {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SignatureScheme {
    SIGNATURE_SCHEME_NONE = 0,
    SIGNATURE_SCHEME_ED25519 = 1,
    SIGNATURE_SCHEME_EIP712 = 2,
}

impl ::protobuf::ProtobufEnum for SignatureScheme {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SignatureScheme> {
        match value {
            0 => ::std::option::Option::Some(SignatureScheme::SIGNATURE_SCHEME_NONE),
            1 => ::std::option::Option::Some(SignatureScheme::SIGNATURE_SCHEME_ED25519),
            2 => ::std::option::Option::Some(SignatureScheme::SIGNATURE_SCHEME_EIP712),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SignatureScheme] = &[
            SignatureScheme::SIGNATURE_SCHEME_NONE,
            SignatureScheme::SIGNATURE_SCHEME_ED25519,
            SignatureScheme::SIGNATURE_SCHEME_EIP712,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SignatureScheme>("SignatureScheme", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SignatureScheme {
}

impl ::std::default::Default for SignatureScheme {
    fn default() -> Self {
        SignatureScheme::SIGNATURE_SCHEME_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for SignatureScheme {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MessageType {
    MESSAGE_TYPE_NONE = 0,
    MESSAGE_TYPE_CAST_ADD = 1,
    MESSAGE_TYPE_CAST_REMOVE = 2,
    MESSAGE_TYPE_REACTION_ADD = 3,
    MESSAGE_TYPE_REACTION_REMOVE = 4,
    MESSAGE_TYPE_LINK_ADD = 5,
    MESSAGE_TYPE_LINK_REMOVE = 6,
    MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS = 7,
    MESSAGE_TYPE_VERIFICATION_REMOVE = 8,
    MESSAGE_TYPE_USER_DATA_ADD = 11,
    MESSAGE_TYPE_USERNAME_PROOF = 12,
}

impl ::protobuf::ProtobufEnum for MessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MessageType> {
        match value {
            0 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_NONE),
            1 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_CAST_ADD),
            2 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_CAST_REMOVE),
            3 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_REACTION_ADD),
            4 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_REACTION_REMOVE),
            5 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_LINK_ADD),
            6 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_LINK_REMOVE),
            7 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS),
            8 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_VERIFICATION_REMOVE),
            11 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_USER_DATA_ADD),
            12 => ::std::option::Option::Some(MessageType::MESSAGE_TYPE_USERNAME_PROOF),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MessageType] = &[
            MessageType::MESSAGE_TYPE_NONE,
            MessageType::MESSAGE_TYPE_CAST_ADD,
            MessageType::MESSAGE_TYPE_CAST_REMOVE,
            MessageType::MESSAGE_TYPE_REACTION_ADD,
            MessageType::MESSAGE_TYPE_REACTION_REMOVE,
            MessageType::MESSAGE_TYPE_LINK_ADD,
            MessageType::MESSAGE_TYPE_LINK_REMOVE,
            MessageType::MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS,
            MessageType::MESSAGE_TYPE_VERIFICATION_REMOVE,
            MessageType::MESSAGE_TYPE_USER_DATA_ADD,
            MessageType::MESSAGE_TYPE_USERNAME_PROOF,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MessageType>("MessageType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MessageType {
}

impl ::std::default::Default for MessageType {
    fn default() -> Self {
        MessageType::MESSAGE_TYPE_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FarcasterNetwork {
    FARCASTER_NETWORK_NONE = 0,
    FARCASTER_NETWORK_MAINNET = 1,
    FARCASTER_NETWORK_TESTNET = 2,
    FARCASTER_NETWORK_DEVNET = 3,
}

impl ::protobuf::ProtobufEnum for FarcasterNetwork {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FarcasterNetwork> {
        match value {
            0 => ::std::option::Option::Some(FarcasterNetwork::FARCASTER_NETWORK_NONE),
            1 => ::std::option::Option::Some(FarcasterNetwork::FARCASTER_NETWORK_MAINNET),
            2 => ::std::option::Option::Some(FarcasterNetwork::FARCASTER_NETWORK_TESTNET),
            3 => ::std::option::Option::Some(FarcasterNetwork::FARCASTER_NETWORK_DEVNET),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FarcasterNetwork] = &[
            FarcasterNetwork::FARCASTER_NETWORK_NONE,
            FarcasterNetwork::FARCASTER_NETWORK_MAINNET,
            FarcasterNetwork::FARCASTER_NETWORK_TESTNET,
            FarcasterNetwork::FARCASTER_NETWORK_DEVNET,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FarcasterNetwork>("FarcasterNetwork", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FarcasterNetwork {
}

impl ::std::default::Default for FarcasterNetwork {
    fn default() -> Self {
        FarcasterNetwork::FARCASTER_NETWORK_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for FarcasterNetwork {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum UserDataType {
    USER_DATA_TYPE_NONE = 0,
    USER_DATA_TYPE_PFP = 1,
    USER_DATA_TYPE_DISPLAY = 2,
    USER_DATA_TYPE_BIO = 3,
    USER_DATA_TYPE_URL = 5,
    USER_DATA_TYPE_USERNAME = 6,
}

impl ::protobuf::ProtobufEnum for UserDataType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<UserDataType> {
        match value {
            0 => ::std::option::Option::Some(UserDataType::USER_DATA_TYPE_NONE),
            1 => ::std::option::Option::Some(UserDataType::USER_DATA_TYPE_PFP),
            2 => ::std::option::Option::Some(UserDataType::USER_DATA_TYPE_DISPLAY),
            3 => ::std::option::Option::Some(UserDataType::USER_DATA_TYPE_BIO),
            5 => ::std::option::Option::Some(UserDataType::USER_DATA_TYPE_URL),
            6 => ::std::option::Option::Some(UserDataType::USER_DATA_TYPE_USERNAME),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [UserDataType] = &[
            UserDataType::USER_DATA_TYPE_NONE,
            UserDataType::USER_DATA_TYPE_PFP,
            UserDataType::USER_DATA_TYPE_DISPLAY,
            UserDataType::USER_DATA_TYPE_BIO,
            UserDataType::USER_DATA_TYPE_URL,
            UserDataType::USER_DATA_TYPE_USERNAME,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<UserDataType>("UserDataType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for UserDataType {
}

impl ::std::default::Default for UserDataType {
    fn default() -> Self {
        UserDataType::USER_DATA_TYPE_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for UserDataType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ReactionType {
    REACTION_TYPE_NONE = 0,
    REACTION_TYPE_LIKE = 1,
    REACTION_TYPE_RECAST = 2,
}

impl ::protobuf::ProtobufEnum for ReactionType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ReactionType> {
        match value {
            0 => ::std::option::Option::Some(ReactionType::REACTION_TYPE_NONE),
            1 => ::std::option::Option::Some(ReactionType::REACTION_TYPE_LIKE),
            2 => ::std::option::Option::Some(ReactionType::REACTION_TYPE_RECAST),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ReactionType] = &[
            ReactionType::REACTION_TYPE_NONE,
            ReactionType::REACTION_TYPE_LIKE,
            ReactionType::REACTION_TYPE_RECAST,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ReactionType>("ReactionType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ReactionType {
}

impl ::std::default::Default for ReactionType {
    fn default() -> Self {
        ReactionType::REACTION_TYPE_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for ReactionType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\x1a\x14username_proof.proto\"\x8f\x02\n\x07Message\x12\
    \"\n\x04data\x18\x01\x20\x01(\x0b2\x0c.MessageDataR\x04dataB\0\x12\x14\n\
    \x04hash\x18\x02\x20\x01(\x0cR\x04hashB\0\x12.\n\x0bhash_scheme\x18\x03\
    \x20\x01(\x0e2\x0b.HashSchemeR\nhashSchemeB\0\x12\x1e\n\tsignature\x18\
    \x04\x20\x01(\x0cR\tsignatureB\0\x12=\n\x10signature_scheme\x18\x05\x20\
    \x01(\x0e2\x10.SignatureSchemeR\x0fsignatureSchemeB\0\x12\x18\n\x06signe\
    r\x18\x06\x20\x01(\x0cR\x06signerB\0\x12\x1f\n\ndata_bytes\x18\x07\x20\
    \x01(\x0cR\tdataBytesB\0:\0\"\xb9\x05\n\x0bMessageData\x12\"\n\x04type\
    \x18\x01\x20\x01(\x0e2\x0c.MessageTypeR\x04typeB\0\x12\x12\n\x03fid\x18\
    \x02\x20\x01(\x04R\x03fidB\0\x12\x1e\n\ttimestamp\x18\x03\x20\x01(\rR\tt\
    imestampB\0\x12-\n\x07network\x18\x04\x20\x01(\x0e2\x11.FarcasterNetwork\
    R\x07networkB\0\x124\n\rcast_add_body\x18\x05\x20\x01(\x0b2\x0c.CastAddB\
    odyH\0R\x0bcastAddBodyB\0\x12=\n\x10cast_remove_body\x18\x06\x20\x01(\
    \x0b2\x0f.CastRemoveBodyH\0R\x0ecastRemoveBodyB\0\x126\n\rreaction_body\
    \x18\x07\x20\x01(\x0b2\r.ReactionBodyH\0R\x0creactionBodyB\0\x12l\n!veri\
    fication_add_eth_address_body\x18\t\x20\x01(\x0b2\x1e.VerificationAddEth\
    AddressBodyH\0R\x1dverificationAddEthAddressBodyB\0\x12U\n\x18verificati\
    on_remove_body\x18\n\x20\x01(\x0b2\x17.VerificationRemoveBodyH\0R\x16ver\
    ificationRemoveBodyB\0\x127\n\x0euser_data_body\x18\x0c\x20\x01(\x0b2\r.\
    UserDataBodyH\0R\x0cuserDataBodyB\0\x12*\n\tlink_body\x18\x0e\x20\x01(\
    \x0b2\t.LinkBodyH\0R\x08linkBodyB\0\x12B\n\x13username_proof_body\x18\
    \x0f\x20\x01(\x0b2\x0e.UserNameProofH\0R\x11usernameProofBodyB\0B\x06\n\
    \x04body:\0\"M\n\x0cUserDataBody\x12#\n\x04type\x18\x01\x20\x01(\x0e2\r.\
    UserDataTypeR\x04typeB\0\x12\x16\n\x05value\x18\x02\x20\x01(\tR\x05value\
    B\0:\0\"N\n\x05Embed\x12\x14\n\x03url\x18\x01\x20\x01(\tH\0R\x03urlB\0\
    \x12$\n\x07cast_id\x18\x02\x20\x01(\x0b2\x07.CastIdH\0R\x06castIdB\0B\
    \x07\n\x05embed:\0\"\xa5\x02\n\x0bCastAddBody\x12-\n\x11embeds_deprecate\
    d\x18\x01\x20\x03(\tR\x10embedsDeprecatedB\0\x12\x1c\n\x08mentions\x18\
    \x02\x20\x03(\x04R\x08mentionsB\0\x121\n\x0eparent_cast_id\x18\x03\x20\
    \x01(\x0b2\x07.CastIdH\0R\x0cparentCastIdB\0\x12!\n\nparent_url\x18\x07\
    \x20\x01(\tH\0R\tparentUrlB\0\x12\x14\n\x04text\x18\x04\x20\x01(\tR\x04t\
    extB\0\x12/\n\x12mentions_positions\x18\x05\x20\x03(\rR\x11mentionsPosit\
    ionsB\0\x12\x20\n\x06embeds\x18\x06\x20\x03(\x0b2\x06.EmbedR\x06embedsB\
    \0B\x08\n\x06parent:\0\"5\n\x0eCastRemoveBody\x12!\n\x0btarget_hash\x18\
    \x01\x20\x01(\x0cR\ntargetHashB\0:\0\"4\n\x06CastId\x12\x12\n\x03fid\x18\
    \x01\x20\x01(\x04R\x03fidB\0\x12\x14\n\x04hash\x18\x02\x20\x01(\x0cR\x04\
    hashB\0:\0\"\x95\x01\n\x0cReactionBody\x12#\n\x04type\x18\x01\x20\x01(\
    \x0e2\r.ReactionTypeR\x04typeB\0\x121\n\x0etarget_cast_id\x18\x02\x20\
    \x01(\x0b2\x07.CastIdH\0R\x0ctargetCastIdB\0\x12!\n\ntarget_url\x18\x03\
    \x20\x01(\tH\0R\ttargetUrlB\0B\x08\n\x06target:\0\"\xd1\x01\n\x1dVerific\
    ationAddEthAddressBody\x12\x1a\n\x07address\x18\x01\x20\x01(\x0cR\x07add\
    ressB\0\x12%\n\reth_signature\x18\x02\x20\x01(\x0cR\x0cethSignatureB\0\
    \x12\x1f\n\nblock_hash\x18\x03\x20\x01(\x0cR\tblockHashB\0\x12-\n\x11ver\
    ification_type\x18\x04\x20\x01(\rR\x10verificationTypeB\0\x12\x1b\n\x08c\
    hain_id\x18\x05\x20\x01(\rR\x07chainIdB\0:\0\"6\n\x16VerificationRemoveB\
    ody\x12\x1a\n\x07address\x18\x01\x20\x01(\x0cR\x07addressB\0:\0\"}\n\x08\
    LinkBody\x12\x14\n\x04type\x18\x01\x20\x01(\tR\x04typeB\0\x12,\n\x10disp\
    layTimestamp\x18\x02\x20\x01(\rR\x10displayTimestampB\0\x12!\n\ntarget_f\
    id\x18\x03\x20\x01(\x04H\0R\ttargetFidB\0B\x08\n\x06target:\0*<\n\nHashS\
    cheme\x12\x14\n\x10HASH_SCHEME_NONE\x10\0\x12\x16\n\x12HASH_SCHEME_BLAKE\
    3\x10\x01\x1a\0*i\n\x0fSignatureScheme\x12\x19\n\x15SIGNATURE_SCHEME_NON\
    E\x10\0\x12\x1c\n\x18SIGNATURE_SCHEME_ED25519\x10\x01\x12\x1b\n\x17SIGNA\
    TURE_SCHEME_EIP712\x10\x02\x1a\0*\xef\x02\n\x0bMessageType\x12\x15\n\x11\
    MESSAGE_TYPE_NONE\x10\0\x12\x19\n\x15MESSAGE_TYPE_CAST_ADD\x10\x01\x12\
    \x1c\n\x18MESSAGE_TYPE_CAST_REMOVE\x10\x02\x12\x1d\n\x19MESSAGE_TYPE_REA\
    CTION_ADD\x10\x03\x12\x20\n\x1cMESSAGE_TYPE_REACTION_REMOVE\x10\x04\x12\
    \x19\n\x15MESSAGE_TYPE_LINK_ADD\x10\x05\x12\x1c\n\x18MESSAGE_TYPE_LINK_R\
    EMOVE\x10\x06\x12-\n)MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS\x10\x07\
    \x12$\n\x20MESSAGE_TYPE_VERIFICATION_REMOVE\x10\x08\x12\x1e\n\x1aMESSAGE\
    _TYPE_USER_DATA_ADD\x10\x0b\x12\x1f\n\x1bMESSAGE_TYPE_USERNAME_PROOF\x10\
    \x0c\x1a\0*\x8c\x01\n\x10FarcasterNetwork\x12\x1a\n\x16FARCASTER_NETWORK\
    _NONE\x10\0\x12\x1d\n\x19FARCASTER_NETWORK_MAINNET\x10\x01\x12\x1d\n\x19\
    FARCASTER_NETWORK_TESTNET\x10\x02\x12\x1c\n\x18FARCASTER_NETWORK_DEVNET\
    \x10\x03\x1a\0*\xaa\x01\n\x0cUserDataType\x12\x17\n\x13USER_DATA_TYPE_NO\
    NE\x10\0\x12\x16\n\x12USER_DATA_TYPE_PFP\x10\x01\x12\x1a\n\x16USER_DATA_\
    TYPE_DISPLAY\x10\x02\x12\x16\n\x12USER_DATA_TYPE_BIO\x10\x03\x12\x16\n\
    \x12USER_DATA_TYPE_URL\x10\x05\x12\x1b\n\x17USER_DATA_TYPE_USERNAME\x10\
    \x06\x1a\0*Z\n\x0cReactionType\x12\x16\n\x12REACTION_TYPE_NONE\x10\0\x12\
    \x16\n\x12REACTION_TYPE_LIKE\x10\x01\x12\x18\n\x14REACTION_TYPE_RECAST\
    \x10\x02\x1a\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
