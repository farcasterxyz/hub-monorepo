// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `username_proof.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct UserNameProof {
    // message fields
    pub timestamp: u64,
    pub name: ::std::vec::Vec<u8>,
    pub owner: ::std::vec::Vec<u8>,
    pub signature: ::std::vec::Vec<u8>,
    pub fid: u64,
    pub field_type: UserNameType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UserNameProof {
    fn default() -> &'a UserNameProof {
        <UserNameProof as ::protobuf::Message>::default_instance()
    }
}

impl UserNameProof {
    pub fn new() -> UserNameProof {
        ::std::default::Default::default()
    }

    // uint64 timestamp = 1;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // bytes name = 2;


    pub fn get_name(&self) -> &[u8] {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::vec::Vec<u8>) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.name, ::std::vec::Vec::new())
    }

    // bytes owner = 3;


    pub fn get_owner(&self) -> &[u8] {
        &self.owner
    }
    pub fn clear_owner(&mut self) {
        self.owner.clear();
    }

    // Param is passed by value, moved
    pub fn set_owner(&mut self, v: ::std::vec::Vec<u8>) {
        self.owner = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_owner(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.owner
    }

    // Take field
    pub fn take_owner(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.owner, ::std::vec::Vec::new())
    }

    // bytes signature = 4;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }

    // uint64 fid = 5;


    pub fn get_fid(&self) -> u64 {
        self.fid
    }
    pub fn clear_fid(&mut self) {
        self.fid = 0;
    }

    // Param is passed by value, moved
    pub fn set_fid(&mut self, v: u64) {
        self.fid = v;
    }

    // .UserNameType type = 6;


    pub fn get_field_type(&self) -> UserNameType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = UserNameType::USERNAME_TYPE_NONE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: UserNameType) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for UserNameProof {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.owner)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.fid = tmp;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 6, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.name);
        }
        if !self.owner.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.owner);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.signature);
        }
        if self.fid != 0 {
            my_size += ::protobuf::rt::value_size(5, self.fid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.field_type != UserNameType::USERNAME_TYPE_NONE {
            my_size += ::protobuf::rt::enum_size(6, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp != 0 {
            os.write_uint64(1, self.timestamp)?;
        }
        if !self.name.is_empty() {
            os.write_bytes(2, &self.name)?;
        }
        if !self.owner.is_empty() {
            os.write_bytes(3, &self.owner)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(4, &self.signature)?;
        }
        if self.fid != 0 {
            os.write_uint64(5, self.fid)?;
        }
        if self.field_type != UserNameType::USERNAME_TYPE_NONE {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UserNameProof {
        UserNameProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &UserNameProof| { &m.timestamp },
                |m: &mut UserNameProof| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "name",
                |m: &UserNameProof| { &m.name },
                |m: &mut UserNameProof| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "owner",
                |m: &UserNameProof| { &m.owner },
                |m: &mut UserNameProof| { &mut m.owner },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &UserNameProof| { &m.signature },
                |m: &mut UserNameProof| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "fid",
                |m: &UserNameProof| { &m.fid },
                |m: &mut UserNameProof| { &mut m.fid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<UserNameType>>(
                "type",
                |m: &UserNameProof| { &m.field_type },
                |m: &mut UserNameProof| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UserNameProof>(
                "UserNameProof",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UserNameProof {
        static instance: ::protobuf::rt::LazyV2<UserNameProof> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UserNameProof::new)
    }
}

impl ::protobuf::Clear for UserNameProof {
    fn clear(&mut self) {
        self.timestamp = 0;
        self.name.clear();
        self.owner.clear();
        self.signature.clear();
        self.fid = 0;
        self.field_type = UserNameType::USERNAME_TYPE_NONE;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UserNameProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserNameProof {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum UserNameType {
    USERNAME_TYPE_NONE = 0,
    USERNAME_TYPE_FNAME = 1,
    USERNAME_TYPE_ENS_L1 = 2,
}

impl ::protobuf::ProtobufEnum for UserNameType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<UserNameType> {
        match value {
            0 => ::std::option::Option::Some(UserNameType::USERNAME_TYPE_NONE),
            1 => ::std::option::Option::Some(UserNameType::USERNAME_TYPE_FNAME),
            2 => ::std::option::Option::Some(UserNameType::USERNAME_TYPE_ENS_L1),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [UserNameType] = &[
            UserNameType::USERNAME_TYPE_NONE,
            UserNameType::USERNAME_TYPE_FNAME,
            UserNameType::USERNAME_TYPE_ENS_L1,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<UserNameType>("UserNameType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for UserNameType {
}

impl ::std::default::Default for UserNameType {
    fn default() -> Self {
        UserNameType::USERNAME_TYPE_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for UserNameType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14username_proof.proto\"\xb8\x01\n\rUserNameProof\x12\x1e\n\ttimesta\
    mp\x18\x01\x20\x01(\x04R\ttimestampB\0\x12\x14\n\x04name\x18\x02\x20\x01\
    (\x0cR\x04nameB\0\x12\x16\n\x05owner\x18\x03\x20\x01(\x0cR\x05ownerB\0\
    \x12\x1e\n\tsignature\x18\x04\x20\x01(\x0cR\tsignatureB\0\x12\x12\n\x03f\
    id\x18\x05\x20\x01(\x04R\x03fidB\0\x12#\n\x04type\x18\x06\x20\x01(\x0e2\
    \r.UserNameTypeR\x04typeB\0:\0*[\n\x0cUserNameType\x12\x16\n\x12USERNAME\
    _TYPE_NONE\x10\0\x12\x17\n\x13USERNAME_TYPE_FNAME\x10\x01\x12\x18\n\x14U\
    SERNAME_TYPE_ENS_L1\x10\x02\x1a\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
