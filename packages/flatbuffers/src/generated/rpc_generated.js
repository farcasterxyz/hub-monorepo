// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { CastId as CastId, ReactionType as ReactionType, UserDataType as UserDataType, UserId as UserId } from './message_generated.js';
export var EventType;
(function (EventType) {
    EventType[EventType["MergeMessage"] = 0] = "MergeMessage";
    EventType[EventType["PruneMessage"] = 1] = "PruneMessage";
    EventType[EventType["RevokeMessage"] = 2] = "RevokeMessage";
    EventType[EventType["MergeIdRegistryEvent"] = 3] = "MergeIdRegistryEvent";
    EventType[EventType["MergeNameRegistryEvent"] = 4] = "MergeNameRegistryEvent";
})(EventType || (EventType = {}));
export class MessageBytes {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMessageBytes(bb, obj) {
        return (obj || new MessageBytes()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMessageBytes(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MessageBytes()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    messageBytes(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    messageBytesLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    messageBytesArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startMessageBytes(builder) {
        builder.startObject(1);
    }
    static addMessageBytes(builder, messageBytesOffset) {
        builder.addFieldOffset(0, messageBytesOffset, 0);
    }
    static createMessageBytesVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startMessageBytesVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endMessageBytes(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // message_bytes
        return offset;
    }
    static createMessageBytes(builder, messageBytesOffset) {
        MessageBytes.startMessageBytes(builder);
        MessageBytes.addMessageBytes(builder, messageBytesOffset);
        return MessageBytes.endMessageBytes(builder);
    }
    unpack() {
        return new MessageBytesT(this.bb.createScalarList(this.messageBytes.bind(this), this.messageBytesLength()));
    }
    unpackTo(_o) {
        _o.messageBytes = this.bb.createScalarList(this.messageBytes.bind(this), this.messageBytesLength());
    }
}
export class MessageBytesT {
    messageBytes;
    constructor(messageBytes = []) {
        this.messageBytes = messageBytes;
    }
    pack(builder) {
        const messageBytes = MessageBytes.createMessageBytesVector(builder, this.messageBytes);
        return MessageBytes.createMessageBytes(builder, messageBytes);
    }
}
export class MessagesResponse {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMessagesResponse(bb, obj) {
        return (obj || new MessagesResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMessagesResponse(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MessagesResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    messages(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new MessageBytes()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    messagesLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startMessagesResponse(builder) {
        builder.startObject(1);
    }
    static addMessages(builder, messagesOffset) {
        builder.addFieldOffset(0, messagesOffset, 0);
    }
    static createMessagesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startMessagesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endMessagesResponse(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createMessagesResponse(builder, messagesOffset) {
        MessagesResponse.startMessagesResponse(builder);
        MessagesResponse.addMessages(builder, messagesOffset);
        return MessagesResponse.endMessagesResponse(builder);
    }
    unpack() {
        return new MessagesResponseT(this.bb.createObjList(this.messages.bind(this), this.messagesLength()));
    }
    unpackTo(_o) {
        _o.messages = this.bb.createObjList(this.messages.bind(this), this.messagesLength());
    }
}
export class MessagesResponseT {
    messages;
    constructor(messages = []) {
        this.messages = messages;
    }
    pack(builder) {
        const messages = MessagesResponse.createMessagesVector(builder, builder.createObjectOffsetList(this.messages));
        return MessagesResponse.createMessagesResponse(builder, messages);
    }
}
export class FidsResponse {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsFidsResponse(bb, obj) {
        return (obj || new FidsResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsFidsResponse(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new FidsResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fids(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new UserId()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    fidsLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startFidsResponse(builder) {
        builder.startObject(1);
    }
    static addFids(builder, fidsOffset) {
        builder.addFieldOffset(0, fidsOffset, 0);
    }
    static createFidsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startFidsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endFidsResponse(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createFidsResponse(builder, fidsOffset) {
        FidsResponse.startFidsResponse(builder);
        FidsResponse.addFids(builder, fidsOffset);
        return FidsResponse.endFidsResponse(builder);
    }
    unpack() {
        return new FidsResponseT(this.bb.createObjList(this.fids.bind(this), this.fidsLength()));
    }
    unpackTo(_o) {
        _o.fids = this.bb.createObjList(this.fids.bind(this), this.fidsLength());
    }
}
export class FidsResponseT {
    fids;
    constructor(fids = []) {
        this.fids = fids;
    }
    pack(builder) {
        const fids = FidsResponse.createFidsVector(builder, builder.createObjectOffsetList(this.fids));
        return FidsResponse.createFidsResponse(builder, fids);
    }
}
export class EventResponse {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsEventResponse(bb, obj) {
        return (obj || new EventResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsEventResponse(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new EventResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    type() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : EventType.MergeMessage;
    }
    bytes(index) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    bytesLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    bytesArray() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startEventResponse(builder) {
        builder.startObject(2);
    }
    static addType(builder, type) {
        builder.addFieldInt8(0, type, EventType.MergeMessage);
    }
    static addBytes(builder, bytesOffset) {
        builder.addFieldOffset(1, bytesOffset, 0);
    }
    static createBytesVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startBytesVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endEventResponse(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createEventResponse(builder, type, bytesOffset) {
        EventResponse.startEventResponse(builder);
        EventResponse.addType(builder, type);
        EventResponse.addBytes(builder, bytesOffset);
        return EventResponse.endEventResponse(builder);
    }
    unpack() {
        return new EventResponseT(this.type(), this.bb.createScalarList(this.bytes.bind(this), this.bytesLength()));
    }
    unpackTo(_o) {
        _o.type = this.type();
        _o.bytes = this.bb.createScalarList(this.bytes.bind(this), this.bytesLength());
    }
}
export class EventResponseT {
    type;
    bytes;
    constructor(type = EventType.MergeMessage, bytes = []) {
        this.type = type;
        this.bytes = bytes;
    }
    pack(builder) {
        const bytes = EventResponse.createBytesVector(builder, this.bytes);
        return EventResponse.createEventResponse(builder, this.type, bytes);
    }
}
export class TrieNodeMetadataResponse {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsTrieNodeMetadataResponse(bb, obj) {
        return (obj || new TrieNodeMetadataResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsTrieNodeMetadataResponse(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TrieNodeMetadataResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    prefix(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    prefixLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    prefixArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    numMessages() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : BigInt('0');
    }
    hash(index) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    hashLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    hashArray() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    children(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new TrieNodeMetadataResponse()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    childrenLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startTrieNodeMetadataResponse(builder) {
        builder.startObject(4);
    }
    static addPrefix(builder, prefixOffset) {
        builder.addFieldOffset(0, prefixOffset, 0);
    }
    static createPrefixVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startPrefixVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addNumMessages(builder, numMessages) {
        builder.addFieldInt64(1, numMessages, BigInt('0'));
    }
    static addHash(builder, hashOffset) {
        builder.addFieldOffset(2, hashOffset, 0);
    }
    static createHashVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startHashVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addChildren(builder, childrenOffset) {
        builder.addFieldOffset(3, childrenOffset, 0);
    }
    static createChildrenVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startChildrenVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endTrieNodeMetadataResponse(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createTrieNodeMetadataResponse(builder, prefixOffset, numMessages, hashOffset, childrenOffset) {
        TrieNodeMetadataResponse.startTrieNodeMetadataResponse(builder);
        TrieNodeMetadataResponse.addPrefix(builder, prefixOffset);
        TrieNodeMetadataResponse.addNumMessages(builder, numMessages);
        TrieNodeMetadataResponse.addHash(builder, hashOffset);
        TrieNodeMetadataResponse.addChildren(builder, childrenOffset);
        return TrieNodeMetadataResponse.endTrieNodeMetadataResponse(builder);
    }
    unpack() {
        return new TrieNodeMetadataResponseT(this.bb.createScalarList(this.prefix.bind(this), this.prefixLength()), this.numMessages(), this.bb.createScalarList(this.hash.bind(this), this.hashLength()), this.bb.createObjList(this.children.bind(this), this.childrenLength()));
    }
    unpackTo(_o) {
        _o.prefix = this.bb.createScalarList(this.prefix.bind(this), this.prefixLength());
        _o.numMessages = this.numMessages();
        _o.hash = this.bb.createScalarList(this.hash.bind(this), this.hashLength());
        _o.children = this.bb.createObjList(this.children.bind(this), this.childrenLength());
    }
}
export class TrieNodeMetadataResponseT {
    prefix;
    numMessages;
    hash;
    children;
    constructor(prefix = [], numMessages = BigInt('0'), hash = [], children = []) {
        this.prefix = prefix;
        this.numMessages = numMessages;
        this.hash = hash;
        this.children = children;
    }
    pack(builder) {
        const prefix = TrieNodeMetadataResponse.createPrefixVector(builder, this.prefix);
        const hash = TrieNodeMetadataResponse.createHashVector(builder, this.hash);
        const children = TrieNodeMetadataResponse.createChildrenVector(builder, builder.createObjectOffsetList(this.children));
        return TrieNodeMetadataResponse.createTrieNodeMetadataResponse(builder, prefix, this.numMessages, hash, children);
    }
}
export class TrieNodeSnapshotResponse {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsTrieNodeSnapshotResponse(bb, obj) {
        return (obj || new TrieNodeSnapshotResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsTrieNodeSnapshotResponse(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TrieNodeSnapshotResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    prefix(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    excludedHashes(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    excludedHashesLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    numMessages() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : BigInt('0');
    }
    rootHash(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startTrieNodeSnapshotResponse(builder) {
        builder.startObject(4);
    }
    static addPrefix(builder, prefixOffset) {
        builder.addFieldOffset(0, prefixOffset, 0);
    }
    static addExcludedHashes(builder, excludedHashesOffset) {
        builder.addFieldOffset(1, excludedHashesOffset, 0);
    }
    static createExcludedHashesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startExcludedHashesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addNumMessages(builder, numMessages) {
        builder.addFieldInt64(2, numMessages, BigInt('0'));
    }
    static addRootHash(builder, rootHashOffset) {
        builder.addFieldOffset(3, rootHashOffset, 0);
    }
    static endTrieNodeSnapshotResponse(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createTrieNodeSnapshotResponse(builder, prefixOffset, excludedHashesOffset, numMessages, rootHashOffset) {
        TrieNodeSnapshotResponse.startTrieNodeSnapshotResponse(builder);
        TrieNodeSnapshotResponse.addPrefix(builder, prefixOffset);
        TrieNodeSnapshotResponse.addExcludedHashes(builder, excludedHashesOffset);
        TrieNodeSnapshotResponse.addNumMessages(builder, numMessages);
        TrieNodeSnapshotResponse.addRootHash(builder, rootHashOffset);
        return TrieNodeSnapshotResponse.endTrieNodeSnapshotResponse(builder);
    }
    unpack() {
        return new TrieNodeSnapshotResponseT(this.prefix(), this.bb.createScalarList(this.excludedHashes.bind(this), this.excludedHashesLength()), this.numMessages(), this.rootHash());
    }
    unpackTo(_o) {
        _o.prefix = this.prefix();
        _o.excludedHashes = this.bb.createScalarList(this.excludedHashes.bind(this), this.excludedHashesLength());
        _o.numMessages = this.numMessages();
        _o.rootHash = this.rootHash();
    }
}
export class TrieNodeSnapshotResponseT {
    prefix;
    excludedHashes;
    numMessages;
    rootHash;
    constructor(prefix = null, excludedHashes = [], numMessages = BigInt('0'), rootHash = null) {
        this.prefix = prefix;
        this.excludedHashes = excludedHashes;
        this.numMessages = numMessages;
        this.rootHash = rootHash;
    }
    pack(builder) {
        const prefix = (this.prefix !== null ? builder.createString(this.prefix) : 0);
        const excludedHashes = TrieNodeSnapshotResponse.createExcludedHashesVector(builder, builder.createObjectOffsetList(this.excludedHashes));
        const rootHash = (this.rootHash !== null ? builder.createString(this.rootHash) : 0);
        return TrieNodeSnapshotResponse.createTrieNodeSnapshotResponse(builder, prefix, excludedHashes, this.numMessages, rootHash);
    }
}
export class GetCastRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetCastRequest(bb, obj) {
        return (obj || new GetCastRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetCastRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetCastRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    tsHash(index) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    tsHashLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    tsHashArray() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startGetCastRequest(builder) {
        builder.startObject(2);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addTsHash(builder, tsHashOffset) {
        builder.addFieldOffset(1, tsHashOffset, 0);
    }
    static createTsHashVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startTsHashVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endGetCastRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        builder.requiredField(offset, 6); // ts_hash
        return offset;
    }
    static createGetCastRequest(builder, fidOffset, tsHashOffset) {
        GetCastRequest.startGetCastRequest(builder);
        GetCastRequest.addFid(builder, fidOffset);
        GetCastRequest.addTsHash(builder, tsHashOffset);
        return GetCastRequest.endGetCastRequest(builder);
    }
    unpack() {
        return new GetCastRequestT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()), this.bb.createScalarList(this.tsHash.bind(this), this.tsHashLength()));
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
        _o.tsHash = this.bb.createScalarList(this.tsHash.bind(this), this.tsHashLength());
    }
}
export class GetCastRequestT {
    fid;
    tsHash;
    constructor(fid = [], tsHash = []) {
        this.fid = fid;
        this.tsHash = tsHash;
    }
    pack(builder) {
        const fid = GetCastRequest.createFidVector(builder, this.fid);
        const tsHash = GetCastRequest.createTsHashVector(builder, this.tsHash);
        return GetCastRequest.createGetCastRequest(builder, fid, tsHash);
    }
}
export class GetCastsByFidRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetCastsByFidRequest(bb, obj) {
        return (obj || new GetCastsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetCastsByFidRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetCastsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startGetCastsByFidRequest(builder) {
        builder.startObject(1);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endGetCastsByFidRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        return offset;
    }
    static createGetCastsByFidRequest(builder, fidOffset) {
        GetCastsByFidRequest.startGetCastsByFidRequest(builder);
        GetCastsByFidRequest.addFid(builder, fidOffset);
        return GetCastsByFidRequest.endGetCastsByFidRequest(builder);
    }
    unpack() {
        return new GetCastsByFidRequestT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()));
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
    }
}
export class GetCastsByFidRequestT {
    fid;
    constructor(fid = []) {
        this.fid = fid;
    }
    pack(builder) {
        const fid = GetCastsByFidRequest.createFidVector(builder, this.fid);
        return GetCastsByFidRequest.createGetCastsByFidRequest(builder, fid);
    }
}
export class GetCastsByParentRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetCastsByParentRequest(bb, obj) {
        return (obj || new GetCastsByParentRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetCastsByParentRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetCastsByParentRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    parent(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new CastId()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startGetCastsByParentRequest(builder) {
        builder.startObject(1);
    }
    static addParent(builder, parentOffset) {
        builder.addFieldOffset(0, parentOffset, 0);
    }
    static endGetCastsByParentRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // parent
        return offset;
    }
    static createGetCastsByParentRequest(builder, parentOffset) {
        GetCastsByParentRequest.startGetCastsByParentRequest(builder);
        GetCastsByParentRequest.addParent(builder, parentOffset);
        return GetCastsByParentRequest.endGetCastsByParentRequest(builder);
    }
    unpack() {
        return new GetCastsByParentRequestT((this.parent() !== null ? this.parent().unpack() : null));
    }
    unpackTo(_o) {
        _o.parent = (this.parent() !== null ? this.parent().unpack() : null);
    }
}
export class GetCastsByParentRequestT {
    parent;
    constructor(parent = null) {
        this.parent = parent;
    }
    pack(builder) {
        const parent = (this.parent !== null ? this.parent.pack(builder) : 0);
        return GetCastsByParentRequest.createGetCastsByParentRequest(builder, parent);
    }
}
export class GetCastsByMentionRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetCastsByMentionRequest(bb, obj) {
        return (obj || new GetCastsByMentionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetCastsByMentionRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetCastsByMentionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    mention(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new UserId()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startGetCastsByMentionRequest(builder) {
        builder.startObject(1);
    }
    static addMention(builder, mentionOffset) {
        builder.addFieldOffset(0, mentionOffset, 0);
    }
    static endGetCastsByMentionRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // mention
        return offset;
    }
    static createGetCastsByMentionRequest(builder, mentionOffset) {
        GetCastsByMentionRequest.startGetCastsByMentionRequest(builder);
        GetCastsByMentionRequest.addMention(builder, mentionOffset);
        return GetCastsByMentionRequest.endGetCastsByMentionRequest(builder);
    }
    unpack() {
        return new GetCastsByMentionRequestT((this.mention() !== null ? this.mention().unpack() : null));
    }
    unpackTo(_o) {
        _o.mention = (this.mention() !== null ? this.mention().unpack() : null);
    }
}
export class GetCastsByMentionRequestT {
    mention;
    constructor(mention = null) {
        this.mention = mention;
    }
    pack(builder) {
        const mention = (this.mention !== null ? this.mention.pack(builder) : 0);
        return GetCastsByMentionRequest.createGetCastsByMentionRequest(builder, mention);
    }
}
export class GetAmpRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetAmpRequest(bb, obj) {
        return (obj || new GetAmpRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetAmpRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetAmpRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    user(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new UserId()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startGetAmpRequest(builder) {
        builder.startObject(2);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addUser(builder, userOffset) {
        builder.addFieldOffset(1, userOffset, 0);
    }
    static endGetAmpRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        builder.requiredField(offset, 6); // user
        return offset;
    }
    unpack() {
        return new GetAmpRequestT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()), (this.user() !== null ? this.user().unpack() : null));
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
        _o.user = (this.user() !== null ? this.user().unpack() : null);
    }
}
export class GetAmpRequestT {
    fid;
    user;
    constructor(fid = [], user = null) {
        this.fid = fid;
        this.user = user;
    }
    pack(builder) {
        const fid = GetAmpRequest.createFidVector(builder, this.fid);
        const user = (this.user !== null ? this.user.pack(builder) : 0);
        GetAmpRequest.startGetAmpRequest(builder);
        GetAmpRequest.addFid(builder, fid);
        GetAmpRequest.addUser(builder, user);
        return GetAmpRequest.endGetAmpRequest(builder);
    }
}
export class GetAmpsByFidRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetAmpsByFidRequest(bb, obj) {
        return (obj || new GetAmpsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetAmpsByFidRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetAmpsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startGetAmpsByFidRequest(builder) {
        builder.startObject(1);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endGetAmpsByFidRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        return offset;
    }
    static createGetAmpsByFidRequest(builder, fidOffset) {
        GetAmpsByFidRequest.startGetAmpsByFidRequest(builder);
        GetAmpsByFidRequest.addFid(builder, fidOffset);
        return GetAmpsByFidRequest.endGetAmpsByFidRequest(builder);
    }
    unpack() {
        return new GetAmpsByFidRequestT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()));
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
    }
}
export class GetAmpsByFidRequestT {
    fid;
    constructor(fid = []) {
        this.fid = fid;
    }
    pack(builder) {
        const fid = GetAmpsByFidRequest.createFidVector(builder, this.fid);
        return GetAmpsByFidRequest.createGetAmpsByFidRequest(builder, fid);
    }
}
export class GetAmpsByUserRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetAmpsByUserRequest(bb, obj) {
        return (obj || new GetAmpsByUserRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetAmpsByUserRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetAmpsByUserRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    user(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new UserId()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startGetAmpsByUserRequest(builder) {
        builder.startObject(1);
    }
    static addUser(builder, userOffset) {
        builder.addFieldOffset(0, userOffset, 0);
    }
    static endGetAmpsByUserRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // user
        return offset;
    }
    static createGetAmpsByUserRequest(builder, userOffset) {
        GetAmpsByUserRequest.startGetAmpsByUserRequest(builder);
        GetAmpsByUserRequest.addUser(builder, userOffset);
        return GetAmpsByUserRequest.endGetAmpsByUserRequest(builder);
    }
    unpack() {
        return new GetAmpsByUserRequestT((this.user() !== null ? this.user().unpack() : null));
    }
    unpackTo(_o) {
        _o.user = (this.user() !== null ? this.user().unpack() : null);
    }
}
export class GetAmpsByUserRequestT {
    user;
    constructor(user = null) {
        this.user = user;
    }
    pack(builder) {
        const user = (this.user !== null ? this.user.pack(builder) : 0);
        return GetAmpsByUserRequest.createGetAmpsByUserRequest(builder, user);
    }
}
export class GetReactionRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetReactionRequest(bb, obj) {
        return (obj || new GetReactionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetReactionRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetReactionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    type() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : ReactionType.Like;
    }
    cast(obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new CastId()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startGetReactionRequest(builder) {
        builder.startObject(3);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addType(builder, type) {
        builder.addFieldInt16(1, type, ReactionType.Like);
    }
    static addCast(builder, castOffset) {
        builder.addFieldOffset(2, castOffset, 0);
    }
    static endGetReactionRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        builder.requiredField(offset, 8); // cast
        return offset;
    }
    unpack() {
        return new GetReactionRequestT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()), this.type(), (this.cast() !== null ? this.cast().unpack() : null));
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
        _o.type = this.type();
        _o.cast = (this.cast() !== null ? this.cast().unpack() : null);
    }
}
export class GetReactionRequestT {
    fid;
    type;
    cast;
    constructor(fid = [], type = ReactionType.Like, cast = null) {
        this.fid = fid;
        this.type = type;
        this.cast = cast;
    }
    pack(builder) {
        const fid = GetReactionRequest.createFidVector(builder, this.fid);
        const cast = (this.cast !== null ? this.cast.pack(builder) : 0);
        GetReactionRequest.startGetReactionRequest(builder);
        GetReactionRequest.addFid(builder, fid);
        GetReactionRequest.addType(builder, this.type);
        GetReactionRequest.addCast(builder, cast);
        return GetReactionRequest.endGetReactionRequest(builder);
    }
}
export class GetReactionsByFidRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetReactionsByFidRequest(bb, obj) {
        return (obj || new GetReactionsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetReactionsByFidRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetReactionsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    type() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : null;
    }
    static startGetReactionsByFidRequest(builder) {
        builder.startObject(2);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addType(builder, type) {
        builder.addFieldInt16(1, type, 0);
    }
    static endGetReactionsByFidRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        return offset;
    }
    static createGetReactionsByFidRequest(builder, fidOffset, type) {
        GetReactionsByFidRequest.startGetReactionsByFidRequest(builder);
        GetReactionsByFidRequest.addFid(builder, fidOffset);
        if (type !== null)
            GetReactionsByFidRequest.addType(builder, type);
        return GetReactionsByFidRequest.endGetReactionsByFidRequest(builder);
    }
    unpack() {
        return new GetReactionsByFidRequestT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()), this.type());
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
        _o.type = this.type();
    }
}
export class GetReactionsByFidRequestT {
    fid;
    type;
    constructor(fid = [], type = null) {
        this.fid = fid;
        this.type = type;
    }
    pack(builder) {
        const fid = GetReactionsByFidRequest.createFidVector(builder, this.fid);
        return GetReactionsByFidRequest.createGetReactionsByFidRequest(builder, fid, this.type);
    }
}
export class GetReactionsByCastRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetReactionsByCastRequest(bb, obj) {
        return (obj || new GetReactionsByCastRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetReactionsByCastRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetReactionsByCastRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    cast(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new CastId()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    type() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : null;
    }
    static startGetReactionsByCastRequest(builder) {
        builder.startObject(2);
    }
    static addCast(builder, castOffset) {
        builder.addFieldOffset(0, castOffset, 0);
    }
    static addType(builder, type) {
        builder.addFieldInt16(1, type, 0);
    }
    static endGetReactionsByCastRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // cast
        return offset;
    }
    static createGetReactionsByCastRequest(builder, castOffset, type) {
        GetReactionsByCastRequest.startGetReactionsByCastRequest(builder);
        GetReactionsByCastRequest.addCast(builder, castOffset);
        if (type !== null)
            GetReactionsByCastRequest.addType(builder, type);
        return GetReactionsByCastRequest.endGetReactionsByCastRequest(builder);
    }
    unpack() {
        return new GetReactionsByCastRequestT((this.cast() !== null ? this.cast().unpack() : null), this.type());
    }
    unpackTo(_o) {
        _o.cast = (this.cast() !== null ? this.cast().unpack() : null);
        _o.type = this.type();
    }
}
export class GetReactionsByCastRequestT {
    cast;
    type;
    constructor(cast = null, type = null) {
        this.cast = cast;
        this.type = type;
    }
    pack(builder) {
        const cast = (this.cast !== null ? this.cast.pack(builder) : 0);
        return GetReactionsByCastRequest.createGetReactionsByCastRequest(builder, cast, this.type);
    }
}
export class GetVerificationRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetVerificationRequest(bb, obj) {
        return (obj || new GetVerificationRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetVerificationRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetVerificationRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    address(index) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    addressLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    addressArray() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startGetVerificationRequest(builder) {
        builder.startObject(2);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addAddress(builder, addressOffset) {
        builder.addFieldOffset(1, addressOffset, 0);
    }
    static createAddressVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startAddressVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endGetVerificationRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        builder.requiredField(offset, 6); // address
        return offset;
    }
    static createGetVerificationRequest(builder, fidOffset, addressOffset) {
        GetVerificationRequest.startGetVerificationRequest(builder);
        GetVerificationRequest.addFid(builder, fidOffset);
        GetVerificationRequest.addAddress(builder, addressOffset);
        return GetVerificationRequest.endGetVerificationRequest(builder);
    }
    unpack() {
        return new GetVerificationRequestT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()), this.bb.createScalarList(this.address.bind(this), this.addressLength()));
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
        _o.address = this.bb.createScalarList(this.address.bind(this), this.addressLength());
    }
}
export class GetVerificationRequestT {
    fid;
    address;
    constructor(fid = [], address = []) {
        this.fid = fid;
        this.address = address;
    }
    pack(builder) {
        const fid = GetVerificationRequest.createFidVector(builder, this.fid);
        const address = GetVerificationRequest.createAddressVector(builder, this.address);
        return GetVerificationRequest.createGetVerificationRequest(builder, fid, address);
    }
}
export class GetVerificationsByFidRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetVerificationsByFidRequest(bb, obj) {
        return (obj || new GetVerificationsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetVerificationsByFidRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetVerificationsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startGetVerificationsByFidRequest(builder) {
        builder.startObject(1);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endGetVerificationsByFidRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        return offset;
    }
    static createGetVerificationsByFidRequest(builder, fidOffset) {
        GetVerificationsByFidRequest.startGetVerificationsByFidRequest(builder);
        GetVerificationsByFidRequest.addFid(builder, fidOffset);
        return GetVerificationsByFidRequest.endGetVerificationsByFidRequest(builder);
    }
    unpack() {
        return new GetVerificationsByFidRequestT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()));
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
    }
}
export class GetVerificationsByFidRequestT {
    fid;
    constructor(fid = []) {
        this.fid = fid;
    }
    pack(builder) {
        const fid = GetVerificationsByFidRequest.createFidVector(builder, this.fid);
        return GetVerificationsByFidRequest.createGetVerificationsByFidRequest(builder, fid);
    }
}
export class GetSignerRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetSignerRequest(bb, obj) {
        return (obj || new GetSignerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetSignerRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetSignerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    signer(index) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    signerLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    signerArray() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startGetSignerRequest(builder) {
        builder.startObject(2);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addSigner(builder, signerOffset) {
        builder.addFieldOffset(1, signerOffset, 0);
    }
    static createSignerVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startSignerVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endGetSignerRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        builder.requiredField(offset, 6); // signer
        return offset;
    }
    static createGetSignerRequest(builder, fidOffset, signerOffset) {
        GetSignerRequest.startGetSignerRequest(builder);
        GetSignerRequest.addFid(builder, fidOffset);
        GetSignerRequest.addSigner(builder, signerOffset);
        return GetSignerRequest.endGetSignerRequest(builder);
    }
    unpack() {
        return new GetSignerRequestT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()), this.bb.createScalarList(this.signer.bind(this), this.signerLength()));
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
        _o.signer = this.bb.createScalarList(this.signer.bind(this), this.signerLength());
    }
}
export class GetSignerRequestT {
    fid;
    signer;
    constructor(fid = [], signer = []) {
        this.fid = fid;
        this.signer = signer;
    }
    pack(builder) {
        const fid = GetSignerRequest.createFidVector(builder, this.fid);
        const signer = GetSignerRequest.createSignerVector(builder, this.signer);
        return GetSignerRequest.createGetSignerRequest(builder, fid, signer);
    }
}
export class GetSignersByFidRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetSignersByFidRequest(bb, obj) {
        return (obj || new GetSignersByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetSignersByFidRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetSignersByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startGetSignersByFidRequest(builder) {
        builder.startObject(1);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endGetSignersByFidRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        return offset;
    }
    static createGetSignersByFidRequest(builder, fidOffset) {
        GetSignersByFidRequest.startGetSignersByFidRequest(builder);
        GetSignersByFidRequest.addFid(builder, fidOffset);
        return GetSignersByFidRequest.endGetSignersByFidRequest(builder);
    }
    unpack() {
        return new GetSignersByFidRequestT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()));
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
    }
}
export class GetSignersByFidRequestT {
    fid;
    constructor(fid = []) {
        this.fid = fid;
    }
    pack(builder) {
        const fid = GetSignersByFidRequest.createFidVector(builder, this.fid);
        return GetSignersByFidRequest.createGetSignersByFidRequest(builder, fid);
    }
}
export class GetCustodyEventRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetCustodyEventRequest(bb, obj) {
        return (obj || new GetCustodyEventRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetCustodyEventRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetCustodyEventRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startGetCustodyEventRequest(builder) {
        builder.startObject(1);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endGetCustodyEventRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        return offset;
    }
    static createGetCustodyEventRequest(builder, fidOffset) {
        GetCustodyEventRequest.startGetCustodyEventRequest(builder);
        GetCustodyEventRequest.addFid(builder, fidOffset);
        return GetCustodyEventRequest.endGetCustodyEventRequest(builder);
    }
    unpack() {
        return new GetCustodyEventRequestT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()));
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
    }
}
export class GetCustodyEventRequestT {
    fid;
    constructor(fid = []) {
        this.fid = fid;
    }
    pack(builder) {
        const fid = GetCustodyEventRequest.createFidVector(builder, this.fid);
        return GetCustodyEventRequest.createGetCustodyEventRequest(builder, fid);
    }
}
export class GetFidsRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetFidsRequest(bb, obj) {
        return (obj || new GetFidsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetFidsRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetFidsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static startGetFidsRequest(builder) {
        builder.startObject(0);
    }
    static endGetFidsRequest(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createGetFidsRequest(builder) {
        GetFidsRequest.startGetFidsRequest(builder);
        return GetFidsRequest.endGetFidsRequest(builder);
    }
    unpack() {
        return new GetFidsRequestT();
    }
    unpackTo(_o) { }
}
export class GetFidsRequestT {
    constructor() { }
    pack(builder) {
        return GetFidsRequest.createGetFidsRequest(builder);
    }
}
export class GetUserDataRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetUserDataRequest(bb, obj) {
        return (obj || new GetUserDataRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetUserDataRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetUserDataRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    type() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : UserDataType.Pfp;
    }
    static startGetUserDataRequest(builder) {
        builder.startObject(2);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addType(builder, type) {
        builder.addFieldInt16(1, type, UserDataType.Pfp);
    }
    static endGetUserDataRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        return offset;
    }
    static createGetUserDataRequest(builder, fidOffset, type) {
        GetUserDataRequest.startGetUserDataRequest(builder);
        GetUserDataRequest.addFid(builder, fidOffset);
        GetUserDataRequest.addType(builder, type);
        return GetUserDataRequest.endGetUserDataRequest(builder);
    }
    unpack() {
        return new GetUserDataRequestT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()), this.type());
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
        _o.type = this.type();
    }
}
export class GetUserDataRequestT {
    fid;
    type;
    constructor(fid = [], type = UserDataType.Pfp) {
        this.fid = fid;
        this.type = type;
    }
    pack(builder) {
        const fid = GetUserDataRequest.createFidVector(builder, this.fid);
        return GetUserDataRequest.createGetUserDataRequest(builder, fid, this.type);
    }
}
export class GetUserDataByFidRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetUserDataByFidRequest(bb, obj) {
        return (obj || new GetUserDataByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetUserDataByFidRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetUserDataByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startGetUserDataByFidRequest(builder) {
        builder.startObject(1);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endGetUserDataByFidRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        return offset;
    }
    static createGetUserDataByFidRequest(builder, fidOffset) {
        GetUserDataByFidRequest.startGetUserDataByFidRequest(builder);
        GetUserDataByFidRequest.addFid(builder, fidOffset);
        return GetUserDataByFidRequest.endGetUserDataByFidRequest(builder);
    }
    unpack() {
        return new GetUserDataByFidRequestT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()));
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
    }
}
export class GetUserDataByFidRequestT {
    fid;
    constructor(fid = []) {
        this.fid = fid;
    }
    pack(builder) {
        const fid = GetUserDataByFidRequest.createFidVector(builder, this.fid);
        return GetUserDataByFidRequest.createGetUserDataByFidRequest(builder, fid);
    }
}
export class GetNameRegistryEventRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetNameRegistryEventRequest(bb, obj) {
        return (obj || new GetNameRegistryEventRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetNameRegistryEventRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetNameRegistryEventRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fname(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fnameLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fnameArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startGetNameRegistryEventRequest(builder) {
        builder.startObject(1);
    }
    static addFname(builder, fnameOffset) {
        builder.addFieldOffset(0, fnameOffset, 0);
    }
    static createFnameVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFnameVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endGetNameRegistryEventRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fname
        return offset;
    }
    static createGetNameRegistryEventRequest(builder, fnameOffset) {
        GetNameRegistryEventRequest.startGetNameRegistryEventRequest(builder);
        GetNameRegistryEventRequest.addFname(builder, fnameOffset);
        return GetNameRegistryEventRequest.endGetNameRegistryEventRequest(builder);
    }
    unpack() {
        return new GetNameRegistryEventRequestT(this.bb.createScalarList(this.fname.bind(this), this.fnameLength()));
    }
    unpackTo(_o) {
        _o.fname = this.bb.createScalarList(this.fname.bind(this), this.fnameLength());
    }
}
export class GetNameRegistryEventRequestT {
    fname;
    constructor(fname = []) {
        this.fname = fname;
    }
    pack(builder) {
        const fname = GetNameRegistryEventRequest.createFnameVector(builder, this.fname);
        return GetNameRegistryEventRequest.createGetNameRegistryEventRequest(builder, fname);
    }
}
export class SyncIdHash {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSyncIdHash(bb, obj) {
        return (obj || new SyncIdHash()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSyncIdHash(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SyncIdHash()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    syncIdHash(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    syncIdHashLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    syncIdHashArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startSyncIdHash(builder) {
        builder.startObject(1);
    }
    static addSyncIdHash(builder, syncIdHashOffset) {
        builder.addFieldOffset(0, syncIdHashOffset, 0);
    }
    static createSyncIdHashVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startSyncIdHashVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endSyncIdHash(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // sync_id_hash
        return offset;
    }
    static createSyncIdHash(builder, syncIdHashOffset) {
        SyncIdHash.startSyncIdHash(builder);
        SyncIdHash.addSyncIdHash(builder, syncIdHashOffset);
        return SyncIdHash.endSyncIdHash(builder);
    }
    unpack() {
        return new SyncIdHashT(this.bb.createScalarList(this.syncIdHash.bind(this), this.syncIdHashLength()));
    }
    unpackTo(_o) {
        _o.syncIdHash = this.bb.createScalarList(this.syncIdHash.bind(this), this.syncIdHashLength());
    }
}
export class SyncIdHashT {
    syncIdHash;
    constructor(syncIdHash = []) {
        this.syncIdHash = syncIdHash;
    }
    pack(builder) {
        const syncIdHash = SyncIdHash.createSyncIdHashVector(builder, this.syncIdHash);
        return SyncIdHash.createSyncIdHash(builder, syncIdHash);
    }
}
export class GetAllMessagesBySyncIdsRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetAllMessagesBySyncIdsRequest(bb, obj) {
        return (obj || new GetAllMessagesBySyncIdsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetAllMessagesBySyncIdsRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetAllMessagesBySyncIdsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    syncIds(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new SyncIdHash()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    syncIdsLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startGetAllMessagesBySyncIdsRequest(builder) {
        builder.startObject(1);
    }
    static addSyncIds(builder, syncIdsOffset) {
        builder.addFieldOffset(0, syncIdsOffset, 0);
    }
    static createSyncIdsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startSyncIdsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endGetAllMessagesBySyncIdsRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // sync_ids
        return offset;
    }
    static createGetAllMessagesBySyncIdsRequest(builder, syncIdsOffset) {
        GetAllMessagesBySyncIdsRequest.startGetAllMessagesBySyncIdsRequest(builder);
        GetAllMessagesBySyncIdsRequest.addSyncIds(builder, syncIdsOffset);
        return GetAllMessagesBySyncIdsRequest.endGetAllMessagesBySyncIdsRequest(builder);
    }
    unpack() {
        return new GetAllMessagesBySyncIdsRequestT(this.bb.createObjList(this.syncIds.bind(this), this.syncIdsLength()));
    }
    unpackTo(_o) {
        _o.syncIds = this.bb.createObjList(this.syncIds.bind(this), this.syncIdsLength());
    }
}
export class GetAllMessagesBySyncIdsRequestT {
    syncIds;
    constructor(syncIds = []) {
        this.syncIds = syncIds;
    }
    pack(builder) {
        const syncIds = GetAllMessagesBySyncIdsRequest.createSyncIdsVector(builder, builder.createObjectOffsetList(this.syncIds));
        return GetAllMessagesBySyncIdsRequest.createGetAllMessagesBySyncIdsRequest(builder, syncIds);
    }
}
export class GetAllSyncIdsByPrefixResponse {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetAllSyncIdsByPrefixResponse(bb, obj) {
        return (obj || new GetAllSyncIdsByPrefixResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetAllSyncIdsByPrefixResponse(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetAllSyncIdsByPrefixResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    ids(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    idsLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startGetAllSyncIdsByPrefixResponse(builder) {
        builder.startObject(1);
    }
    static addIds(builder, idsOffset) {
        builder.addFieldOffset(0, idsOffset, 0);
    }
    static createIdsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startIdsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endGetAllSyncIdsByPrefixResponse(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // ids
        return offset;
    }
    static createGetAllSyncIdsByPrefixResponse(builder, idsOffset) {
        GetAllSyncIdsByPrefixResponse.startGetAllSyncIdsByPrefixResponse(builder);
        GetAllSyncIdsByPrefixResponse.addIds(builder, idsOffset);
        return GetAllSyncIdsByPrefixResponse.endGetAllSyncIdsByPrefixResponse(builder);
    }
    unpack() {
        return new GetAllSyncIdsByPrefixResponseT(this.bb.createScalarList(this.ids.bind(this), this.idsLength()));
    }
    unpackTo(_o) {
        _o.ids = this.bb.createScalarList(this.ids.bind(this), this.idsLength());
    }
}
export class GetAllSyncIdsByPrefixResponseT {
    ids;
    constructor(ids = []) {
        this.ids = ids;
    }
    pack(builder) {
        const ids = GetAllSyncIdsByPrefixResponse.createIdsVector(builder, builder.createObjectOffsetList(this.ids));
        return GetAllSyncIdsByPrefixResponse.createGetAllSyncIdsByPrefixResponse(builder, ids);
    }
}
export class GetAllMessagesByFidRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetAllMessagesByFidRequest(bb, obj) {
        return (obj || new GetAllMessagesByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetAllMessagesByFidRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetAllMessagesByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startGetAllMessagesByFidRequest(builder) {
        builder.startObject(1);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endGetAllMessagesByFidRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        return offset;
    }
    static createGetAllMessagesByFidRequest(builder, fidOffset) {
        GetAllMessagesByFidRequest.startGetAllMessagesByFidRequest(builder);
        GetAllMessagesByFidRequest.addFid(builder, fidOffset);
        return GetAllMessagesByFidRequest.endGetAllMessagesByFidRequest(builder);
    }
    unpack() {
        return new GetAllMessagesByFidRequestT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()));
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
    }
}
export class GetAllMessagesByFidRequestT {
    fid;
    constructor(fid = []) {
        this.fid = fid;
    }
    pack(builder) {
        const fid = GetAllMessagesByFidRequest.createFidVector(builder, this.fid);
        return GetAllMessagesByFidRequest.createGetAllMessagesByFidRequest(builder, fid);
    }
}
export class GetTrieNodesByPrefixRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGetTrieNodesByPrefixRequest(bb, obj) {
        return (obj || new GetTrieNodesByPrefixRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGetTrieNodesByPrefixRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GetTrieNodesByPrefixRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    prefix(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    prefixLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    prefixArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startGetTrieNodesByPrefixRequest(builder) {
        builder.startObject(1);
    }
    static addPrefix(builder, prefixOffset) {
        builder.addFieldOffset(0, prefixOffset, 0);
    }
    static createPrefixVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startPrefixVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endGetTrieNodesByPrefixRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // prefix
        return offset;
    }
    static createGetTrieNodesByPrefixRequest(builder, prefixOffset) {
        GetTrieNodesByPrefixRequest.startGetTrieNodesByPrefixRequest(builder);
        GetTrieNodesByPrefixRequest.addPrefix(builder, prefixOffset);
        return GetTrieNodesByPrefixRequest.endGetTrieNodesByPrefixRequest(builder);
    }
    unpack() {
        return new GetTrieNodesByPrefixRequestT(this.bb.createScalarList(this.prefix.bind(this), this.prefixLength()));
    }
    unpackTo(_o) {
        _o.prefix = this.bb.createScalarList(this.prefix.bind(this), this.prefixLength());
    }
}
export class GetTrieNodesByPrefixRequestT {
    prefix;
    constructor(prefix = []) {
        this.prefix = prefix;
    }
    pack(builder) {
        const prefix = GetTrieNodesByPrefixRequest.createPrefixVector(builder, this.prefix);
        return GetTrieNodesByPrefixRequest.createGetTrieNodesByPrefixRequest(builder, prefix);
    }
}
export class SubscribeRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSubscribeRequest(bb, obj) {
        return (obj || new SubscribeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSubscribeRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SubscribeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static startSubscribeRequest(builder) {
        builder.startObject(0);
    }
    static endSubscribeRequest(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createSubscribeRequest(builder) {
        SubscribeRequest.startSubscribeRequest(builder);
        return SubscribeRequest.endSubscribeRequest(builder);
    }
    unpack() {
        return new SubscribeRequestT();
    }
    unpackTo(_o) { }
}
export class SubscribeRequestT {
    constructor() { }
    pack(builder) {
        return SubscribeRequest.createSubscribeRequest(builder);
    }
}
//# sourceMappingURL=rpc_generated.js.map