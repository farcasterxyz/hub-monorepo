// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';


export enum MessageType {
  CastAdd = 1,
  CastRemove = 2,
  ReactionAdd = 3,
  ReactionRemove = 4,
  AmpAdd = 5,
  AmpRemove = 6,
  VerificationAddEthAddress = 7,
  VerificationRemove = 8,
  SignerAdd = 9,
  SignerRemove = 10,
  UserDataAdd = 11
}

export enum SignatureScheme {
  Ed25519 = 1,
  Eip712 = 2
}

export enum HashScheme {
  Blake3 = 1
}

export enum FarcasterNetwork {
  Mainnet = 1,
  Testnet = 2,
  Devnet = 3
}

export enum ReactionType {
  Like = 1,
  Recast = 2
}

export enum UserDataType {
  Pfp = 1,
  Display = 2,
  Bio = 3,
  Location = 4,
  Url = 5,
  Fname = 6
}

export enum TargetId {
  NONE = 0,
  CastId = 1
}

export function unionToTargetId(
  type: TargetId,
  accessor: (obj:CastId) => CastId|null
): CastId|null {
  switch(TargetId[type]) {
    case 'NONE': return null; 
    case 'CastId': return accessor(new CastId())! as CastId;
    default: return null;
  }
}

export function unionListToTargetId(
  type: TargetId, 
  accessor: (index: number, obj:CastId) => CastId|null, 
  index: number
): CastId|null {
  switch(TargetId[type]) {
    case 'NONE': return null; 
    case 'CastId': return accessor(index, new CastId())! as CastId;
    default: return null;
  }
}

export enum MessageBody {
  NONE = 0,
  CastAddBody = 1,
  CastRemoveBody = 2,
  ReactionBody = 3,
  AmpBody = 4,
  VerificationAddEthAddressBody = 5,
  VerificationRemoveBody = 6,
  SignerBody = 7,
  UserDataBody = 8
}

export function unionToMessageBody(
  type: MessageBody,
  accessor: (obj:AmpBody|CastAddBody|CastRemoveBody|ReactionBody|SignerBody|UserDataBody|VerificationAddEthAddressBody|VerificationRemoveBody) => AmpBody|CastAddBody|CastRemoveBody|ReactionBody|SignerBody|UserDataBody|VerificationAddEthAddressBody|VerificationRemoveBody|null
): AmpBody|CastAddBody|CastRemoveBody|ReactionBody|SignerBody|UserDataBody|VerificationAddEthAddressBody|VerificationRemoveBody|null {
  switch(MessageBody[type]) {
    case 'NONE': return null; 
    case 'CastAddBody': return accessor(new CastAddBody())! as CastAddBody;
    case 'CastRemoveBody': return accessor(new CastRemoveBody())! as CastRemoveBody;
    case 'ReactionBody': return accessor(new ReactionBody())! as ReactionBody;
    case 'AmpBody': return accessor(new AmpBody())! as AmpBody;
    case 'VerificationAddEthAddressBody': return accessor(new VerificationAddEthAddressBody())! as VerificationAddEthAddressBody;
    case 'VerificationRemoveBody': return accessor(new VerificationRemoveBody())! as VerificationRemoveBody;
    case 'SignerBody': return accessor(new SignerBody())! as SignerBody;
    case 'UserDataBody': return accessor(new UserDataBody())! as UserDataBody;
    default: return null;
  }
}

export function unionListToMessageBody(
  type: MessageBody, 
  accessor: (index: number, obj:AmpBody|CastAddBody|CastRemoveBody|ReactionBody|SignerBody|UserDataBody|VerificationAddEthAddressBody|VerificationRemoveBody) => AmpBody|CastAddBody|CastRemoveBody|ReactionBody|SignerBody|UserDataBody|VerificationAddEthAddressBody|VerificationRemoveBody|null, 
  index: number
): AmpBody|CastAddBody|CastRemoveBody|ReactionBody|SignerBody|UserDataBody|VerificationAddEthAddressBody|VerificationRemoveBody|null {
  switch(MessageBody[type]) {
    case 'NONE': return null; 
    case 'CastAddBody': return accessor(index, new CastAddBody())! as CastAddBody;
    case 'CastRemoveBody': return accessor(index, new CastRemoveBody())! as CastRemoveBody;
    case 'ReactionBody': return accessor(index, new ReactionBody())! as ReactionBody;
    case 'AmpBody': return accessor(index, new AmpBody())! as AmpBody;
    case 'VerificationAddEthAddressBody': return accessor(index, new VerificationAddEthAddressBody())! as VerificationAddEthAddressBody;
    case 'VerificationRemoveBody': return accessor(index, new VerificationRemoveBody())! as VerificationRemoveBody;
    case 'SignerBody': return accessor(index, new SignerBody())! as SignerBody;
    case 'UserDataBody': return accessor(index, new UserDataBody())! as UserDataBody;
    default: return null;
  }
}

export class CastId implements flatbuffers.IUnpackableObject<CastIdT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CastId {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCastId(bb:flatbuffers.ByteBuffer, obj?:CastId):CastId {
  return (obj || new CastId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCastId(bb:flatbuffers.ByteBuffer, obj?:CastId):CastId {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CastId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

tsHash(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

tsHashLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tsHashArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startCastId(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addTsHash(builder:flatbuffers.Builder, tsHashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, tsHashOffset, 0);
}

static createTsHashVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startTsHashVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endCastId(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  builder.requiredField(offset, 6) // ts_hash
  return offset;
}

static createCastId(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset, tsHashOffset:flatbuffers.Offset):flatbuffers.Offset {
  CastId.startCastId(builder);
  CastId.addFid(builder, fidOffset);
  CastId.addTsHash(builder, tsHashOffset);
  return CastId.endCastId(builder);
}

unpack(): CastIdT {
  return new CastIdT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength()),
    this.bb!.createScalarList<number>(this.tsHash.bind(this), this.tsHashLength())
  );
}


unpackTo(_o: CastIdT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
  _o.tsHash = this.bb!.createScalarList<number>(this.tsHash.bind(this), this.tsHashLength());
}
}

export class CastIdT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = [],
  public tsHash: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = CastId.createFidVector(builder, this.fid);
  const tsHash = CastId.createTsHashVector(builder, this.tsHash);

  return CastId.createCastId(builder,
    fid,
    tsHash
  );
}
}

export class UserId implements flatbuffers.IUnpackableObject<UserIdT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UserId {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUserId(bb:flatbuffers.ByteBuffer, obj?:UserId):UserId {
  return (obj || new UserId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUserId(bb:flatbuffers.ByteBuffer, obj?:UserId):UserId {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UserId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startUserId(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endUserId(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createUserId(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset):flatbuffers.Offset {
  UserId.startUserId(builder);
  UserId.addFid(builder, fidOffset);
  return UserId.endUserId(builder);
}

unpack(): UserIdT {
  return new UserIdT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength())
  );
}


unpackTo(_o: UserIdT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
}
}

export class UserIdT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = UserId.createFidVector(builder, this.fid);

  return UserId.createUserId(builder,
    fid
  );
}
}

export class CastAddBody implements flatbuffers.IUnpackableObject<CastAddBodyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CastAddBody {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCastAddBody(bb:flatbuffers.ByteBuffer, obj?:CastAddBody):CastAddBody {
  return (obj || new CastAddBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCastAddBody(bb:flatbuffers.ByteBuffer, obj?:CastAddBody):CastAddBody {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CastAddBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

embeds(index: number):string
embeds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
embeds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

embedsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mentions(index: number, obj?:UserId):UserId|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new UserId()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mentionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

parentType():TargetId {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : TargetId.NONE;
}

parent<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startCastAddBody(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addEmbeds(builder:flatbuffers.Builder, embedsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, embedsOffset, 0);
}

static createEmbedsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEmbedsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMentions(builder:flatbuffers.Builder, mentionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, mentionsOffset, 0);
}

static createMentionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMentionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addParentType(builder:flatbuffers.Builder, parentType:TargetId) {
  builder.addFieldInt8(2, parentType, TargetId.NONE);
}

static addParent(builder:flatbuffers.Builder, parentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, parentOffset, 0);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, textOffset, 0);
}

static endCastAddBody(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 12) // text
  return offset;
}

static createCastAddBody(builder:flatbuffers.Builder, embedsOffset:flatbuffers.Offset, mentionsOffset:flatbuffers.Offset, parentType:TargetId, parentOffset:flatbuffers.Offset, textOffset:flatbuffers.Offset):flatbuffers.Offset {
  CastAddBody.startCastAddBody(builder);
  CastAddBody.addEmbeds(builder, embedsOffset);
  CastAddBody.addMentions(builder, mentionsOffset);
  CastAddBody.addParentType(builder, parentType);
  CastAddBody.addParent(builder, parentOffset);
  CastAddBody.addText(builder, textOffset);
  return CastAddBody.endCastAddBody(builder);
}

unpack(): CastAddBodyT {
  return new CastAddBodyT(
    this.bb!.createScalarList<string>(this.embeds.bind(this), this.embedsLength()),
    this.bb!.createObjList<UserId, UserIdT>(this.mentions.bind(this), this.mentionsLength()),
    this.parentType(),
    (() => {
      const temp = unionToTargetId(this.parentType(), this.parent.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })(),
    this.text()
  );
}


unpackTo(_o: CastAddBodyT): void {
  _o.embeds = this.bb!.createScalarList<string>(this.embeds.bind(this), this.embedsLength());
  _o.mentions = this.bb!.createObjList<UserId, UserIdT>(this.mentions.bind(this), this.mentionsLength());
  _o.parentType = this.parentType();
  _o.parent = (() => {
      const temp = unionToTargetId(this.parentType(), this.parent.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
  _o.text = this.text();
}
}

export class CastAddBodyT implements flatbuffers.IGeneratedObject {
constructor(
  public embeds: (string)[] = [],
  public mentions: (UserIdT)[] = [],
  public parentType: TargetId = TargetId.NONE,
  public parent: CastIdT|null = null,
  public text: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const embeds = CastAddBody.createEmbedsVector(builder, builder.createObjectOffsetList(this.embeds));
  const mentions = CastAddBody.createMentionsVector(builder, builder.createObjectOffsetList(this.mentions));
  const parent = builder.createObjectOffset(this.parent);
  const text = (this.text !== null ? builder.createString(this.text!) : 0);

  return CastAddBody.createCastAddBody(builder,
    embeds,
    mentions,
    this.parentType,
    parent,
    text
  );
}
}

export class CastRemoveBody implements flatbuffers.IUnpackableObject<CastRemoveBodyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CastRemoveBody {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCastRemoveBody(bb:flatbuffers.ByteBuffer, obj?:CastRemoveBody):CastRemoveBody {
  return (obj || new CastRemoveBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCastRemoveBody(bb:flatbuffers.ByteBuffer, obj?:CastRemoveBody):CastRemoveBody {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CastRemoveBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

targetTsHash(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

targetTsHashLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

targetTsHashArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startCastRemoveBody(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addTargetTsHash(builder:flatbuffers.Builder, targetTsHashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, targetTsHashOffset, 0);
}

static createTargetTsHashVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startTargetTsHashVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endCastRemoveBody(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // target_ts_hash
  return offset;
}

static createCastRemoveBody(builder:flatbuffers.Builder, targetTsHashOffset:flatbuffers.Offset):flatbuffers.Offset {
  CastRemoveBody.startCastRemoveBody(builder);
  CastRemoveBody.addTargetTsHash(builder, targetTsHashOffset);
  return CastRemoveBody.endCastRemoveBody(builder);
}

unpack(): CastRemoveBodyT {
  return new CastRemoveBodyT(
    this.bb!.createScalarList<number>(this.targetTsHash.bind(this), this.targetTsHashLength())
  );
}


unpackTo(_o: CastRemoveBodyT): void {
  _o.targetTsHash = this.bb!.createScalarList<number>(this.targetTsHash.bind(this), this.targetTsHashLength());
}
}

export class CastRemoveBodyT implements flatbuffers.IGeneratedObject {
constructor(
  public targetTsHash: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const targetTsHash = CastRemoveBody.createTargetTsHashVector(builder, this.targetTsHash);

  return CastRemoveBody.createCastRemoveBody(builder,
    targetTsHash
  );
}
}

export class ReactionBody implements flatbuffers.IUnpackableObject<ReactionBodyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ReactionBody {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsReactionBody(bb:flatbuffers.ByteBuffer, obj?:ReactionBody):ReactionBody {
  return (obj || new ReactionBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsReactionBody(bb:flatbuffers.ByteBuffer, obj?:ReactionBody):ReactionBody {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ReactionBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

targetType():TargetId {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : TargetId.NONE;
}

target<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

type():ReactionType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : ReactionType.Like;
}

static startReactionBody(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTargetType(builder:flatbuffers.Builder, targetType:TargetId) {
  builder.addFieldInt8(0, targetType, TargetId.NONE);
}

static addTarget(builder:flatbuffers.Builder, targetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, targetOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:ReactionType) {
  builder.addFieldInt16(2, type, ReactionType.Like);
}

static endReactionBody(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // target
  return offset;
}

static createReactionBody(builder:flatbuffers.Builder, targetType:TargetId, targetOffset:flatbuffers.Offset, type:ReactionType):flatbuffers.Offset {
  ReactionBody.startReactionBody(builder);
  ReactionBody.addTargetType(builder, targetType);
  ReactionBody.addTarget(builder, targetOffset);
  ReactionBody.addType(builder, type);
  return ReactionBody.endReactionBody(builder);
}

unpack(): ReactionBodyT {
  return new ReactionBodyT(
    this.targetType(),
    (() => {
      const temp = unionToTargetId(this.targetType(), this.target.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })(),
    this.type()
  );
}


unpackTo(_o: ReactionBodyT): void {
  _o.targetType = this.targetType();
  _o.target = (() => {
      const temp = unionToTargetId(this.targetType(), this.target.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
  _o.type = this.type();
}
}

export class ReactionBodyT implements flatbuffers.IGeneratedObject {
constructor(
  public targetType: TargetId = TargetId.NONE,
  public target: CastIdT|null = null,
  public type: ReactionType = ReactionType.Like
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const target = builder.createObjectOffset(this.target);

  return ReactionBody.createReactionBody(builder,
    this.targetType,
    target,
    this.type
  );
}
}

export class AmpBody implements flatbuffers.IUnpackableObject<AmpBodyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AmpBody {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAmpBody(bb:flatbuffers.ByteBuffer, obj?:AmpBody):AmpBody {
  return (obj || new AmpBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAmpBody(bb:flatbuffers.ByteBuffer, obj?:AmpBody):AmpBody {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AmpBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

user(obj?:UserId):UserId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new UserId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startAmpBody(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addUser(builder:flatbuffers.Builder, userOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, userOffset, 0);
}

static endAmpBody(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // user
  return offset;
}

static createAmpBody(builder:flatbuffers.Builder, userOffset:flatbuffers.Offset):flatbuffers.Offset {
  AmpBody.startAmpBody(builder);
  AmpBody.addUser(builder, userOffset);
  return AmpBody.endAmpBody(builder);
}

unpack(): AmpBodyT {
  return new AmpBodyT(
    (this.user() !== null ? this.user()!.unpack() : null)
  );
}


unpackTo(_o: AmpBodyT): void {
  _o.user = (this.user() !== null ? this.user()!.unpack() : null);
}
}

export class AmpBodyT implements flatbuffers.IGeneratedObject {
constructor(
  public user: UserIdT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const user = (this.user !== null ? this.user!.pack(builder) : 0);

  return AmpBody.createAmpBody(builder,
    user
  );
}
}

export class VerificationAddEthAddressBody implements flatbuffers.IUnpackableObject<VerificationAddEthAddressBodyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VerificationAddEthAddressBody {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVerificationAddEthAddressBody(bb:flatbuffers.ByteBuffer, obj?:VerificationAddEthAddressBody):VerificationAddEthAddressBody {
  return (obj || new VerificationAddEthAddressBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVerificationAddEthAddressBody(bb:flatbuffers.ByteBuffer, obj?:VerificationAddEthAddressBody):VerificationAddEthAddressBody {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VerificationAddEthAddressBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

address(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

addressLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

addressArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

ethSignature(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

ethSignatureLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ethSignatureArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

blockHash(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

blockHashLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

blockHashArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startVerificationAddEthAddressBody(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addAddress(builder:flatbuffers.Builder, addressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, addressOffset, 0);
}

static createAddressVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startAddressVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addEthSignature(builder:flatbuffers.Builder, ethSignatureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ethSignatureOffset, 0);
}

static createEthSignatureVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startEthSignatureVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addBlockHash(builder:flatbuffers.Builder, blockHashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, blockHashOffset, 0);
}

static createBlockHashVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startBlockHashVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endVerificationAddEthAddressBody(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // address
  builder.requiredField(offset, 6) // eth_signature
  builder.requiredField(offset, 8) // block_hash
  return offset;
}

static createVerificationAddEthAddressBody(builder:flatbuffers.Builder, addressOffset:flatbuffers.Offset, ethSignatureOffset:flatbuffers.Offset, blockHashOffset:flatbuffers.Offset):flatbuffers.Offset {
  VerificationAddEthAddressBody.startVerificationAddEthAddressBody(builder);
  VerificationAddEthAddressBody.addAddress(builder, addressOffset);
  VerificationAddEthAddressBody.addEthSignature(builder, ethSignatureOffset);
  VerificationAddEthAddressBody.addBlockHash(builder, blockHashOffset);
  return VerificationAddEthAddressBody.endVerificationAddEthAddressBody(builder);
}

unpack(): VerificationAddEthAddressBodyT {
  return new VerificationAddEthAddressBodyT(
    this.bb!.createScalarList<number>(this.address.bind(this), this.addressLength()),
    this.bb!.createScalarList<number>(this.ethSignature.bind(this), this.ethSignatureLength()),
    this.bb!.createScalarList<number>(this.blockHash.bind(this), this.blockHashLength())
  );
}


unpackTo(_o: VerificationAddEthAddressBodyT): void {
  _o.address = this.bb!.createScalarList<number>(this.address.bind(this), this.addressLength());
  _o.ethSignature = this.bb!.createScalarList<number>(this.ethSignature.bind(this), this.ethSignatureLength());
  _o.blockHash = this.bb!.createScalarList<number>(this.blockHash.bind(this), this.blockHashLength());
}
}

export class VerificationAddEthAddressBodyT implements flatbuffers.IGeneratedObject {
constructor(
  public address: (number)[] = [],
  public ethSignature: (number)[] = [],
  public blockHash: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const address = VerificationAddEthAddressBody.createAddressVector(builder, this.address);
  const ethSignature = VerificationAddEthAddressBody.createEthSignatureVector(builder, this.ethSignature);
  const blockHash = VerificationAddEthAddressBody.createBlockHashVector(builder, this.blockHash);

  return VerificationAddEthAddressBody.createVerificationAddEthAddressBody(builder,
    address,
    ethSignature,
    blockHash
  );
}
}

export class VerificationRemoveBody implements flatbuffers.IUnpackableObject<VerificationRemoveBodyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VerificationRemoveBody {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVerificationRemoveBody(bb:flatbuffers.ByteBuffer, obj?:VerificationRemoveBody):VerificationRemoveBody {
  return (obj || new VerificationRemoveBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVerificationRemoveBody(bb:flatbuffers.ByteBuffer, obj?:VerificationRemoveBody):VerificationRemoveBody {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VerificationRemoveBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

address(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

addressLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

addressArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startVerificationRemoveBody(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addAddress(builder:flatbuffers.Builder, addressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, addressOffset, 0);
}

static createAddressVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startAddressVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endVerificationRemoveBody(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // address
  return offset;
}

static createVerificationRemoveBody(builder:flatbuffers.Builder, addressOffset:flatbuffers.Offset):flatbuffers.Offset {
  VerificationRemoveBody.startVerificationRemoveBody(builder);
  VerificationRemoveBody.addAddress(builder, addressOffset);
  return VerificationRemoveBody.endVerificationRemoveBody(builder);
}

unpack(): VerificationRemoveBodyT {
  return new VerificationRemoveBodyT(
    this.bb!.createScalarList<number>(this.address.bind(this), this.addressLength())
  );
}


unpackTo(_o: VerificationRemoveBodyT): void {
  _o.address = this.bb!.createScalarList<number>(this.address.bind(this), this.addressLength());
}
}

export class VerificationRemoveBodyT implements flatbuffers.IGeneratedObject {
constructor(
  public address: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const address = VerificationRemoveBody.createAddressVector(builder, this.address);

  return VerificationRemoveBody.createVerificationRemoveBody(builder,
    address
  );
}
}

export class SignerBody implements flatbuffers.IUnpackableObject<SignerBodyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SignerBody {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSignerBody(bb:flatbuffers.ByteBuffer, obj?:SignerBody):SignerBody {
  return (obj || new SignerBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSignerBody(bb:flatbuffers.ByteBuffer, obj?:SignerBody):SignerBody {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SignerBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

signer(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

signerLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

signerArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startSignerBody(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addSigner(builder:flatbuffers.Builder, signerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, signerOffset, 0);
}

static createSignerVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startSignerVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endSignerBody(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // signer
  return offset;
}

static createSignerBody(builder:flatbuffers.Builder, signerOffset:flatbuffers.Offset):flatbuffers.Offset {
  SignerBody.startSignerBody(builder);
  SignerBody.addSigner(builder, signerOffset);
  return SignerBody.endSignerBody(builder);
}

unpack(): SignerBodyT {
  return new SignerBodyT(
    this.bb!.createScalarList<number>(this.signer.bind(this), this.signerLength())
  );
}


unpackTo(_o: SignerBodyT): void {
  _o.signer = this.bb!.createScalarList<number>(this.signer.bind(this), this.signerLength());
}
}

export class SignerBodyT implements flatbuffers.IGeneratedObject {
constructor(
  public signer: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const signer = SignerBody.createSignerVector(builder, this.signer);

  return SignerBody.createSignerBody(builder,
    signer
  );
}
}

export class UserDataBody implements flatbuffers.IUnpackableObject<UserDataBodyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UserDataBody {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUserDataBody(bb:flatbuffers.ByteBuffer, obj?:UserDataBody):UserDataBody {
  return (obj || new UserDataBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUserDataBody(bb:flatbuffers.ByteBuffer, obj?:UserDataBody):UserDataBody {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UserDataBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():UserDataType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : UserDataType.Pfp;
}

value():string|null
value(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
value(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startUserDataBody(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addType(builder:flatbuffers.Builder, type:UserDataType) {
  builder.addFieldInt16(0, type, UserDataType.Pfp);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valueOffset, 0);
}

static endUserDataBody(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUserDataBody(builder:flatbuffers.Builder, type:UserDataType, valueOffset:flatbuffers.Offset):flatbuffers.Offset {
  UserDataBody.startUserDataBody(builder);
  UserDataBody.addType(builder, type);
  UserDataBody.addValue(builder, valueOffset);
  return UserDataBody.endUserDataBody(builder);
}

unpack(): UserDataBodyT {
  return new UserDataBodyT(
    this.type(),
    this.value()
  );
}


unpackTo(_o: UserDataBodyT): void {
  _o.type = this.type();
  _o.value = this.value();
}
}

export class UserDataBodyT implements flatbuffers.IGeneratedObject {
constructor(
  public type: UserDataType = UserDataType.Pfp,
  public value: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const value = (this.value !== null ? builder.createString(this.value!) : 0);

  return UserDataBody.createUserDataBody(builder,
    this.type,
    value
  );
}
}

export class MessageData implements flatbuffers.IUnpackableObject<MessageDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MessageData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMessageData(bb:flatbuffers.ByteBuffer, obj?:MessageData):MessageData {
  return (obj || new MessageData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMessageData(bb:flatbuffers.ByteBuffer, obj?:MessageData):MessageData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MessageData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bodyType():MessageBody {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : MessageBody.NONE;
}

body<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

type():MessageType|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : null;
}

timestamp():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

network():FarcasterNetwork {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : FarcasterNetwork.Mainnet;
}

static startMessageData(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addBodyType(builder:flatbuffers.Builder, bodyType:MessageBody) {
  builder.addFieldInt8(0, bodyType, MessageBody.NONE);
}

static addBody(builder:flatbuffers.Builder, bodyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, bodyOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:MessageType) {
  builder.addFieldInt16(2, type, 0);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:number) {
  builder.addFieldInt32(3, timestamp, 0);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addNetwork(builder:flatbuffers.Builder, network:FarcasterNetwork) {
  builder.addFieldInt8(5, network, FarcasterNetwork.Mainnet);
}

static endMessageData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // body
  builder.requiredField(offset, 12) // fid
  return offset;
}

static createMessageData(builder:flatbuffers.Builder, bodyType:MessageBody, bodyOffset:flatbuffers.Offset, type:MessageType|null, timestamp:number, fidOffset:flatbuffers.Offset, network:FarcasterNetwork):flatbuffers.Offset {
  MessageData.startMessageData(builder);
  MessageData.addBodyType(builder, bodyType);
  MessageData.addBody(builder, bodyOffset);
  if (type !== null)
    MessageData.addType(builder, type);
  MessageData.addTimestamp(builder, timestamp);
  MessageData.addFid(builder, fidOffset);
  MessageData.addNetwork(builder, network);
  return MessageData.endMessageData(builder);
}

unpack(): MessageDataT {
  return new MessageDataT(
    this.bodyType(),
    (() => {
      const temp = unionToMessageBody(this.bodyType(), this.body.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })(),
    this.type(),
    this.timestamp(),
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength()),
    this.network()
  );
}


unpackTo(_o: MessageDataT): void {
  _o.bodyType = this.bodyType();
  _o.body = (() => {
      const temp = unionToMessageBody(this.bodyType(), this.body.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
  _o.type = this.type();
  _o.timestamp = this.timestamp();
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
  _o.network = this.network();
}
}

export class MessageDataT implements flatbuffers.IGeneratedObject {
constructor(
  public bodyType: MessageBody = MessageBody.NONE,
  public body: AmpBodyT|CastAddBodyT|CastRemoveBodyT|ReactionBodyT|SignerBodyT|UserDataBodyT|VerificationAddEthAddressBodyT|VerificationRemoveBodyT|null = null,
  public type: MessageType|null = null,
  public timestamp: number = 0,
  public fid: (number)[] = [],
  public network: FarcasterNetwork = FarcasterNetwork.Mainnet
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const body = builder.createObjectOffset(this.body);
  const fid = MessageData.createFidVector(builder, this.fid);

  return MessageData.createMessageData(builder,
    this.bodyType,
    body,
    this.type,
    this.timestamp,
    fid,
    this.network
  );
}
}

export class Message implements flatbuffers.IUnpackableObject<MessageT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Message {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {
  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

data(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dataArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

hash(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

hashLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

hashArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

hashScheme():HashScheme {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : HashScheme.Blake3;
}

signature(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

signatureLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

signatureArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

signatureScheme():SignatureScheme {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : SignatureScheme.Ed25519;
}

signer(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

signerLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

signerArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startMessage(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dataOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addHash(builder:flatbuffers.Builder, hashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, hashOffset, 0);
}

static createHashVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startHashVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addHashScheme(builder:flatbuffers.Builder, hashScheme:HashScheme) {
  builder.addFieldInt8(2, hashScheme, HashScheme.Blake3);
}

static addSignature(builder:flatbuffers.Builder, signatureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, signatureOffset, 0);
}

static createSignatureVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startSignatureVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addSignatureScheme(builder:flatbuffers.Builder, signatureScheme:SignatureScheme) {
  builder.addFieldInt8(4, signatureScheme, SignatureScheme.Ed25519);
}

static addSigner(builder:flatbuffers.Builder, signerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, signerOffset, 0);
}

static createSignerVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startSignerVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // data
  builder.requiredField(offset, 6) // hash
  builder.requiredField(offset, 10) // signature
  builder.requiredField(offset, 14) // signer
  return offset;
}

static finishMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createMessage(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset, hashOffset:flatbuffers.Offset, hashScheme:HashScheme, signatureOffset:flatbuffers.Offset, signatureScheme:SignatureScheme, signerOffset:flatbuffers.Offset):flatbuffers.Offset {
  Message.startMessage(builder);
  Message.addData(builder, dataOffset);
  Message.addHash(builder, hashOffset);
  Message.addHashScheme(builder, hashScheme);
  Message.addSignature(builder, signatureOffset);
  Message.addSignatureScheme(builder, signatureScheme);
  Message.addSigner(builder, signerOffset);
  return Message.endMessage(builder);
}

unpack(): MessageT {
  return new MessageT(
    this.bb!.createScalarList<number>(this.data.bind(this), this.dataLength()),
    this.bb!.createScalarList<number>(this.hash.bind(this), this.hashLength()),
    this.hashScheme(),
    this.bb!.createScalarList<number>(this.signature.bind(this), this.signatureLength()),
    this.signatureScheme(),
    this.bb!.createScalarList<number>(this.signer.bind(this), this.signerLength())
  );
}


unpackTo(_o: MessageT): void {
  _o.data = this.bb!.createScalarList<number>(this.data.bind(this), this.dataLength());
  _o.hash = this.bb!.createScalarList<number>(this.hash.bind(this), this.hashLength());
  _o.hashScheme = this.hashScheme();
  _o.signature = this.bb!.createScalarList<number>(this.signature.bind(this), this.signatureLength());
  _o.signatureScheme = this.signatureScheme();
  _o.signer = this.bb!.createScalarList<number>(this.signer.bind(this), this.signerLength());
}
}

export class MessageT implements flatbuffers.IGeneratedObject {
constructor(
  public data: (number)[] = [],
  public hash: (number)[] = [],
  public hashScheme: HashScheme = HashScheme.Blake3,
  public signature: (number)[] = [],
  public signatureScheme: SignatureScheme = SignatureScheme.Ed25519,
  public signer: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const data = Message.createDataVector(builder, this.data);
  const hash = Message.createHashVector(builder, this.hash);
  const signature = Message.createSignatureVector(builder, this.signature);
  const signer = Message.createSignerVector(builder, this.signer);

  return Message.createMessage(builder,
    data,
    hash,
    this.hashScheme,
    signature,
    this.signatureScheme,
    signer
  );
}
}

