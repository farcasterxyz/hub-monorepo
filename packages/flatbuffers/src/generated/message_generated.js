// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
export var MessageType;
(function (MessageType) {
    MessageType[MessageType["CastAdd"] = 1] = "CastAdd";
    MessageType[MessageType["CastRemove"] = 2] = "CastRemove";
    MessageType[MessageType["ReactionAdd"] = 3] = "ReactionAdd";
    MessageType[MessageType["ReactionRemove"] = 4] = "ReactionRemove";
    MessageType[MessageType["AmpAdd"] = 5] = "AmpAdd";
    MessageType[MessageType["AmpRemove"] = 6] = "AmpRemove";
    MessageType[MessageType["VerificationAddEthAddress"] = 7] = "VerificationAddEthAddress";
    MessageType[MessageType["VerificationRemove"] = 8] = "VerificationRemove";
    MessageType[MessageType["SignerAdd"] = 9] = "SignerAdd";
    MessageType[MessageType["SignerRemove"] = 10] = "SignerRemove";
    MessageType[MessageType["UserDataAdd"] = 11] = "UserDataAdd";
})(MessageType || (MessageType = {}));
export var SignatureScheme;
(function (SignatureScheme) {
    SignatureScheme[SignatureScheme["Ed25519"] = 1] = "Ed25519";
    SignatureScheme[SignatureScheme["Eip712"] = 2] = "Eip712";
})(SignatureScheme || (SignatureScheme = {}));
export var HashScheme;
(function (HashScheme) {
    HashScheme[HashScheme["Blake3"] = 1] = "Blake3";
})(HashScheme || (HashScheme = {}));
export var FarcasterNetwork;
(function (FarcasterNetwork) {
    FarcasterNetwork[FarcasterNetwork["Mainnet"] = 1] = "Mainnet";
    FarcasterNetwork[FarcasterNetwork["Testnet"] = 2] = "Testnet";
    FarcasterNetwork[FarcasterNetwork["Devnet"] = 3] = "Devnet";
})(FarcasterNetwork || (FarcasterNetwork = {}));
export var ReactionType;
(function (ReactionType) {
    ReactionType[ReactionType["Like"] = 1] = "Like";
    ReactionType[ReactionType["Recast"] = 2] = "Recast";
})(ReactionType || (ReactionType = {}));
export var UserDataType;
(function (UserDataType) {
    UserDataType[UserDataType["Pfp"] = 1] = "Pfp";
    UserDataType[UserDataType["Display"] = 2] = "Display";
    UserDataType[UserDataType["Bio"] = 3] = "Bio";
    UserDataType[UserDataType["Location"] = 4] = "Location";
    UserDataType[UserDataType["Url"] = 5] = "Url";
    UserDataType[UserDataType["Fname"] = 6] = "Fname";
})(UserDataType || (UserDataType = {}));
export var TargetId;
(function (TargetId) {
    TargetId[TargetId["NONE"] = 0] = "NONE";
    TargetId[TargetId["CastId"] = 1] = "CastId";
})(TargetId || (TargetId = {}));
export function unionToTargetId(type, accessor) {
    switch (TargetId[type]) {
        case 'NONE': return null;
        case 'CastId': return accessor(new CastId());
        default: return null;
    }
}
export function unionListToTargetId(type, accessor, index) {
    switch (TargetId[type]) {
        case 'NONE': return null;
        case 'CastId': return accessor(index, new CastId());
        default: return null;
    }
}
export var MessageBody;
(function (MessageBody) {
    MessageBody[MessageBody["NONE"] = 0] = "NONE";
    MessageBody[MessageBody["CastAddBody"] = 1] = "CastAddBody";
    MessageBody[MessageBody["CastRemoveBody"] = 2] = "CastRemoveBody";
    MessageBody[MessageBody["ReactionBody"] = 3] = "ReactionBody";
    MessageBody[MessageBody["AmpBody"] = 4] = "AmpBody";
    MessageBody[MessageBody["VerificationAddEthAddressBody"] = 5] = "VerificationAddEthAddressBody";
    MessageBody[MessageBody["VerificationRemoveBody"] = 6] = "VerificationRemoveBody";
    MessageBody[MessageBody["SignerBody"] = 7] = "SignerBody";
    MessageBody[MessageBody["UserDataBody"] = 8] = "UserDataBody";
})(MessageBody || (MessageBody = {}));
export function unionToMessageBody(type, accessor) {
    switch (MessageBody[type]) {
        case 'NONE': return null;
        case 'CastAddBody': return accessor(new CastAddBody());
        case 'CastRemoveBody': return accessor(new CastRemoveBody());
        case 'ReactionBody': return accessor(new ReactionBody());
        case 'AmpBody': return accessor(new AmpBody());
        case 'VerificationAddEthAddressBody': return accessor(new VerificationAddEthAddressBody());
        case 'VerificationRemoveBody': return accessor(new VerificationRemoveBody());
        case 'SignerBody': return accessor(new SignerBody());
        case 'UserDataBody': return accessor(new UserDataBody());
        default: return null;
    }
}
export function unionListToMessageBody(type, accessor, index) {
    switch (MessageBody[type]) {
        case 'NONE': return null;
        case 'CastAddBody': return accessor(index, new CastAddBody());
        case 'CastRemoveBody': return accessor(index, new CastRemoveBody());
        case 'ReactionBody': return accessor(index, new ReactionBody());
        case 'AmpBody': return accessor(index, new AmpBody());
        case 'VerificationAddEthAddressBody': return accessor(index, new VerificationAddEthAddressBody());
        case 'VerificationRemoveBody': return accessor(index, new VerificationRemoveBody());
        case 'SignerBody': return accessor(index, new SignerBody());
        case 'UserDataBody': return accessor(index, new UserDataBody());
        default: return null;
    }
}
export class CastId {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCastId(bb, obj) {
        return (obj || new CastId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCastId(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CastId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    tsHash(index) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    tsHashLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    tsHashArray() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startCastId(builder) {
        builder.startObject(2);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addTsHash(builder, tsHashOffset) {
        builder.addFieldOffset(1, tsHashOffset, 0);
    }
    static createTsHashVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startTsHashVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endCastId(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        builder.requiredField(offset, 6); // ts_hash
        return offset;
    }
    static createCastId(builder, fidOffset, tsHashOffset) {
        CastId.startCastId(builder);
        CastId.addFid(builder, fidOffset);
        CastId.addTsHash(builder, tsHashOffset);
        return CastId.endCastId(builder);
    }
    unpack() {
        return new CastIdT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()), this.bb.createScalarList(this.tsHash.bind(this), this.tsHashLength()));
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
        _o.tsHash = this.bb.createScalarList(this.tsHash.bind(this), this.tsHashLength());
    }
}
export class CastIdT {
    fid;
    tsHash;
    constructor(fid = [], tsHash = []) {
        this.fid = fid;
        this.tsHash = tsHash;
    }
    pack(builder) {
        const fid = CastId.createFidVector(builder, this.fid);
        const tsHash = CastId.createTsHashVector(builder, this.tsHash);
        return CastId.createCastId(builder, fid, tsHash);
    }
}
export class UserId {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsUserId(bb, obj) {
        return (obj || new UserId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsUserId(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new UserId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startUserId(builder) {
        builder.startObject(1);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endUserId(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        return offset;
    }
    static createUserId(builder, fidOffset) {
        UserId.startUserId(builder);
        UserId.addFid(builder, fidOffset);
        return UserId.endUserId(builder);
    }
    unpack() {
        return new UserIdT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()));
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
    }
}
export class UserIdT {
    fid;
    constructor(fid = []) {
        this.fid = fid;
    }
    pack(builder) {
        const fid = UserId.createFidVector(builder, this.fid);
        return UserId.createUserId(builder, fid);
    }
}
export class CastAddBody {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCastAddBody(bb, obj) {
        return (obj || new CastAddBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCastAddBody(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CastAddBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    embeds(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    embedsLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    mentions(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new UserId()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    mentionsLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    parentType() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : TargetId.NONE;
    }
    parent(obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    text(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startCastAddBody(builder) {
        builder.startObject(5);
    }
    static addEmbeds(builder, embedsOffset) {
        builder.addFieldOffset(0, embedsOffset, 0);
    }
    static createEmbedsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startEmbedsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addMentions(builder, mentionsOffset) {
        builder.addFieldOffset(1, mentionsOffset, 0);
    }
    static createMentionsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startMentionsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addParentType(builder, parentType) {
        builder.addFieldInt8(2, parentType, TargetId.NONE);
    }
    static addParent(builder, parentOffset) {
        builder.addFieldOffset(3, parentOffset, 0);
    }
    static addText(builder, textOffset) {
        builder.addFieldOffset(4, textOffset, 0);
    }
    static endCastAddBody(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 12); // text
        return offset;
    }
    static createCastAddBody(builder, embedsOffset, mentionsOffset, parentType, parentOffset, textOffset) {
        CastAddBody.startCastAddBody(builder);
        CastAddBody.addEmbeds(builder, embedsOffset);
        CastAddBody.addMentions(builder, mentionsOffset);
        CastAddBody.addParentType(builder, parentType);
        CastAddBody.addParent(builder, parentOffset);
        CastAddBody.addText(builder, textOffset);
        return CastAddBody.endCastAddBody(builder);
    }
    unpack() {
        return new CastAddBodyT(this.bb.createScalarList(this.embeds.bind(this), this.embedsLength()), this.bb.createObjList(this.mentions.bind(this), this.mentionsLength()), this.parentType(), (() => {
            const temp = unionToTargetId(this.parentType(), this.parent.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })(), this.text());
    }
    unpackTo(_o) {
        _o.embeds = this.bb.createScalarList(this.embeds.bind(this), this.embedsLength());
        _o.mentions = this.bb.createObjList(this.mentions.bind(this), this.mentionsLength());
        _o.parentType = this.parentType();
        _o.parent = (() => {
            const temp = unionToTargetId(this.parentType(), this.parent.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
        _o.text = this.text();
    }
}
export class CastAddBodyT {
    embeds;
    mentions;
    parentType;
    parent;
    text;
    constructor(embeds = [], mentions = [], parentType = TargetId.NONE, parent = null, text = null) {
        this.embeds = embeds;
        this.mentions = mentions;
        this.parentType = parentType;
        this.parent = parent;
        this.text = text;
    }
    pack(builder) {
        const embeds = CastAddBody.createEmbedsVector(builder, builder.createObjectOffsetList(this.embeds));
        const mentions = CastAddBody.createMentionsVector(builder, builder.createObjectOffsetList(this.mentions));
        const parent = builder.createObjectOffset(this.parent);
        const text = (this.text !== null ? builder.createString(this.text) : 0);
        return CastAddBody.createCastAddBody(builder, embeds, mentions, this.parentType, parent, text);
    }
}
export class CastRemoveBody {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCastRemoveBody(bb, obj) {
        return (obj || new CastRemoveBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCastRemoveBody(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CastRemoveBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    targetTsHash(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    targetTsHashLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    targetTsHashArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startCastRemoveBody(builder) {
        builder.startObject(1);
    }
    static addTargetTsHash(builder, targetTsHashOffset) {
        builder.addFieldOffset(0, targetTsHashOffset, 0);
    }
    static createTargetTsHashVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startTargetTsHashVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endCastRemoveBody(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // target_ts_hash
        return offset;
    }
    static createCastRemoveBody(builder, targetTsHashOffset) {
        CastRemoveBody.startCastRemoveBody(builder);
        CastRemoveBody.addTargetTsHash(builder, targetTsHashOffset);
        return CastRemoveBody.endCastRemoveBody(builder);
    }
    unpack() {
        return new CastRemoveBodyT(this.bb.createScalarList(this.targetTsHash.bind(this), this.targetTsHashLength()));
    }
    unpackTo(_o) {
        _o.targetTsHash = this.bb.createScalarList(this.targetTsHash.bind(this), this.targetTsHashLength());
    }
}
export class CastRemoveBodyT {
    targetTsHash;
    constructor(targetTsHash = []) {
        this.targetTsHash = targetTsHash;
    }
    pack(builder) {
        const targetTsHash = CastRemoveBody.createTargetTsHashVector(builder, this.targetTsHash);
        return CastRemoveBody.createCastRemoveBody(builder, targetTsHash);
    }
}
export class ReactionBody {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsReactionBody(bb, obj) {
        return (obj || new ReactionBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsReactionBody(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ReactionBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    targetType() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : TargetId.NONE;
    }
    target(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    type() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : ReactionType.Like;
    }
    static startReactionBody(builder) {
        builder.startObject(3);
    }
    static addTargetType(builder, targetType) {
        builder.addFieldInt8(0, targetType, TargetId.NONE);
    }
    static addTarget(builder, targetOffset) {
        builder.addFieldOffset(1, targetOffset, 0);
    }
    static addType(builder, type) {
        builder.addFieldInt16(2, type, ReactionType.Like);
    }
    static endReactionBody(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // target
        return offset;
    }
    static createReactionBody(builder, targetType, targetOffset, type) {
        ReactionBody.startReactionBody(builder);
        ReactionBody.addTargetType(builder, targetType);
        ReactionBody.addTarget(builder, targetOffset);
        ReactionBody.addType(builder, type);
        return ReactionBody.endReactionBody(builder);
    }
    unpack() {
        return new ReactionBodyT(this.targetType(), (() => {
            const temp = unionToTargetId(this.targetType(), this.target.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })(), this.type());
    }
    unpackTo(_o) {
        _o.targetType = this.targetType();
        _o.target = (() => {
            const temp = unionToTargetId(this.targetType(), this.target.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
        _o.type = this.type();
    }
}
export class ReactionBodyT {
    targetType;
    target;
    type;
    constructor(targetType = TargetId.NONE, target = null, type = ReactionType.Like) {
        this.targetType = targetType;
        this.target = target;
        this.type = type;
    }
    pack(builder) {
        const target = builder.createObjectOffset(this.target);
        return ReactionBody.createReactionBody(builder, this.targetType, target, this.type);
    }
}
export class AmpBody {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsAmpBody(bb, obj) {
        return (obj || new AmpBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsAmpBody(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new AmpBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    user(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new UserId()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startAmpBody(builder) {
        builder.startObject(1);
    }
    static addUser(builder, userOffset) {
        builder.addFieldOffset(0, userOffset, 0);
    }
    static endAmpBody(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // user
        return offset;
    }
    static createAmpBody(builder, userOffset) {
        AmpBody.startAmpBody(builder);
        AmpBody.addUser(builder, userOffset);
        return AmpBody.endAmpBody(builder);
    }
    unpack() {
        return new AmpBodyT((this.user() !== null ? this.user().unpack() : null));
    }
    unpackTo(_o) {
        _o.user = (this.user() !== null ? this.user().unpack() : null);
    }
}
export class AmpBodyT {
    user;
    constructor(user = null) {
        this.user = user;
    }
    pack(builder) {
        const user = (this.user !== null ? this.user.pack(builder) : 0);
        return AmpBody.createAmpBody(builder, user);
    }
}
export class VerificationAddEthAddressBody {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsVerificationAddEthAddressBody(bb, obj) {
        return (obj || new VerificationAddEthAddressBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsVerificationAddEthAddressBody(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VerificationAddEthAddressBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    address(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    addressLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    addressArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    ethSignature(index) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    ethSignatureLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    ethSignatureArray() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    blockHash(index) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    blockHashLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    blockHashArray() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startVerificationAddEthAddressBody(builder) {
        builder.startObject(3);
    }
    static addAddress(builder, addressOffset) {
        builder.addFieldOffset(0, addressOffset, 0);
    }
    static createAddressVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startAddressVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addEthSignature(builder, ethSignatureOffset) {
        builder.addFieldOffset(1, ethSignatureOffset, 0);
    }
    static createEthSignatureVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startEthSignatureVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addBlockHash(builder, blockHashOffset) {
        builder.addFieldOffset(2, blockHashOffset, 0);
    }
    static createBlockHashVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startBlockHashVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endVerificationAddEthAddressBody(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // address
        builder.requiredField(offset, 6); // eth_signature
        builder.requiredField(offset, 8); // block_hash
        return offset;
    }
    static createVerificationAddEthAddressBody(builder, addressOffset, ethSignatureOffset, blockHashOffset) {
        VerificationAddEthAddressBody.startVerificationAddEthAddressBody(builder);
        VerificationAddEthAddressBody.addAddress(builder, addressOffset);
        VerificationAddEthAddressBody.addEthSignature(builder, ethSignatureOffset);
        VerificationAddEthAddressBody.addBlockHash(builder, blockHashOffset);
        return VerificationAddEthAddressBody.endVerificationAddEthAddressBody(builder);
    }
    unpack() {
        return new VerificationAddEthAddressBodyT(this.bb.createScalarList(this.address.bind(this), this.addressLength()), this.bb.createScalarList(this.ethSignature.bind(this), this.ethSignatureLength()), this.bb.createScalarList(this.blockHash.bind(this), this.blockHashLength()));
    }
    unpackTo(_o) {
        _o.address = this.bb.createScalarList(this.address.bind(this), this.addressLength());
        _o.ethSignature = this.bb.createScalarList(this.ethSignature.bind(this), this.ethSignatureLength());
        _o.blockHash = this.bb.createScalarList(this.blockHash.bind(this), this.blockHashLength());
    }
}
export class VerificationAddEthAddressBodyT {
    address;
    ethSignature;
    blockHash;
    constructor(address = [], ethSignature = [], blockHash = []) {
        this.address = address;
        this.ethSignature = ethSignature;
        this.blockHash = blockHash;
    }
    pack(builder) {
        const address = VerificationAddEthAddressBody.createAddressVector(builder, this.address);
        const ethSignature = VerificationAddEthAddressBody.createEthSignatureVector(builder, this.ethSignature);
        const blockHash = VerificationAddEthAddressBody.createBlockHashVector(builder, this.blockHash);
        return VerificationAddEthAddressBody.createVerificationAddEthAddressBody(builder, address, ethSignature, blockHash);
    }
}
export class VerificationRemoveBody {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsVerificationRemoveBody(bb, obj) {
        return (obj || new VerificationRemoveBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsVerificationRemoveBody(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VerificationRemoveBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    address(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    addressLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    addressArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startVerificationRemoveBody(builder) {
        builder.startObject(1);
    }
    static addAddress(builder, addressOffset) {
        builder.addFieldOffset(0, addressOffset, 0);
    }
    static createAddressVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startAddressVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endVerificationRemoveBody(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // address
        return offset;
    }
    static createVerificationRemoveBody(builder, addressOffset) {
        VerificationRemoveBody.startVerificationRemoveBody(builder);
        VerificationRemoveBody.addAddress(builder, addressOffset);
        return VerificationRemoveBody.endVerificationRemoveBody(builder);
    }
    unpack() {
        return new VerificationRemoveBodyT(this.bb.createScalarList(this.address.bind(this), this.addressLength()));
    }
    unpackTo(_o) {
        _o.address = this.bb.createScalarList(this.address.bind(this), this.addressLength());
    }
}
export class VerificationRemoveBodyT {
    address;
    constructor(address = []) {
        this.address = address;
    }
    pack(builder) {
        const address = VerificationRemoveBody.createAddressVector(builder, this.address);
        return VerificationRemoveBody.createVerificationRemoveBody(builder, address);
    }
}
export class SignerBody {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSignerBody(bb, obj) {
        return (obj || new SignerBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSignerBody(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SignerBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    signer(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    signerLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    signerArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startSignerBody(builder) {
        builder.startObject(1);
    }
    static addSigner(builder, signerOffset) {
        builder.addFieldOffset(0, signerOffset, 0);
    }
    static createSignerVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startSignerVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endSignerBody(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // signer
        return offset;
    }
    static createSignerBody(builder, signerOffset) {
        SignerBody.startSignerBody(builder);
        SignerBody.addSigner(builder, signerOffset);
        return SignerBody.endSignerBody(builder);
    }
    unpack() {
        return new SignerBodyT(this.bb.createScalarList(this.signer.bind(this), this.signerLength()));
    }
    unpackTo(_o) {
        _o.signer = this.bb.createScalarList(this.signer.bind(this), this.signerLength());
    }
}
export class SignerBodyT {
    signer;
    constructor(signer = []) {
        this.signer = signer;
    }
    pack(builder) {
        const signer = SignerBody.createSignerVector(builder, this.signer);
        return SignerBody.createSignerBody(builder, signer);
    }
}
export class UserDataBody {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsUserDataBody(bb, obj) {
        return (obj || new UserDataBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsUserDataBody(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new UserDataBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    type() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : UserDataType.Pfp;
    }
    value(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startUserDataBody(builder) {
        builder.startObject(2);
    }
    static addType(builder, type) {
        builder.addFieldInt16(0, type, UserDataType.Pfp);
    }
    static addValue(builder, valueOffset) {
        builder.addFieldOffset(1, valueOffset, 0);
    }
    static endUserDataBody(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createUserDataBody(builder, type, valueOffset) {
        UserDataBody.startUserDataBody(builder);
        UserDataBody.addType(builder, type);
        UserDataBody.addValue(builder, valueOffset);
        return UserDataBody.endUserDataBody(builder);
    }
    unpack() {
        return new UserDataBodyT(this.type(), this.value());
    }
    unpackTo(_o) {
        _o.type = this.type();
        _o.value = this.value();
    }
}
export class UserDataBodyT {
    type;
    value;
    constructor(type = UserDataType.Pfp, value = null) {
        this.type = type;
        this.value = value;
    }
    pack(builder) {
        const value = (this.value !== null ? builder.createString(this.value) : 0);
        return UserDataBody.createUserDataBody(builder, this.type, value);
    }
}
export class MessageData {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMessageData(bb, obj) {
        return (obj || new MessageData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMessageData(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MessageData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    bodyType() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : MessageBody.NONE;
    }
    body(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    type() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : null;
    }
    timestamp() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    network() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : FarcasterNetwork.Mainnet;
    }
    static startMessageData(builder) {
        builder.startObject(6);
    }
    static addBodyType(builder, bodyType) {
        builder.addFieldInt8(0, bodyType, MessageBody.NONE);
    }
    static addBody(builder, bodyOffset) {
        builder.addFieldOffset(1, bodyOffset, 0);
    }
    static addType(builder, type) {
        builder.addFieldInt16(2, type, 0);
    }
    static addTimestamp(builder, timestamp) {
        builder.addFieldInt32(3, timestamp, 0);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(4, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addNetwork(builder, network) {
        builder.addFieldInt8(5, network, FarcasterNetwork.Mainnet);
    }
    static endMessageData(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // body
        builder.requiredField(offset, 12); // fid
        return offset;
    }
    static createMessageData(builder, bodyType, bodyOffset, type, timestamp, fidOffset, network) {
        MessageData.startMessageData(builder);
        MessageData.addBodyType(builder, bodyType);
        MessageData.addBody(builder, bodyOffset);
        if (type !== null)
            MessageData.addType(builder, type);
        MessageData.addTimestamp(builder, timestamp);
        MessageData.addFid(builder, fidOffset);
        MessageData.addNetwork(builder, network);
        return MessageData.endMessageData(builder);
    }
    unpack() {
        return new MessageDataT(this.bodyType(), (() => {
            const temp = unionToMessageBody(this.bodyType(), this.body.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })(), this.type(), this.timestamp(), this.bb.createScalarList(this.fid.bind(this), this.fidLength()), this.network());
    }
    unpackTo(_o) {
        _o.bodyType = this.bodyType();
        _o.body = (() => {
            const temp = unionToMessageBody(this.bodyType(), this.body.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
        _o.type = this.type();
        _o.timestamp = this.timestamp();
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
        _o.network = this.network();
    }
}
export class MessageDataT {
    bodyType;
    body;
    type;
    timestamp;
    fid;
    network;
    constructor(bodyType = MessageBody.NONE, body = null, type = null, timestamp = 0, fid = [], network = FarcasterNetwork.Mainnet) {
        this.bodyType = bodyType;
        this.body = body;
        this.type = type;
        this.timestamp = timestamp;
        this.fid = fid;
        this.network = network;
    }
    pack(builder) {
        const body = builder.createObjectOffset(this.body);
        const fid = MessageData.createFidVector(builder, this.fid);
        return MessageData.createMessageData(builder, this.bodyType, body, this.type, this.timestamp, fid, this.network);
    }
}
export class Message {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMessage(bb, obj) {
        return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMessage(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    data(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    dataLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    dataArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    hash(index) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    hashLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    hashArray() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    hashScheme() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : HashScheme.Blake3;
    }
    signature(index) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    signatureLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    signatureArray() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    signatureScheme() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : SignatureScheme.Ed25519;
    }
    signer(index) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    signerLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    signerArray() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startMessage(builder) {
        builder.startObject(6);
    }
    static addData(builder, dataOffset) {
        builder.addFieldOffset(0, dataOffset, 0);
    }
    static createDataVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startDataVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addHash(builder, hashOffset) {
        builder.addFieldOffset(1, hashOffset, 0);
    }
    static createHashVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startHashVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addHashScheme(builder, hashScheme) {
        builder.addFieldInt8(2, hashScheme, HashScheme.Blake3);
    }
    static addSignature(builder, signatureOffset) {
        builder.addFieldOffset(3, signatureOffset, 0);
    }
    static createSignatureVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startSignatureVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addSignatureScheme(builder, signatureScheme) {
        builder.addFieldInt8(4, signatureScheme, SignatureScheme.Ed25519);
    }
    static addSigner(builder, signerOffset) {
        builder.addFieldOffset(5, signerOffset, 0);
    }
    static createSignerVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startSignerVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endMessage(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // data
        builder.requiredField(offset, 6); // hash
        builder.requiredField(offset, 10); // signature
        builder.requiredField(offset, 14); // signer
        return offset;
    }
    static finishMessageBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedMessageBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createMessage(builder, dataOffset, hashOffset, hashScheme, signatureOffset, signatureScheme, signerOffset) {
        Message.startMessage(builder);
        Message.addData(builder, dataOffset);
        Message.addHash(builder, hashOffset);
        Message.addHashScheme(builder, hashScheme);
        Message.addSignature(builder, signatureOffset);
        Message.addSignatureScheme(builder, signatureScheme);
        Message.addSigner(builder, signerOffset);
        return Message.endMessage(builder);
    }
    unpack() {
        return new MessageT(this.bb.createScalarList(this.data.bind(this), this.dataLength()), this.bb.createScalarList(this.hash.bind(this), this.hashLength()), this.hashScheme(), this.bb.createScalarList(this.signature.bind(this), this.signatureLength()), this.signatureScheme(), this.bb.createScalarList(this.signer.bind(this), this.signerLength()));
    }
    unpackTo(_o) {
        _o.data = this.bb.createScalarList(this.data.bind(this), this.dataLength());
        _o.hash = this.bb.createScalarList(this.hash.bind(this), this.hashLength());
        _o.hashScheme = this.hashScheme();
        _o.signature = this.bb.createScalarList(this.signature.bind(this), this.signatureLength());
        _o.signatureScheme = this.signatureScheme();
        _o.signer = this.bb.createScalarList(this.signer.bind(this), this.signerLength());
    }
}
export class MessageT {
    data;
    hash;
    hashScheme;
    signature;
    signatureScheme;
    signer;
    constructor(data = [], hash = [], hashScheme = HashScheme.Blake3, signature = [], signatureScheme = SignatureScheme.Ed25519, signer = []) {
        this.data = data;
        this.hash = hash;
        this.hashScheme = hashScheme;
        this.signature = signature;
        this.signatureScheme = signatureScheme;
        this.signer = signer;
    }
    pack(builder) {
        const data = Message.createDataVector(builder, this.data);
        const hash = Message.createHashVector(builder, this.hash);
        const signature = Message.createSignatureVector(builder, this.signature);
        const signer = Message.createSignerVector(builder, this.signer);
        return Message.createMessage(builder, data, hash, this.hashScheme, signature, this.signatureScheme, signer);
    }
}
//# sourceMappingURL=message_generated.js.map