// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
export var NameRegistryEventType;
(function (NameRegistryEventType) {
    NameRegistryEventType[NameRegistryEventType["NameRegistryTransfer"] = 1] = "NameRegistryTransfer";
    NameRegistryEventType[NameRegistryEventType["NameRegistryRenew"] = 2] = "NameRegistryRenew";
})(NameRegistryEventType || (NameRegistryEventType = {}));
export class NameRegistryEvent {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsNameRegistryEvent(bb, obj) {
        return (obj || new NameRegistryEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsNameRegistryEvent(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new NameRegistryEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    blockNumber() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    blockHash(index) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    blockHashLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    blockHashArray() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    transactionHash(index) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    transactionHashLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    transactionHashArray() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    logIndex() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    }
    fname(index) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fnameLength() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fnameArray() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    from(index) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fromLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fromArray() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    to(index) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    toLength() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    toArray() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    type() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : NameRegistryEventType.NameRegistryTransfer;
    }
    expiry(index) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    expiryLength() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    expiryArray() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startNameRegistryEvent(builder) {
        builder.startObject(9);
    }
    static addBlockNumber(builder, blockNumber) {
        builder.addFieldInt32(0, blockNumber, 0);
    }
    static addBlockHash(builder, blockHashOffset) {
        builder.addFieldOffset(1, blockHashOffset, 0);
    }
    static createBlockHashVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startBlockHashVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addTransactionHash(builder, transactionHashOffset) {
        builder.addFieldOffset(2, transactionHashOffset, 0);
    }
    static createTransactionHashVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startTransactionHashVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addLogIndex(builder, logIndex) {
        builder.addFieldInt16(3, logIndex, 0);
    }
    static addFname(builder, fnameOffset) {
        builder.addFieldOffset(4, fnameOffset, 0);
    }
    static createFnameVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFnameVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addFrom(builder, fromOffset) {
        builder.addFieldOffset(5, fromOffset, 0);
    }
    static createFromVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFromVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addTo(builder, toOffset) {
        builder.addFieldOffset(6, toOffset, 0);
    }
    static createToVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startToVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addType(builder, type) {
        builder.addFieldInt8(7, type, NameRegistryEventType.NameRegistryTransfer);
    }
    static addExpiry(builder, expiryOffset) {
        builder.addFieldOffset(8, expiryOffset, 0);
    }
    static createExpiryVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startExpiryVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endNameRegistryEvent(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // block_hash
        builder.requiredField(offset, 8); // transaction_hash
        return offset;
    }
    static finishNameRegistryEventBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedNameRegistryEventBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createNameRegistryEvent(builder, blockNumber, blockHashOffset, transactionHashOffset, logIndex, fnameOffset, fromOffset, toOffset, type, expiryOffset) {
        NameRegistryEvent.startNameRegistryEvent(builder);
        NameRegistryEvent.addBlockNumber(builder, blockNumber);
        NameRegistryEvent.addBlockHash(builder, blockHashOffset);
        NameRegistryEvent.addTransactionHash(builder, transactionHashOffset);
        NameRegistryEvent.addLogIndex(builder, logIndex);
        NameRegistryEvent.addFname(builder, fnameOffset);
        NameRegistryEvent.addFrom(builder, fromOffset);
        NameRegistryEvent.addTo(builder, toOffset);
        NameRegistryEvent.addType(builder, type);
        NameRegistryEvent.addExpiry(builder, expiryOffset);
        return NameRegistryEvent.endNameRegistryEvent(builder);
    }
    unpack() {
        return new NameRegistryEventT(this.blockNumber(), this.bb.createScalarList(this.blockHash.bind(this), this.blockHashLength()), this.bb.createScalarList(this.transactionHash.bind(this), this.transactionHashLength()), this.logIndex(), this.bb.createScalarList(this.fname.bind(this), this.fnameLength()), this.bb.createScalarList(this.from.bind(this), this.fromLength()), this.bb.createScalarList(this.to.bind(this), this.toLength()), this.type(), this.bb.createScalarList(this.expiry.bind(this), this.expiryLength()));
    }
    unpackTo(_o) {
        _o.blockNumber = this.blockNumber();
        _o.blockHash = this.bb.createScalarList(this.blockHash.bind(this), this.blockHashLength());
        _o.transactionHash = this.bb.createScalarList(this.transactionHash.bind(this), this.transactionHashLength());
        _o.logIndex = this.logIndex();
        _o.fname = this.bb.createScalarList(this.fname.bind(this), this.fnameLength());
        _o.from = this.bb.createScalarList(this.from.bind(this), this.fromLength());
        _o.to = this.bb.createScalarList(this.to.bind(this), this.toLength());
        _o.type = this.type();
        _o.expiry = this.bb.createScalarList(this.expiry.bind(this), this.expiryLength());
    }
}
export class NameRegistryEventT {
    blockNumber;
    blockHash;
    transactionHash;
    logIndex;
    fname;
    from;
    to;
    type;
    expiry;
    constructor(blockNumber = 0, blockHash = [], transactionHash = [], logIndex = 0, fname = [], from = [], to = [], type = NameRegistryEventType.NameRegistryTransfer, expiry = []) {
        this.blockNumber = blockNumber;
        this.blockHash = blockHash;
        this.transactionHash = transactionHash;
        this.logIndex = logIndex;
        this.fname = fname;
        this.from = from;
        this.to = to;
        this.type = type;
        this.expiry = expiry;
    }
    pack(builder) {
        const blockHash = NameRegistryEvent.createBlockHashVector(builder, this.blockHash);
        const transactionHash = NameRegistryEvent.createTransactionHashVector(builder, this.transactionHash);
        const fname = NameRegistryEvent.createFnameVector(builder, this.fname);
        const from = NameRegistryEvent.createFromVector(builder, this.from);
        const to = NameRegistryEvent.createToVector(builder, this.to);
        const expiry = NameRegistryEvent.createExpiryVector(builder, this.expiry);
        return NameRegistryEvent.createNameRegistryEvent(builder, this.blockNumber, blockHash, transactionHash, this.logIndex, fname, from, to, this.type, expiry);
    }
}
//# sourceMappingURL=name_registry_event_generated.js.map