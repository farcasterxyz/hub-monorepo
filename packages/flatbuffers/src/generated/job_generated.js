// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
export class RevokeSignerJobPayload {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsRevokeSignerJobPayload(bb, obj) {
        return (obj || new RevokeSignerJobPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsRevokeSignerJobPayload(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RevokeSignerJobPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fid(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    fidLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fidArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    signer(index) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    signerLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    signerArray() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startRevokeSignerJobPayload(builder) {
        builder.startObject(2);
    }
    static addFid(builder, fidOffset) {
        builder.addFieldOffset(0, fidOffset, 0);
    }
    static createFidVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startFidVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addSigner(builder, signerOffset) {
        builder.addFieldOffset(1, signerOffset, 0);
    }
    static createSignerVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startSignerVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endRevokeSignerJobPayload(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fid
        builder.requiredField(offset, 6); // signer
        return offset;
    }
    static createRevokeSignerJobPayload(builder, fidOffset, signerOffset) {
        RevokeSignerJobPayload.startRevokeSignerJobPayload(builder);
        RevokeSignerJobPayload.addFid(builder, fidOffset);
        RevokeSignerJobPayload.addSigner(builder, signerOffset);
        return RevokeSignerJobPayload.endRevokeSignerJobPayload(builder);
    }
    unpack() {
        return new RevokeSignerJobPayloadT(this.bb.createScalarList(this.fid.bind(this), this.fidLength()), this.bb.createScalarList(this.signer.bind(this), this.signerLength()));
    }
    unpackTo(_o) {
        _o.fid = this.bb.createScalarList(this.fid.bind(this), this.fidLength());
        _o.signer = this.bb.createScalarList(this.signer.bind(this), this.signerLength());
    }
}
export class RevokeSignerJobPayloadT {
    fid;
    signer;
    constructor(fid = [], signer = []) {
        this.fid = fid;
        this.signer = signer;
    }
    pack(builder) {
        const fid = RevokeSignerJobPayload.createFidVector(builder, this.fid);
        const signer = RevokeSignerJobPayload.createSignerVector(builder, this.signer);
        return RevokeSignerJobPayload.createRevokeSignerJobPayload(builder, fid, signer);
    }
}
//# sourceMappingURL=job_generated.js.map