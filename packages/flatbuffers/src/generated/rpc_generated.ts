// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import {CastId as CastId, MessageBytes as MessageBytes, ReactionType as ReactionType, UserDataType as UserDataType, UserId as UserId} from './message_generated.js';

export enum EventType {
  MergeMessage = 0,
  PruneMessage = 1,
  RevokeMessage = 2,
  MergeIdRegistryEvent = 3,
  MergeNameRegistryEvent = 4
}

export class Empty {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Empty {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEmpty(bb:flatbuffers.ByteBuffer, obj?:Empty):Empty {
  return (obj || new Empty()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEmpty(bb:flatbuffers.ByteBuffer, obj?:Empty):Empty {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Empty()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startEmpty(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endEmpty(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEmpty(builder:flatbuffers.Builder):flatbuffers.Offset {
  Empty.startEmpty(builder);
  return Empty.endEmpty(builder);
}
}

export class HubInfoResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HubInfoResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHubInfoResponse(bb:flatbuffers.ByteBuffer, obj?:HubInfoResponse):HubInfoResponse {
  return (obj || new HubInfoResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHubInfoResponse(bb:flatbuffers.ByteBuffer, obj?:HubInfoResponse):HubInfoResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HubInfoResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

version():string|null
version(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
version(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

synced():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

nickname():string|null
nickname(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nickname(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rootHash():string|null
rootHash(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rootHash(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startHubInfoResponse(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addVersion(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, versionOffset, 0);
}

static addSynced(builder:flatbuffers.Builder, synced:boolean) {
  builder.addFieldInt8(1, +synced, +false);
}

static addNickname(builder:flatbuffers.Builder, nicknameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nicknameOffset, 0);
}

static addRootHash(builder:flatbuffers.Builder, rootHashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, rootHashOffset, 0);
}

static endHubInfoResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHubInfoResponse(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset, synced:boolean, nicknameOffset:flatbuffers.Offset, rootHashOffset:flatbuffers.Offset):flatbuffers.Offset {
  HubInfoResponse.startHubInfoResponse(builder);
  HubInfoResponse.addVersion(builder, versionOffset);
  HubInfoResponse.addSynced(builder, synced);
  HubInfoResponse.addNickname(builder, nicknameOffset);
  HubInfoResponse.addRootHash(builder, rootHashOffset);
  return HubInfoResponse.endHubInfoResponse(builder);
}
}

export class MessagesResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MessagesResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMessagesResponse(bb:flatbuffers.ByteBuffer, obj?:MessagesResponse):MessagesResponse {
  return (obj || new MessagesResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMessagesResponse(bb:flatbuffers.ByteBuffer, obj?:MessagesResponse):MessagesResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MessagesResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

messages(index: number, obj?:MessageBytes):MessageBytes|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MessageBytes()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

messagesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startMessagesResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMessages(builder:flatbuffers.Builder, messagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, messagesOffset, 0);
}

static createMessagesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMessagesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endMessagesResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMessagesResponse(builder:flatbuffers.Builder, messagesOffset:flatbuffers.Offset):flatbuffers.Offset {
  MessagesResponse.startMessagesResponse(builder);
  MessagesResponse.addMessages(builder, messagesOffset);
  return MessagesResponse.endMessagesResponse(builder);
}
}

export class FidsResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FidsResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFidsResponse(bb:flatbuffers.ByteBuffer, obj?:FidsResponse):FidsResponse {
  return (obj || new FidsResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFidsResponse(bb:flatbuffers.ByteBuffer, obj?:FidsResponse):FidsResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FidsResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fids(index: number, obj?:UserId):UserId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new UserId()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

fidsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFidsResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFids(builder:flatbuffers.Builder, fidsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidsOffset, 0);
}

static createFidsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFidsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFidsResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFidsResponse(builder:flatbuffers.Builder, fidsOffset:flatbuffers.Offset):flatbuffers.Offset {
  FidsResponse.startFidsResponse(builder);
  FidsResponse.addFids(builder, fidsOffset);
  return FidsResponse.endFidsResponse(builder);
}
}

export class EventResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EventResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEventResponse(bb:flatbuffers.ByteBuffer, obj?:EventResponse):EventResponse {
  return (obj || new EventResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEventResponse(bb:flatbuffers.ByteBuffer, obj?:EventResponse):EventResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EventResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():EventType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : EventType.MergeMessage;
}

bytes(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

bytesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

bytesArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startEventResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addType(builder:flatbuffers.Builder, type:EventType) {
  builder.addFieldInt8(0, type, EventType.MergeMessage);
}

static addBytes(builder:flatbuffers.Builder, bytesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, bytesOffset, 0);
}

static createBytesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startBytesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endEventResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEventResponse(builder:flatbuffers.Builder, type:EventType, bytesOffset:flatbuffers.Offset):flatbuffers.Offset {
  EventResponse.startEventResponse(builder);
  EventResponse.addType(builder, type);
  EventResponse.addBytes(builder, bytesOffset);
  return EventResponse.endEventResponse(builder);
}
}

export class TrieNodeMetadataResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TrieNodeMetadataResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrieNodeMetadataResponse(bb:flatbuffers.ByteBuffer, obj?:TrieNodeMetadataResponse):TrieNodeMetadataResponse {
  return (obj || new TrieNodeMetadataResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrieNodeMetadataResponse(bb:flatbuffers.ByteBuffer, obj?:TrieNodeMetadataResponse):TrieNodeMetadataResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TrieNodeMetadataResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

prefix(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

prefixLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

prefixArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

numMessages():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

hash(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

hashLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

hashArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

children(index: number, obj?:TrieNodeMetadataResponse):TrieNodeMetadataResponse|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new TrieNodeMetadataResponse()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

childrenLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startTrieNodeMetadataResponse(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addPrefix(builder:flatbuffers.Builder, prefixOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, prefixOffset, 0);
}

static createPrefixVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startPrefixVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addNumMessages(builder:flatbuffers.Builder, numMessages:bigint) {
  builder.addFieldInt64(1, numMessages, BigInt('0'));
}

static addHash(builder:flatbuffers.Builder, hashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, hashOffset, 0);
}

static createHashVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startHashVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addChildren(builder:flatbuffers.Builder, childrenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, childrenOffset, 0);
}

static createChildrenVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChildrenVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endTrieNodeMetadataResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTrieNodeMetadataResponse(builder:flatbuffers.Builder, prefixOffset:flatbuffers.Offset, numMessages:bigint, hashOffset:flatbuffers.Offset, childrenOffset:flatbuffers.Offset):flatbuffers.Offset {
  TrieNodeMetadataResponse.startTrieNodeMetadataResponse(builder);
  TrieNodeMetadataResponse.addPrefix(builder, prefixOffset);
  TrieNodeMetadataResponse.addNumMessages(builder, numMessages);
  TrieNodeMetadataResponse.addHash(builder, hashOffset);
  TrieNodeMetadataResponse.addChildren(builder, childrenOffset);
  return TrieNodeMetadataResponse.endTrieNodeMetadataResponse(builder);
}
}

export class TrieNodeSnapshotResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TrieNodeSnapshotResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrieNodeSnapshotResponse(bb:flatbuffers.ByteBuffer, obj?:TrieNodeSnapshotResponse):TrieNodeSnapshotResponse {
  return (obj || new TrieNodeSnapshotResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrieNodeSnapshotResponse(bb:flatbuffers.ByteBuffer, obj?:TrieNodeSnapshotResponse):TrieNodeSnapshotResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TrieNodeSnapshotResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

prefix():string|null
prefix(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
prefix(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

excludedHashes(index: number):string
excludedHashes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
excludedHashes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

excludedHashesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

numMessages():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

rootHash():string|null
rootHash(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rootHash(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startTrieNodeSnapshotResponse(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addPrefix(builder:flatbuffers.Builder, prefixOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, prefixOffset, 0);
}

static addExcludedHashes(builder:flatbuffers.Builder, excludedHashesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, excludedHashesOffset, 0);
}

static createExcludedHashesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startExcludedHashesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNumMessages(builder:flatbuffers.Builder, numMessages:bigint) {
  builder.addFieldInt64(2, numMessages, BigInt('0'));
}

static addRootHash(builder:flatbuffers.Builder, rootHashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, rootHashOffset, 0);
}

static endTrieNodeSnapshotResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTrieNodeSnapshotResponse(builder:flatbuffers.Builder, prefixOffset:flatbuffers.Offset, excludedHashesOffset:flatbuffers.Offset, numMessages:bigint, rootHashOffset:flatbuffers.Offset):flatbuffers.Offset {
  TrieNodeSnapshotResponse.startTrieNodeSnapshotResponse(builder);
  TrieNodeSnapshotResponse.addPrefix(builder, prefixOffset);
  TrieNodeSnapshotResponse.addExcludedHashes(builder, excludedHashesOffset);
  TrieNodeSnapshotResponse.addNumMessages(builder, numMessages);
  TrieNodeSnapshotResponse.addRootHash(builder, rootHashOffset);
  return TrieNodeSnapshotResponse.endTrieNodeSnapshotResponse(builder);
}
}

export class GetCastRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetCastRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetCastRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastRequest):GetCastRequest {
  return (obj || new GetCastRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetCastRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastRequest):GetCastRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetCastRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

tsHash(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

tsHashLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tsHashArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetCastRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addTsHash(builder:flatbuffers.Builder, tsHashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, tsHashOffset, 0);
}

static createTsHashVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startTsHashVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetCastRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  builder.requiredField(offset, 6) // ts_hash
  return offset;
}

static createGetCastRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset, tsHashOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetCastRequest.startGetCastRequest(builder);
  GetCastRequest.addFid(builder, fidOffset);
  GetCastRequest.addTsHash(builder, tsHashOffset);
  return GetCastRequest.endGetCastRequest(builder);
}
}

export class GetCastsByFidRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetCastsByFidRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetCastsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastsByFidRequest):GetCastsByFidRequest {
  return (obj || new GetCastsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetCastsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastsByFidRequest):GetCastsByFidRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetCastsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetCastsByFidRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetCastsByFidRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetCastsByFidRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetCastsByFidRequest.startGetCastsByFidRequest(builder);
  GetCastsByFidRequest.addFid(builder, fidOffset);
  return GetCastsByFidRequest.endGetCastsByFidRequest(builder);
}
}

export class GetCastsByParentRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetCastsByParentRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetCastsByParentRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastsByParentRequest):GetCastsByParentRequest {
  return (obj || new GetCastsByParentRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetCastsByParentRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastsByParentRequest):GetCastsByParentRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetCastsByParentRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

parent(obj?:CastId):CastId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new CastId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGetCastsByParentRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addParent(builder:flatbuffers.Builder, parentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, parentOffset, 0);
}

static endGetCastsByParentRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // parent
  return offset;
}

static createGetCastsByParentRequest(builder:flatbuffers.Builder, parentOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetCastsByParentRequest.startGetCastsByParentRequest(builder);
  GetCastsByParentRequest.addParent(builder, parentOffset);
  return GetCastsByParentRequest.endGetCastsByParentRequest(builder);
}
}

export class GetCastsByMentionRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetCastsByMentionRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetCastsByMentionRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastsByMentionRequest):GetCastsByMentionRequest {
  return (obj || new GetCastsByMentionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetCastsByMentionRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastsByMentionRequest):GetCastsByMentionRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetCastsByMentionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mention(obj?:UserId):UserId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new UserId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGetCastsByMentionRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMention(builder:flatbuffers.Builder, mentionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, mentionOffset, 0);
}

static endGetCastsByMentionRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // mention
  return offset;
}

static createGetCastsByMentionRequest(builder:flatbuffers.Builder, mentionOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetCastsByMentionRequest.startGetCastsByMentionRequest(builder);
  GetCastsByMentionRequest.addMention(builder, mentionOffset);
  return GetCastsByMentionRequest.endGetCastsByMentionRequest(builder);
}
}

export class GetAmpRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetAmpRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetAmpRequest(bb:flatbuffers.ByteBuffer, obj?:GetAmpRequest):GetAmpRequest {
  return (obj || new GetAmpRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetAmpRequest(bb:flatbuffers.ByteBuffer, obj?:GetAmpRequest):GetAmpRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetAmpRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

user(obj?:UserId):UserId|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new UserId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGetAmpRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addUser(builder:flatbuffers.Builder, userOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, userOffset, 0);
}

static endGetAmpRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  builder.requiredField(offset, 6) // user
  return offset;
}

}

export class GetAmpsByFidRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetAmpsByFidRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetAmpsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetAmpsByFidRequest):GetAmpsByFidRequest {
  return (obj || new GetAmpsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetAmpsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetAmpsByFidRequest):GetAmpsByFidRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetAmpsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetAmpsByFidRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetAmpsByFidRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetAmpsByFidRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetAmpsByFidRequest.startGetAmpsByFidRequest(builder);
  GetAmpsByFidRequest.addFid(builder, fidOffset);
  return GetAmpsByFidRequest.endGetAmpsByFidRequest(builder);
}
}

export class GetAmpsByUserRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetAmpsByUserRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetAmpsByUserRequest(bb:flatbuffers.ByteBuffer, obj?:GetAmpsByUserRequest):GetAmpsByUserRequest {
  return (obj || new GetAmpsByUserRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetAmpsByUserRequest(bb:flatbuffers.ByteBuffer, obj?:GetAmpsByUserRequest):GetAmpsByUserRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetAmpsByUserRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

user(obj?:UserId):UserId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new UserId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGetAmpsByUserRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addUser(builder:flatbuffers.Builder, userOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, userOffset, 0);
}

static endGetAmpsByUserRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // user
  return offset;
}

static createGetAmpsByUserRequest(builder:flatbuffers.Builder, userOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetAmpsByUserRequest.startGetAmpsByUserRequest(builder);
  GetAmpsByUserRequest.addUser(builder, userOffset);
  return GetAmpsByUserRequest.endGetAmpsByUserRequest(builder);
}
}

export class GetReactionRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetReactionRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetReactionRequest(bb:flatbuffers.ByteBuffer, obj?:GetReactionRequest):GetReactionRequest {
  return (obj || new GetReactionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetReactionRequest(bb:flatbuffers.ByteBuffer, obj?:GetReactionRequest):GetReactionRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetReactionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

type():ReactionType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : ReactionType.Like;
}

cast(obj?:CastId):CastId|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new CastId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGetReactionRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addType(builder:flatbuffers.Builder, type:ReactionType) {
  builder.addFieldInt16(1, type, ReactionType.Like);
}

static addCast(builder:flatbuffers.Builder, castOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, castOffset, 0);
}

static endGetReactionRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  builder.requiredField(offset, 8) // cast
  return offset;
}

}

export class GetReactionsByFidRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetReactionsByFidRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetReactionsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetReactionsByFidRequest):GetReactionsByFidRequest {
  return (obj || new GetReactionsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetReactionsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetReactionsByFidRequest):GetReactionsByFidRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetReactionsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

type():ReactionType|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : null;
}

static startGetReactionsByFidRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addType(builder:flatbuffers.Builder, type:ReactionType) {
  builder.addFieldInt16(1, type, 0);
}

static endGetReactionsByFidRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetReactionsByFidRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset, type:ReactionType|null):flatbuffers.Offset {
  GetReactionsByFidRequest.startGetReactionsByFidRequest(builder);
  GetReactionsByFidRequest.addFid(builder, fidOffset);
  if (type !== null)
    GetReactionsByFidRequest.addType(builder, type);
  return GetReactionsByFidRequest.endGetReactionsByFidRequest(builder);
}
}

export class GetReactionsByCastRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetReactionsByCastRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetReactionsByCastRequest(bb:flatbuffers.ByteBuffer, obj?:GetReactionsByCastRequest):GetReactionsByCastRequest {
  return (obj || new GetReactionsByCastRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetReactionsByCastRequest(bb:flatbuffers.ByteBuffer, obj?:GetReactionsByCastRequest):GetReactionsByCastRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetReactionsByCastRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cast(obj?:CastId):CastId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new CastId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

type():ReactionType|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : null;
}

static startGetReactionsByCastRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCast(builder:flatbuffers.Builder, castOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, castOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:ReactionType) {
  builder.addFieldInt16(1, type, 0);
}

static endGetReactionsByCastRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // cast
  return offset;
}

static createGetReactionsByCastRequest(builder:flatbuffers.Builder, castOffset:flatbuffers.Offset, type:ReactionType|null):flatbuffers.Offset {
  GetReactionsByCastRequest.startGetReactionsByCastRequest(builder);
  GetReactionsByCastRequest.addCast(builder, castOffset);
  if (type !== null)
    GetReactionsByCastRequest.addType(builder, type);
  return GetReactionsByCastRequest.endGetReactionsByCastRequest(builder);
}
}

export class GetVerificationRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetVerificationRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetVerificationRequest(bb:flatbuffers.ByteBuffer, obj?:GetVerificationRequest):GetVerificationRequest {
  return (obj || new GetVerificationRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetVerificationRequest(bb:flatbuffers.ByteBuffer, obj?:GetVerificationRequest):GetVerificationRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetVerificationRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

address(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

addressLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

addressArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetVerificationRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addAddress(builder:flatbuffers.Builder, addressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, addressOffset, 0);
}

static createAddressVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startAddressVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetVerificationRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  builder.requiredField(offset, 6) // address
  return offset;
}

static createGetVerificationRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset, addressOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetVerificationRequest.startGetVerificationRequest(builder);
  GetVerificationRequest.addFid(builder, fidOffset);
  GetVerificationRequest.addAddress(builder, addressOffset);
  return GetVerificationRequest.endGetVerificationRequest(builder);
}
}

export class GetVerificationsByFidRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetVerificationsByFidRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetVerificationsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetVerificationsByFidRequest):GetVerificationsByFidRequest {
  return (obj || new GetVerificationsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetVerificationsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetVerificationsByFidRequest):GetVerificationsByFidRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetVerificationsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetVerificationsByFidRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetVerificationsByFidRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetVerificationsByFidRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetVerificationsByFidRequest.startGetVerificationsByFidRequest(builder);
  GetVerificationsByFidRequest.addFid(builder, fidOffset);
  return GetVerificationsByFidRequest.endGetVerificationsByFidRequest(builder);
}
}

export class GetSignerRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetSignerRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetSignerRequest(bb:flatbuffers.ByteBuffer, obj?:GetSignerRequest):GetSignerRequest {
  return (obj || new GetSignerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetSignerRequest(bb:flatbuffers.ByteBuffer, obj?:GetSignerRequest):GetSignerRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetSignerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

signer(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

signerLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

signerArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetSignerRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addSigner(builder:flatbuffers.Builder, signerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, signerOffset, 0);
}

static createSignerVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startSignerVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetSignerRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  builder.requiredField(offset, 6) // signer
  return offset;
}

static createGetSignerRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset, signerOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetSignerRequest.startGetSignerRequest(builder);
  GetSignerRequest.addFid(builder, fidOffset);
  GetSignerRequest.addSigner(builder, signerOffset);
  return GetSignerRequest.endGetSignerRequest(builder);
}
}

export class GetSignersByFidRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetSignersByFidRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetSignersByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetSignersByFidRequest):GetSignersByFidRequest {
  return (obj || new GetSignersByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetSignersByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetSignersByFidRequest):GetSignersByFidRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetSignersByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetSignersByFidRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetSignersByFidRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetSignersByFidRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetSignersByFidRequest.startGetSignersByFidRequest(builder);
  GetSignersByFidRequest.addFid(builder, fidOffset);
  return GetSignersByFidRequest.endGetSignersByFidRequest(builder);
}
}

export class GetCustodyEventRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetCustodyEventRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetCustodyEventRequest(bb:flatbuffers.ByteBuffer, obj?:GetCustodyEventRequest):GetCustodyEventRequest {
  return (obj || new GetCustodyEventRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetCustodyEventRequest(bb:flatbuffers.ByteBuffer, obj?:GetCustodyEventRequest):GetCustodyEventRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetCustodyEventRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetCustodyEventRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetCustodyEventRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetCustodyEventRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetCustodyEventRequest.startGetCustodyEventRequest(builder);
  GetCustodyEventRequest.addFid(builder, fidOffset);
  return GetCustodyEventRequest.endGetCustodyEventRequest(builder);
}
}

export class GetFidsRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetFidsRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetFidsRequest(bb:flatbuffers.ByteBuffer, obj?:GetFidsRequest):GetFidsRequest {
  return (obj || new GetFidsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetFidsRequest(bb:flatbuffers.ByteBuffer, obj?:GetFidsRequest):GetFidsRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetFidsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startGetFidsRequest(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endGetFidsRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetFidsRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  GetFidsRequest.startGetFidsRequest(builder);
  return GetFidsRequest.endGetFidsRequest(builder);
}
}

export class GetUserDataRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetUserDataRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetUserDataRequest(bb:flatbuffers.ByteBuffer, obj?:GetUserDataRequest):GetUserDataRequest {
  return (obj || new GetUserDataRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetUserDataRequest(bb:flatbuffers.ByteBuffer, obj?:GetUserDataRequest):GetUserDataRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetUserDataRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

type():UserDataType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : UserDataType.Pfp;
}

static startGetUserDataRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addType(builder:flatbuffers.Builder, type:UserDataType) {
  builder.addFieldInt16(1, type, UserDataType.Pfp);
}

static endGetUserDataRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetUserDataRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset, type:UserDataType):flatbuffers.Offset {
  GetUserDataRequest.startGetUserDataRequest(builder);
  GetUserDataRequest.addFid(builder, fidOffset);
  GetUserDataRequest.addType(builder, type);
  return GetUserDataRequest.endGetUserDataRequest(builder);
}
}

export class GetUserDataByFidRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetUserDataByFidRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetUserDataByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetUserDataByFidRequest):GetUserDataByFidRequest {
  return (obj || new GetUserDataByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetUserDataByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetUserDataByFidRequest):GetUserDataByFidRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetUserDataByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetUserDataByFidRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetUserDataByFidRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetUserDataByFidRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetUserDataByFidRequest.startGetUserDataByFidRequest(builder);
  GetUserDataByFidRequest.addFid(builder, fidOffset);
  return GetUserDataByFidRequest.endGetUserDataByFidRequest(builder);
}
}

export class GetNameRegistryEventRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetNameRegistryEventRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetNameRegistryEventRequest(bb:flatbuffers.ByteBuffer, obj?:GetNameRegistryEventRequest):GetNameRegistryEventRequest {
  return (obj || new GetNameRegistryEventRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetNameRegistryEventRequest(bb:flatbuffers.ByteBuffer, obj?:GetNameRegistryEventRequest):GetNameRegistryEventRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetNameRegistryEventRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fname(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fnameLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fnameArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetNameRegistryEventRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFname(builder:flatbuffers.Builder, fnameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fnameOffset, 0);
}

static createFnameVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFnameVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetNameRegistryEventRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fname
  return offset;
}

static createGetNameRegistryEventRequest(builder:flatbuffers.Builder, fnameOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetNameRegistryEventRequest.startGetNameRegistryEventRequest(builder);
  GetNameRegistryEventRequest.addFname(builder, fnameOffset);
  return GetNameRegistryEventRequest.endGetNameRegistryEventRequest(builder);
}
}

export class SyncIdHash {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SyncIdHash {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSyncIdHash(bb:flatbuffers.ByteBuffer, obj?:SyncIdHash):SyncIdHash {
  return (obj || new SyncIdHash()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSyncIdHash(bb:flatbuffers.ByteBuffer, obj?:SyncIdHash):SyncIdHash {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SyncIdHash()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

syncIdHash(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

syncIdHashLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

syncIdHashArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startSyncIdHash(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addSyncIdHash(builder:flatbuffers.Builder, syncIdHashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, syncIdHashOffset, 0);
}

static createSyncIdHashVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startSyncIdHashVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endSyncIdHash(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // sync_id_hash
  return offset;
}

static createSyncIdHash(builder:flatbuffers.Builder, syncIdHashOffset:flatbuffers.Offset):flatbuffers.Offset {
  SyncIdHash.startSyncIdHash(builder);
  SyncIdHash.addSyncIdHash(builder, syncIdHashOffset);
  return SyncIdHash.endSyncIdHash(builder);
}
}

export class GetAllMessagesBySyncIdsRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetAllMessagesBySyncIdsRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetAllMessagesBySyncIdsRequest(bb:flatbuffers.ByteBuffer, obj?:GetAllMessagesBySyncIdsRequest):GetAllMessagesBySyncIdsRequest {
  return (obj || new GetAllMessagesBySyncIdsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetAllMessagesBySyncIdsRequest(bb:flatbuffers.ByteBuffer, obj?:GetAllMessagesBySyncIdsRequest):GetAllMessagesBySyncIdsRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetAllMessagesBySyncIdsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

syncIds(index: number, obj?:SyncIdHash):SyncIdHash|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new SyncIdHash()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

syncIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startGetAllMessagesBySyncIdsRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addSyncIds(builder:flatbuffers.Builder, syncIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, syncIdsOffset, 0);
}

static createSyncIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSyncIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endGetAllMessagesBySyncIdsRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // sync_ids
  return offset;
}

static createGetAllMessagesBySyncIdsRequest(builder:flatbuffers.Builder, syncIdsOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetAllMessagesBySyncIdsRequest.startGetAllMessagesBySyncIdsRequest(builder);
  GetAllMessagesBySyncIdsRequest.addSyncIds(builder, syncIdsOffset);
  return GetAllMessagesBySyncIdsRequest.endGetAllMessagesBySyncIdsRequest(builder);
}
}

export class GetAllSyncIdsByPrefixResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetAllSyncIdsByPrefixResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetAllSyncIdsByPrefixResponse(bb:flatbuffers.ByteBuffer, obj?:GetAllSyncIdsByPrefixResponse):GetAllSyncIdsByPrefixResponse {
  return (obj || new GetAllSyncIdsByPrefixResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetAllSyncIdsByPrefixResponse(bb:flatbuffers.ByteBuffer, obj?:GetAllSyncIdsByPrefixResponse):GetAllSyncIdsByPrefixResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetAllSyncIdsByPrefixResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ids(index: number):string
ids(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ids(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

idsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startGetAllSyncIdsByPrefixResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addIds(builder:flatbuffers.Builder, idsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idsOffset, 0);
}

static createIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endGetAllSyncIdsByPrefixResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // ids
  return offset;
}

static createGetAllSyncIdsByPrefixResponse(builder:flatbuffers.Builder, idsOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetAllSyncIdsByPrefixResponse.startGetAllSyncIdsByPrefixResponse(builder);
  GetAllSyncIdsByPrefixResponse.addIds(builder, idsOffset);
  return GetAllSyncIdsByPrefixResponse.endGetAllSyncIdsByPrefixResponse(builder);
}
}

export class GetAllMessagesByFidRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetAllMessagesByFidRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetAllMessagesByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetAllMessagesByFidRequest):GetAllMessagesByFidRequest {
  return (obj || new GetAllMessagesByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetAllMessagesByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetAllMessagesByFidRequest):GetAllMessagesByFidRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetAllMessagesByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetAllMessagesByFidRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetAllMessagesByFidRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetAllMessagesByFidRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetAllMessagesByFidRequest.startGetAllMessagesByFidRequest(builder);
  GetAllMessagesByFidRequest.addFid(builder, fidOffset);
  return GetAllMessagesByFidRequest.endGetAllMessagesByFidRequest(builder);
}
}

export class GetTrieNodesByPrefixRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetTrieNodesByPrefixRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetTrieNodesByPrefixRequest(bb:flatbuffers.ByteBuffer, obj?:GetTrieNodesByPrefixRequest):GetTrieNodesByPrefixRequest {
  return (obj || new GetTrieNodesByPrefixRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetTrieNodesByPrefixRequest(bb:flatbuffers.ByteBuffer, obj?:GetTrieNodesByPrefixRequest):GetTrieNodesByPrefixRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetTrieNodesByPrefixRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

prefix(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

prefixLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

prefixArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetTrieNodesByPrefixRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPrefix(builder:flatbuffers.Builder, prefixOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, prefixOffset, 0);
}

static createPrefixVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startPrefixVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetTrieNodesByPrefixRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // prefix
  return offset;
}

static createGetTrieNodesByPrefixRequest(builder:flatbuffers.Builder, prefixOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetTrieNodesByPrefixRequest.startGetTrieNodesByPrefixRequest(builder);
  GetTrieNodesByPrefixRequest.addPrefix(builder, prefixOffset);
  return GetTrieNodesByPrefixRequest.endGetTrieNodesByPrefixRequest(builder);
}
}

export class SubscribeRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SubscribeRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSubscribeRequest(bb:flatbuffers.ByteBuffer, obj?:SubscribeRequest):SubscribeRequest {
  return (obj || new SubscribeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSubscribeRequest(bb:flatbuffers.ByteBuffer, obj?:SubscribeRequest):SubscribeRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SubscribeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startSubscribeRequest(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endSubscribeRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSubscribeRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  SubscribeRequest.startSubscribeRequest(builder);
  return SubscribeRequest.endSubscribeRequest(builder);
}
}

