// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';


export class HubState implements flatbuffers.IUnpackableObject<HubStateT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HubState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHubState(bb:flatbuffers.ByteBuffer, obj?:HubState):HubState {
  return (obj || new HubState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHubState(bb:flatbuffers.ByteBuffer, obj?:HubState):HubState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HubState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

lastEthBlock():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startHubState(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addLastEthBlock(builder:flatbuffers.Builder, lastEthBlock:bigint) {
  builder.addFieldInt64(0, lastEthBlock, BigInt('0'));
}

static endHubState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishHubStateBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedHubStateBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createHubState(builder:flatbuffers.Builder, lastEthBlock:bigint):flatbuffers.Offset {
  HubState.startHubState(builder);
  HubState.addLastEthBlock(builder, lastEthBlock);
  return HubState.endHubState(builder);
}

unpack(): HubStateT {
  return new HubStateT(
    this.lastEthBlock()
  );
}


unpackTo(_o: HubStateT): void {
  _o.lastEthBlock = this.lastEthBlock();
}
}

export class HubStateT implements flatbuffers.IGeneratedObject {
constructor(
  public lastEthBlock: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return HubState.createHubState(builder,
    this.lastEthBlock
  );
}
}

