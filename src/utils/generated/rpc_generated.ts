// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import {ContractEvent as ContractEvent, ContractEventT as ContractEventT} from './contract_event_generated.js';
import {CastId as CastId, CastIdT as CastIdT, Message as Message, MessageT as MessageT, ReactionType as ReactionType, UserDataType as UserDataType, UserId as UserId, UserIdT as UserIdT} from './message_generated.js';

export enum EventType {
  MergeMessage = 0,
  PruneMessage = 1,
  RevokeMessage = 2,
  MergeContractEvent = 3
}

export class MessagesResponse implements flatbuffers.IUnpackableObject<MessagesResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MessagesResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMessagesResponse(bb:flatbuffers.ByteBuffer, obj?:MessagesResponse):MessagesResponse {
  return (obj || new MessagesResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMessagesResponse(bb:flatbuffers.ByteBuffer, obj?:MessagesResponse):MessagesResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MessagesResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

messages(index: number, obj?:Message):Message|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Message()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

messagesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startMessagesResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMessages(builder:flatbuffers.Builder, messagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, messagesOffset, 0);
}

static createMessagesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMessagesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endMessagesResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMessagesResponse(builder:flatbuffers.Builder, messagesOffset:flatbuffers.Offset):flatbuffers.Offset {
  MessagesResponse.startMessagesResponse(builder);
  MessagesResponse.addMessages(builder, messagesOffset);
  return MessagesResponse.endMessagesResponse(builder);
}

unpack(): MessagesResponseT {
  return new MessagesResponseT(
    this.bb!.createObjList<Message, MessageT>(this.messages.bind(this), this.messagesLength())
  );
}


unpackTo(_o: MessagesResponseT): void {
  _o.messages = this.bb!.createObjList<Message, MessageT>(this.messages.bind(this), this.messagesLength());
}
}

export class MessagesResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public messages: (MessageT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const messages = MessagesResponse.createMessagesVector(builder, builder.createObjectOffsetList(this.messages));

  return MessagesResponse.createMessagesResponse(builder,
    messages
  );
}
}

export class FidsResponse implements flatbuffers.IUnpackableObject<FidsResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FidsResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFidsResponse(bb:flatbuffers.ByteBuffer, obj?:FidsResponse):FidsResponse {
  return (obj || new FidsResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFidsResponse(bb:flatbuffers.ByteBuffer, obj?:FidsResponse):FidsResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FidsResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fids(index: number, obj?:UserId):UserId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new UserId()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

fidsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFidsResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFids(builder:flatbuffers.Builder, fidsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidsOffset, 0);
}

static createFidsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFidsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFidsResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFidsResponse(builder:flatbuffers.Builder, fidsOffset:flatbuffers.Offset):flatbuffers.Offset {
  FidsResponse.startFidsResponse(builder);
  FidsResponse.addFids(builder, fidsOffset);
  return FidsResponse.endFidsResponse(builder);
}

unpack(): FidsResponseT {
  return new FidsResponseT(
    this.bb!.createObjList<UserId, UserIdT>(this.fids.bind(this), this.fidsLength())
  );
}


unpackTo(_o: FidsResponseT): void {
  _o.fids = this.bb!.createObjList<UserId, UserIdT>(this.fids.bind(this), this.fidsLength());
}
}

export class FidsResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public fids: (UserIdT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fids = FidsResponse.createFidsVector(builder, builder.createObjectOffsetList(this.fids));

  return FidsResponse.createFidsResponse(builder,
    fids
  );
}
}

export class EventResponse implements flatbuffers.IUnpackableObject<EventResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EventResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEventResponse(bb:flatbuffers.ByteBuffer, obj?:EventResponse):EventResponse {
  return (obj || new EventResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEventResponse(bb:flatbuffers.ByteBuffer, obj?:EventResponse):EventResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EventResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():EventType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : EventType.MergeMessage;
}

message(obj?:Message):Message|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Message()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

contractEvent(obj?:ContractEvent):ContractEvent|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ContractEvent()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startEventResponse(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addType(builder:flatbuffers.Builder, type:EventType) {
  builder.addFieldInt8(0, type, EventType.MergeMessage);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageOffset, 0);
}

static addContractEvent(builder:flatbuffers.Builder, contractEventOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, contractEventOffset, 0);
}

static endEventResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): EventResponseT {
  return new EventResponseT(
    this.type(),
    (this.message() !== null ? this.message()!.unpack() : null),
    (this.contractEvent() !== null ? this.contractEvent()!.unpack() : null)
  );
}


unpackTo(_o: EventResponseT): void {
  _o.type = this.type();
  _o.message = (this.message() !== null ? this.message()!.unpack() : null);
  _o.contractEvent = (this.contractEvent() !== null ? this.contractEvent()!.unpack() : null);
}
}

export class EventResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public type: EventType = EventType.MergeMessage,
  public message: MessageT|null = null,
  public contractEvent: ContractEventT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const message = (this.message !== null ? this.message!.pack(builder) : 0);
  const contractEvent = (this.contractEvent !== null ? this.contractEvent!.pack(builder) : 0);

  EventResponse.startEventResponse(builder);
  EventResponse.addType(builder, this.type);
  EventResponse.addMessage(builder, message);
  EventResponse.addContractEvent(builder, contractEvent);

  return EventResponse.endEventResponse(builder);
}
}

export class GetCastRequest implements flatbuffers.IUnpackableObject<GetCastRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetCastRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetCastRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastRequest):GetCastRequest {
  return (obj || new GetCastRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetCastRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastRequest):GetCastRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetCastRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

tsHash(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

tsHashLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tsHashArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetCastRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addTsHash(builder:flatbuffers.Builder, tsHashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, tsHashOffset, 0);
}

static createTsHashVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startTsHashVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetCastRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  builder.requiredField(offset, 6) // ts_hash
  return offset;
}

static createGetCastRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset, tsHashOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetCastRequest.startGetCastRequest(builder);
  GetCastRequest.addFid(builder, fidOffset);
  GetCastRequest.addTsHash(builder, tsHashOffset);
  return GetCastRequest.endGetCastRequest(builder);
}

unpack(): GetCastRequestT {
  return new GetCastRequestT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength()),
    this.bb!.createScalarList<number>(this.tsHash.bind(this), this.tsHashLength())
  );
}


unpackTo(_o: GetCastRequestT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
  _o.tsHash = this.bb!.createScalarList<number>(this.tsHash.bind(this), this.tsHashLength());
}
}

export class GetCastRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = [],
  public tsHash: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetCastRequest.createFidVector(builder, this.fid);
  const tsHash = GetCastRequest.createTsHashVector(builder, this.tsHash);

  return GetCastRequest.createGetCastRequest(builder,
    fid,
    tsHash
  );
}
}

export class GetCastsByFidRequest implements flatbuffers.IUnpackableObject<GetCastsByFidRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetCastsByFidRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetCastsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastsByFidRequest):GetCastsByFidRequest {
  return (obj || new GetCastsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetCastsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastsByFidRequest):GetCastsByFidRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetCastsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetCastsByFidRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetCastsByFidRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetCastsByFidRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetCastsByFidRequest.startGetCastsByFidRequest(builder);
  GetCastsByFidRequest.addFid(builder, fidOffset);
  return GetCastsByFidRequest.endGetCastsByFidRequest(builder);
}

unpack(): GetCastsByFidRequestT {
  return new GetCastsByFidRequestT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength())
  );
}


unpackTo(_o: GetCastsByFidRequestT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
}
}

export class GetCastsByFidRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetCastsByFidRequest.createFidVector(builder, this.fid);

  return GetCastsByFidRequest.createGetCastsByFidRequest(builder,
    fid
  );
}
}

export class GetCastsByParentRequest implements flatbuffers.IUnpackableObject<GetCastsByParentRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetCastsByParentRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetCastsByParentRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastsByParentRequest):GetCastsByParentRequest {
  return (obj || new GetCastsByParentRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetCastsByParentRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastsByParentRequest):GetCastsByParentRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetCastsByParentRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

parent(obj?:CastId):CastId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new CastId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGetCastsByParentRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addParent(builder:flatbuffers.Builder, parentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, parentOffset, 0);
}

static endGetCastsByParentRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // parent
  return offset;
}

static createGetCastsByParentRequest(builder:flatbuffers.Builder, parentOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetCastsByParentRequest.startGetCastsByParentRequest(builder);
  GetCastsByParentRequest.addParent(builder, parentOffset);
  return GetCastsByParentRequest.endGetCastsByParentRequest(builder);
}

unpack(): GetCastsByParentRequestT {
  return new GetCastsByParentRequestT(
    (this.parent() !== null ? this.parent()!.unpack() : null)
  );
}


unpackTo(_o: GetCastsByParentRequestT): void {
  _o.parent = (this.parent() !== null ? this.parent()!.unpack() : null);
}
}

export class GetCastsByParentRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public parent: CastIdT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const parent = (this.parent !== null ? this.parent!.pack(builder) : 0);

  return GetCastsByParentRequest.createGetCastsByParentRequest(builder,
    parent
  );
}
}

export class GetCastsByMentionRequest implements flatbuffers.IUnpackableObject<GetCastsByMentionRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetCastsByMentionRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetCastsByMentionRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastsByMentionRequest):GetCastsByMentionRequest {
  return (obj || new GetCastsByMentionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetCastsByMentionRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastsByMentionRequest):GetCastsByMentionRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetCastsByMentionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mention(obj?:UserId):UserId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new UserId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGetCastsByMentionRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMention(builder:flatbuffers.Builder, mentionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, mentionOffset, 0);
}

static endGetCastsByMentionRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // mention
  return offset;
}

static createGetCastsByMentionRequest(builder:flatbuffers.Builder, mentionOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetCastsByMentionRequest.startGetCastsByMentionRequest(builder);
  GetCastsByMentionRequest.addMention(builder, mentionOffset);
  return GetCastsByMentionRequest.endGetCastsByMentionRequest(builder);
}

unpack(): GetCastsByMentionRequestT {
  return new GetCastsByMentionRequestT(
    (this.mention() !== null ? this.mention()!.unpack() : null)
  );
}


unpackTo(_o: GetCastsByMentionRequestT): void {
  _o.mention = (this.mention() !== null ? this.mention()!.unpack() : null);
}
}

export class GetCastsByMentionRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public mention: UserIdT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const mention = (this.mention !== null ? this.mention!.pack(builder) : 0);

  return GetCastsByMentionRequest.createGetCastsByMentionRequest(builder,
    mention
  );
}
}

export class GetFollowRequest implements flatbuffers.IUnpackableObject<GetFollowRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetFollowRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetFollowRequest(bb:flatbuffers.ByteBuffer, obj?:GetFollowRequest):GetFollowRequest {
  return (obj || new GetFollowRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetFollowRequest(bb:flatbuffers.ByteBuffer, obj?:GetFollowRequest):GetFollowRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetFollowRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

user(obj?:UserId):UserId|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new UserId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGetFollowRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addUser(builder:flatbuffers.Builder, userOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, userOffset, 0);
}

static endGetFollowRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  builder.requiredField(offset, 6) // user
  return offset;
}


unpack(): GetFollowRequestT {
  return new GetFollowRequestT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength()),
    (this.user() !== null ? this.user()!.unpack() : null)
  );
}


unpackTo(_o: GetFollowRequestT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
  _o.user = (this.user() !== null ? this.user()!.unpack() : null);
}
}

export class GetFollowRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = [],
  public user: UserIdT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetFollowRequest.createFidVector(builder, this.fid);
  const user = (this.user !== null ? this.user!.pack(builder) : 0);

  GetFollowRequest.startGetFollowRequest(builder);
  GetFollowRequest.addFid(builder, fid);
  GetFollowRequest.addUser(builder, user);

  return GetFollowRequest.endGetFollowRequest(builder);
}
}

export class GetFollowsByFidRequest implements flatbuffers.IUnpackableObject<GetFollowsByFidRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetFollowsByFidRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetFollowsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetFollowsByFidRequest):GetFollowsByFidRequest {
  return (obj || new GetFollowsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetFollowsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetFollowsByFidRequest):GetFollowsByFidRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetFollowsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetFollowsByFidRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetFollowsByFidRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetFollowsByFidRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetFollowsByFidRequest.startGetFollowsByFidRequest(builder);
  GetFollowsByFidRequest.addFid(builder, fidOffset);
  return GetFollowsByFidRequest.endGetFollowsByFidRequest(builder);
}

unpack(): GetFollowsByFidRequestT {
  return new GetFollowsByFidRequestT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength())
  );
}


unpackTo(_o: GetFollowsByFidRequestT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
}
}

export class GetFollowsByFidRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetFollowsByFidRequest.createFidVector(builder, this.fid);

  return GetFollowsByFidRequest.createGetFollowsByFidRequest(builder,
    fid
  );
}
}

export class GetFollowsByUserRequest implements flatbuffers.IUnpackableObject<GetFollowsByUserRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetFollowsByUserRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetFollowsByUserRequest(bb:flatbuffers.ByteBuffer, obj?:GetFollowsByUserRequest):GetFollowsByUserRequest {
  return (obj || new GetFollowsByUserRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetFollowsByUserRequest(bb:flatbuffers.ByteBuffer, obj?:GetFollowsByUserRequest):GetFollowsByUserRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetFollowsByUserRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

user(obj?:UserId):UserId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new UserId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGetFollowsByUserRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addUser(builder:flatbuffers.Builder, userOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, userOffset, 0);
}

static endGetFollowsByUserRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // user
  return offset;
}

static createGetFollowsByUserRequest(builder:flatbuffers.Builder, userOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetFollowsByUserRequest.startGetFollowsByUserRequest(builder);
  GetFollowsByUserRequest.addUser(builder, userOffset);
  return GetFollowsByUserRequest.endGetFollowsByUserRequest(builder);
}

unpack(): GetFollowsByUserRequestT {
  return new GetFollowsByUserRequestT(
    (this.user() !== null ? this.user()!.unpack() : null)
  );
}


unpackTo(_o: GetFollowsByUserRequestT): void {
  _o.user = (this.user() !== null ? this.user()!.unpack() : null);
}
}

export class GetFollowsByUserRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public user: UserIdT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const user = (this.user !== null ? this.user!.pack(builder) : 0);

  return GetFollowsByUserRequest.createGetFollowsByUserRequest(builder,
    user
  );
}
}

export class GetReactionRequest implements flatbuffers.IUnpackableObject<GetReactionRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetReactionRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetReactionRequest(bb:flatbuffers.ByteBuffer, obj?:GetReactionRequest):GetReactionRequest {
  return (obj || new GetReactionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetReactionRequest(bb:flatbuffers.ByteBuffer, obj?:GetReactionRequest):GetReactionRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetReactionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

type():ReactionType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : ReactionType.Like;
}

cast(obj?:CastId):CastId|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new CastId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGetReactionRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addType(builder:flatbuffers.Builder, type:ReactionType) {
  builder.addFieldInt16(1, type, ReactionType.Like);
}

static addCast(builder:flatbuffers.Builder, castOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, castOffset, 0);
}

static endGetReactionRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  builder.requiredField(offset, 8) // cast
  return offset;
}


unpack(): GetReactionRequestT {
  return new GetReactionRequestT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength()),
    this.type(),
    (this.cast() !== null ? this.cast()!.unpack() : null)
  );
}


unpackTo(_o: GetReactionRequestT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
  _o.type = this.type();
  _o.cast = (this.cast() !== null ? this.cast()!.unpack() : null);
}
}

export class GetReactionRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = [],
  public type: ReactionType = ReactionType.Like,
  public cast: CastIdT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetReactionRequest.createFidVector(builder, this.fid);
  const cast = (this.cast !== null ? this.cast!.pack(builder) : 0);

  GetReactionRequest.startGetReactionRequest(builder);
  GetReactionRequest.addFid(builder, fid);
  GetReactionRequest.addType(builder, this.type);
  GetReactionRequest.addCast(builder, cast);

  return GetReactionRequest.endGetReactionRequest(builder);
}
}

export class GetReactionsByFidRequest implements flatbuffers.IUnpackableObject<GetReactionsByFidRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetReactionsByFidRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetReactionsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetReactionsByFidRequest):GetReactionsByFidRequest {
  return (obj || new GetReactionsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetReactionsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetReactionsByFidRequest):GetReactionsByFidRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetReactionsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

type():ReactionType|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : null;
}

static startGetReactionsByFidRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addType(builder:flatbuffers.Builder, type:ReactionType) {
  builder.addFieldInt16(1, type, 0);
}

static endGetReactionsByFidRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetReactionsByFidRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset, type:ReactionType|null):flatbuffers.Offset {
  GetReactionsByFidRequest.startGetReactionsByFidRequest(builder);
  GetReactionsByFidRequest.addFid(builder, fidOffset);
  if (type !== null)
    GetReactionsByFidRequest.addType(builder, type);
  return GetReactionsByFidRequest.endGetReactionsByFidRequest(builder);
}

unpack(): GetReactionsByFidRequestT {
  return new GetReactionsByFidRequestT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength()),
    this.type()
  );
}


unpackTo(_o: GetReactionsByFidRequestT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
  _o.type = this.type();
}
}

export class GetReactionsByFidRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = [],
  public type: ReactionType|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetReactionsByFidRequest.createFidVector(builder, this.fid);

  return GetReactionsByFidRequest.createGetReactionsByFidRequest(builder,
    fid,
    this.type
  );
}
}

export class GetReactionsByCastRequest implements flatbuffers.IUnpackableObject<GetReactionsByCastRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetReactionsByCastRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetReactionsByCastRequest(bb:flatbuffers.ByteBuffer, obj?:GetReactionsByCastRequest):GetReactionsByCastRequest {
  return (obj || new GetReactionsByCastRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetReactionsByCastRequest(bb:flatbuffers.ByteBuffer, obj?:GetReactionsByCastRequest):GetReactionsByCastRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetReactionsByCastRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cast(obj?:CastId):CastId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new CastId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

type():ReactionType|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : null;
}

static startGetReactionsByCastRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCast(builder:flatbuffers.Builder, castOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, castOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:ReactionType) {
  builder.addFieldInt16(1, type, 0);
}

static endGetReactionsByCastRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // cast
  return offset;
}

static createGetReactionsByCastRequest(builder:flatbuffers.Builder, castOffset:flatbuffers.Offset, type:ReactionType|null):flatbuffers.Offset {
  GetReactionsByCastRequest.startGetReactionsByCastRequest(builder);
  GetReactionsByCastRequest.addCast(builder, castOffset);
  if (type !== null)
    GetReactionsByCastRequest.addType(builder, type);
  return GetReactionsByCastRequest.endGetReactionsByCastRequest(builder);
}

unpack(): GetReactionsByCastRequestT {
  return new GetReactionsByCastRequestT(
    (this.cast() !== null ? this.cast()!.unpack() : null),
    this.type()
  );
}


unpackTo(_o: GetReactionsByCastRequestT): void {
  _o.cast = (this.cast() !== null ? this.cast()!.unpack() : null);
  _o.type = this.type();
}
}

export class GetReactionsByCastRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public cast: CastIdT|null = null,
  public type: ReactionType|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const cast = (this.cast !== null ? this.cast!.pack(builder) : 0);

  return GetReactionsByCastRequest.createGetReactionsByCastRequest(builder,
    cast,
    this.type
  );
}
}

export class GetVerificationRequest implements flatbuffers.IUnpackableObject<GetVerificationRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetVerificationRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetVerificationRequest(bb:flatbuffers.ByteBuffer, obj?:GetVerificationRequest):GetVerificationRequest {
  return (obj || new GetVerificationRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetVerificationRequest(bb:flatbuffers.ByteBuffer, obj?:GetVerificationRequest):GetVerificationRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetVerificationRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

address(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

addressLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

addressArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetVerificationRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addAddress(builder:flatbuffers.Builder, addressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, addressOffset, 0);
}

static createAddressVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startAddressVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetVerificationRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  builder.requiredField(offset, 6) // address
  return offset;
}

static createGetVerificationRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset, addressOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetVerificationRequest.startGetVerificationRequest(builder);
  GetVerificationRequest.addFid(builder, fidOffset);
  GetVerificationRequest.addAddress(builder, addressOffset);
  return GetVerificationRequest.endGetVerificationRequest(builder);
}

unpack(): GetVerificationRequestT {
  return new GetVerificationRequestT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength()),
    this.bb!.createScalarList<number>(this.address.bind(this), this.addressLength())
  );
}


unpackTo(_o: GetVerificationRequestT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
  _o.address = this.bb!.createScalarList<number>(this.address.bind(this), this.addressLength());
}
}

export class GetVerificationRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = [],
  public address: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetVerificationRequest.createFidVector(builder, this.fid);
  const address = GetVerificationRequest.createAddressVector(builder, this.address);

  return GetVerificationRequest.createGetVerificationRequest(builder,
    fid,
    address
  );
}
}

export class GetVerificationsByFidRequest implements flatbuffers.IUnpackableObject<GetVerificationsByFidRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetVerificationsByFidRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetVerificationsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetVerificationsByFidRequest):GetVerificationsByFidRequest {
  return (obj || new GetVerificationsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetVerificationsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetVerificationsByFidRequest):GetVerificationsByFidRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetVerificationsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetVerificationsByFidRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetVerificationsByFidRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetVerificationsByFidRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetVerificationsByFidRequest.startGetVerificationsByFidRequest(builder);
  GetVerificationsByFidRequest.addFid(builder, fidOffset);
  return GetVerificationsByFidRequest.endGetVerificationsByFidRequest(builder);
}

unpack(): GetVerificationsByFidRequestT {
  return new GetVerificationsByFidRequestT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength())
  );
}


unpackTo(_o: GetVerificationsByFidRequestT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
}
}

export class GetVerificationsByFidRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetVerificationsByFidRequest.createFidVector(builder, this.fid);

  return GetVerificationsByFidRequest.createGetVerificationsByFidRequest(builder,
    fid
  );
}
}

export class GetSignerRequest implements flatbuffers.IUnpackableObject<GetSignerRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetSignerRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetSignerRequest(bb:flatbuffers.ByteBuffer, obj?:GetSignerRequest):GetSignerRequest {
  return (obj || new GetSignerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetSignerRequest(bb:flatbuffers.ByteBuffer, obj?:GetSignerRequest):GetSignerRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetSignerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

signer(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

signerLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

signerArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetSignerRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addSigner(builder:flatbuffers.Builder, signerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, signerOffset, 0);
}

static createSignerVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startSignerVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetSignerRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  builder.requiredField(offset, 6) // signer
  return offset;
}

static createGetSignerRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset, signerOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetSignerRequest.startGetSignerRequest(builder);
  GetSignerRequest.addFid(builder, fidOffset);
  GetSignerRequest.addSigner(builder, signerOffset);
  return GetSignerRequest.endGetSignerRequest(builder);
}

unpack(): GetSignerRequestT {
  return new GetSignerRequestT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength()),
    this.bb!.createScalarList<number>(this.signer.bind(this), this.signerLength())
  );
}


unpackTo(_o: GetSignerRequestT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
  _o.signer = this.bb!.createScalarList<number>(this.signer.bind(this), this.signerLength());
}
}

export class GetSignerRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = [],
  public signer: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetSignerRequest.createFidVector(builder, this.fid);
  const signer = GetSignerRequest.createSignerVector(builder, this.signer);

  return GetSignerRequest.createGetSignerRequest(builder,
    fid,
    signer
  );
}
}

export class GetSignersByFidRequest implements flatbuffers.IUnpackableObject<GetSignersByFidRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetSignersByFidRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetSignersByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetSignersByFidRequest):GetSignersByFidRequest {
  return (obj || new GetSignersByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetSignersByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetSignersByFidRequest):GetSignersByFidRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetSignersByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetSignersByFidRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetSignersByFidRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetSignersByFidRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetSignersByFidRequest.startGetSignersByFidRequest(builder);
  GetSignersByFidRequest.addFid(builder, fidOffset);
  return GetSignersByFidRequest.endGetSignersByFidRequest(builder);
}

unpack(): GetSignersByFidRequestT {
  return new GetSignersByFidRequestT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength())
  );
}


unpackTo(_o: GetSignersByFidRequestT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
}
}

export class GetSignersByFidRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetSignersByFidRequest.createFidVector(builder, this.fid);

  return GetSignersByFidRequest.createGetSignersByFidRequest(builder,
    fid
  );
}
}

export class GetCustodyEventRequest implements flatbuffers.IUnpackableObject<GetCustodyEventRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetCustodyEventRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetCustodyEventRequest(bb:flatbuffers.ByteBuffer, obj?:GetCustodyEventRequest):GetCustodyEventRequest {
  return (obj || new GetCustodyEventRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetCustodyEventRequest(bb:flatbuffers.ByteBuffer, obj?:GetCustodyEventRequest):GetCustodyEventRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetCustodyEventRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetCustodyEventRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetCustodyEventRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetCustodyEventRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetCustodyEventRequest.startGetCustodyEventRequest(builder);
  GetCustodyEventRequest.addFid(builder, fidOffset);
  return GetCustodyEventRequest.endGetCustodyEventRequest(builder);
}

unpack(): GetCustodyEventRequestT {
  return new GetCustodyEventRequestT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength())
  );
}


unpackTo(_o: GetCustodyEventRequestT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
}
}

export class GetCustodyEventRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetCustodyEventRequest.createFidVector(builder, this.fid);

  return GetCustodyEventRequest.createGetCustodyEventRequest(builder,
    fid
  );
}
}

export class GetFidsRequest implements flatbuffers.IUnpackableObject<GetFidsRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetFidsRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetFidsRequest(bb:flatbuffers.ByteBuffer, obj?:GetFidsRequest):GetFidsRequest {
  return (obj || new GetFidsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetFidsRequest(bb:flatbuffers.ByteBuffer, obj?:GetFidsRequest):GetFidsRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetFidsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startGetFidsRequest(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endGetFidsRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetFidsRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  GetFidsRequest.startGetFidsRequest(builder);
  return GetFidsRequest.endGetFidsRequest(builder);
}

unpack(): GetFidsRequestT {
  return new GetFidsRequestT();
}


unpackTo(_o: GetFidsRequestT): void {}
}

export class GetFidsRequestT implements flatbuffers.IGeneratedObject {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return GetFidsRequest.createGetFidsRequest(builder);
}
}

export class GetUserDataRequest implements flatbuffers.IUnpackableObject<GetUserDataRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetUserDataRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetUserDataRequest(bb:flatbuffers.ByteBuffer, obj?:GetUserDataRequest):GetUserDataRequest {
  return (obj || new GetUserDataRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetUserDataRequest(bb:flatbuffers.ByteBuffer, obj?:GetUserDataRequest):GetUserDataRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetUserDataRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

type():UserDataType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : UserDataType.Pfp;
}

static startGetUserDataRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addType(builder:flatbuffers.Builder, type:UserDataType) {
  builder.addFieldInt16(1, type, UserDataType.Pfp);
}

static endGetUserDataRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetUserDataRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset, type:UserDataType):flatbuffers.Offset {
  GetUserDataRequest.startGetUserDataRequest(builder);
  GetUserDataRequest.addFid(builder, fidOffset);
  GetUserDataRequest.addType(builder, type);
  return GetUserDataRequest.endGetUserDataRequest(builder);
}

unpack(): GetUserDataRequestT {
  return new GetUserDataRequestT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength()),
    this.type()
  );
}


unpackTo(_o: GetUserDataRequestT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
  _o.type = this.type();
}
}

export class GetUserDataRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = [],
  public type: UserDataType = UserDataType.Pfp
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetUserDataRequest.createFidVector(builder, this.fid);

  return GetUserDataRequest.createGetUserDataRequest(builder,
    fid,
    this.type
  );
}
}

export class GetUserDataByFidRequest implements flatbuffers.IUnpackableObject<GetUserDataByFidRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetUserDataByFidRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetUserDataByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetUserDataByFidRequest):GetUserDataByFidRequest {
  return (obj || new GetUserDataByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetUserDataByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetUserDataByFidRequest):GetUserDataByFidRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetUserDataByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetUserDataByFidRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetUserDataByFidRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetUserDataByFidRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetUserDataByFidRequest.startGetUserDataByFidRequest(builder);
  GetUserDataByFidRequest.addFid(builder, fidOffset);
  return GetUserDataByFidRequest.endGetUserDataByFidRequest(builder);
}

unpack(): GetUserDataByFidRequestT {
  return new GetUserDataByFidRequestT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength())
  );
}


unpackTo(_o: GetUserDataByFidRequestT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
}
}

export class GetUserDataByFidRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetUserDataByFidRequest.createFidVector(builder, this.fid);

  return GetUserDataByFidRequest.createGetUserDataByFidRequest(builder,
    fid
  );
}
}

export class GetUserNameRequest implements flatbuffers.IUnpackableObject<GetUserNameRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetUserNameRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetUserNameRequest(bb:flatbuffers.ByteBuffer, obj?:GetUserNameRequest):GetUserNameRequest {
  return (obj || new GetUserNameRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetUserNameRequest(bb:flatbuffers.ByteBuffer, obj?:GetUserNameRequest):GetUserNameRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetUserNameRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetUserNameRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetUserNameRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetUserNameRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetUserNameRequest.startGetUserNameRequest(builder);
  GetUserNameRequest.addFid(builder, fidOffset);
  return GetUserNameRequest.endGetUserNameRequest(builder);
}

unpack(): GetUserNameRequestT {
  return new GetUserNameRequestT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength())
  );
}


unpackTo(_o: GetUserNameRequestT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
}
}

export class GetUserNameRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetUserNameRequest.createFidVector(builder, this.fid);

  return GetUserNameRequest.createGetUserNameRequest(builder,
    fid
  );
}
}

export class GetAllMessagesByFidRequest implements flatbuffers.IUnpackableObject<GetAllMessagesByFidRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetAllMessagesByFidRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetAllMessagesByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetAllMessagesByFidRequest):GetAllMessagesByFidRequest {
  return (obj || new GetAllMessagesByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetAllMessagesByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetAllMessagesByFidRequest):GetAllMessagesByFidRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetAllMessagesByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetAllMessagesByFidRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetAllMessagesByFidRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetAllMessagesByFidRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetAllMessagesByFidRequest.startGetAllMessagesByFidRequest(builder);
  GetAllMessagesByFidRequest.addFid(builder, fidOffset);
  return GetAllMessagesByFidRequest.endGetAllMessagesByFidRequest(builder);
}

unpack(): GetAllMessagesByFidRequestT {
  return new GetAllMessagesByFidRequestT(
    this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength())
  );
}


unpackTo(_o: GetAllMessagesByFidRequestT): void {
  _o.fid = this.bb!.createScalarList<number>(this.fid.bind(this), this.fidLength());
}
}

export class GetAllMessagesByFidRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public fid: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetAllMessagesByFidRequest.createFidVector(builder, this.fid);

  return GetAllMessagesByFidRequest.createGetAllMessagesByFidRequest(builder,
    fid
  );
}
}

export class SubscribeRequest implements flatbuffers.IUnpackableObject<SubscribeRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SubscribeRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSubscribeRequest(bb:flatbuffers.ByteBuffer, obj?:SubscribeRequest):SubscribeRequest {
  return (obj || new SubscribeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSubscribeRequest(bb:flatbuffers.ByteBuffer, obj?:SubscribeRequest):SubscribeRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SubscribeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startSubscribeRequest(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endSubscribeRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSubscribeRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  SubscribeRequest.startSubscribeRequest(builder);
  return SubscribeRequest.endSubscribeRequest(builder);
}

unpack(): SubscribeRequestT {
  return new SubscribeRequestT();
}


unpackTo(_o: SubscribeRequestT): void {}
}

export class SubscribeRequestT implements flatbuffers.IGeneratedObject {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SubscribeRequest.createSubscribeRequest(builder);
}
}

