// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class GossipAddressInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GossipAddressInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGossipAddressInfo(bb:flatbuffers.ByteBuffer, obj?:GossipAddressInfo):GossipAddressInfo {
  return (obj || new GossipAddressInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGossipAddressInfo(bb:flatbuffers.ByteBuffer, obj?:GossipAddressInfo):GossipAddressInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GossipAddressInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

address():string|null
address(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
address(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

family():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

port():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startGossipAddressInfo(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addAddress(builder:flatbuffers.Builder, addressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, addressOffset, 0);
}

static addFamily(builder:flatbuffers.Builder, family:number) {
  builder.addFieldInt8(1, family, 0);
}

static addPort(builder:flatbuffers.Builder, port:number) {
  builder.addFieldInt16(2, port, 0);
}

static endGossipAddressInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // address
  return offset;
}

static createGossipAddressInfo(builder:flatbuffers.Builder, addressOffset:flatbuffers.Offset, family:number, port:number):flatbuffers.Offset {
  GossipAddressInfo.startGossipAddressInfo(builder);
  GossipAddressInfo.addAddress(builder, addressOffset);
  GossipAddressInfo.addFamily(builder, family);
  GossipAddressInfo.addPort(builder, port);
  return GossipAddressInfo.endGossipAddressInfo(builder);
}

unpack(): GossipAddressInfoT {
  return new GossipAddressInfoT(
    this.address(),
    this.family(),
    this.port()
  );
}


unpackTo(_o: GossipAddressInfoT): void {
  _o.address = this.address();
  _o.family = this.family();
  _o.port = this.port();
}
}

export class GossipAddressInfoT {
constructor(
  public address: string|Uint8Array|null = null,
  public family: number = 0,
  public port: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const address = (this.address !== null ? builder.createString(this.address!) : 0);

  return GossipAddressInfo.createGossipAddressInfo(builder,
    address,
    this.family,
    this.port
  );
}
}
