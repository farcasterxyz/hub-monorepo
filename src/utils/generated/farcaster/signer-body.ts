// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class SignerBody {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SignerBody {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSignerBody(bb:flatbuffers.ByteBuffer, obj?:SignerBody):SignerBody {
  return (obj || new SignerBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSignerBody(bb:flatbuffers.ByteBuffer, obj?:SignerBody):SignerBody {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SignerBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

signer(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

signerLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

signerArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startSignerBody(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addSigner(builder:flatbuffers.Builder, signerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, signerOffset, 0);
}

static createSignerVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startSignerVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endSignerBody(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // signer
  return offset;
}

static createSignerBody(builder:flatbuffers.Builder, signerOffset:flatbuffers.Offset):flatbuffers.Offset {
  SignerBody.startSignerBody(builder);
  SignerBody.addSigner(builder, signerOffset);
  return SignerBody.endSignerBody(builder);
}

unpack(): SignerBodyT {
  return new SignerBodyT(
    this.bb!.createScalarList(this.signer.bind(this), this.signerLength())
  );
}


unpackTo(_o: SignerBodyT): void {
  _o.signer = this.bb!.createScalarList(this.signer.bind(this), this.signerLength());
}
}

export class SignerBodyT {
constructor(
  public signer: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const signer = SignerBody.createSignerVector(builder, this.signer);

  return SignerBody.createSignerBody(builder,
    signer
  );
}
}
