// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CastID, CastIDT } from '../farcaster/cast-id';
import { ReactionType } from '../farcaster/reaction-type';


export class ReactionBody {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ReactionBody {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsReactionBody(bb:flatbuffers.ByteBuffer, obj?:ReactionBody):ReactionBody {
  return (obj || new ReactionBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsReactionBody(bb:flatbuffers.ByteBuffer, obj?:ReactionBody):ReactionBody {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ReactionBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cast(obj?:CastID):CastID|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new CastID()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

type():ReactionType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : ReactionType.Like;
}

static startReactionBody(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCast(builder:flatbuffers.Builder, castOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, castOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:ReactionType) {
  builder.addFieldInt16(1, type, ReactionType.Like);
}

static endReactionBody(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // cast
  return offset;
}

static createReactionBody(builder:flatbuffers.Builder, castOffset:flatbuffers.Offset, type:ReactionType):flatbuffers.Offset {
  ReactionBody.startReactionBody(builder);
  ReactionBody.addCast(builder, castOffset);
  ReactionBody.addType(builder, type);
  return ReactionBody.endReactionBody(builder);
}

unpack(): ReactionBodyT {
  return new ReactionBodyT(
    (this.cast() !== null ? this.cast()!.unpack() : null),
    this.type()
  );
}


unpackTo(_o: ReactionBodyT): void {
  _o.cast = (this.cast() !== null ? this.cast()!.unpack() : null);
  _o.type = this.type();
}
}

export class ReactionBodyT {
constructor(
  public cast: CastIDT|null = null,
  public type: ReactionType = ReactionType.Like
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const cast = (this.cast !== null ? this.cast!.pack(builder) : 0);

  return ReactionBody.createReactionBody(builder,
    cast,
    this.type
  );
}
}
