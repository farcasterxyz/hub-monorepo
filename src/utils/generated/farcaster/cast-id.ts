// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class CastId {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CastId {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCastId(bb:flatbuffers.ByteBuffer, obj?:CastId):CastId {
  return (obj || new CastId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCastId(bb:flatbuffers.ByteBuffer, obj?:CastId):CastId {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CastId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

tsHash(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

tsHashLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tsHashArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startCastId(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addTsHash(builder:flatbuffers.Builder, tsHashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, tsHashOffset, 0);
}

static createTsHashVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startTsHashVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endCastId(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  builder.requiredField(offset, 6) // ts_hash
  return offset;
}

static createCastId(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset, tsHashOffset:flatbuffers.Offset):flatbuffers.Offset {
  CastId.startCastId(builder);
  CastId.addFid(builder, fidOffset);
  CastId.addTsHash(builder, tsHashOffset);
  return CastId.endCastId(builder);
}

unpack(): CastIdT {
  return new CastIdT(
    this.bb!.createScalarList(this.fid.bind(this), this.fidLength()),
    this.bb!.createScalarList(this.tsHash.bind(this), this.tsHashLength())
  );
}


unpackTo(_o: CastIdT): void {
  _o.fid = this.bb!.createScalarList(this.fid.bind(this), this.fidLength());
  _o.tsHash = this.bb!.createScalarList(this.tsHash.bind(this), this.tsHashLength());
}
}

export class CastIdT {
constructor(
  public fid: (number)[] = [],
  public tsHash: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = CastId.createFidVector(builder, this.fid);
  const tsHash = CastId.createTsHashVector(builder, this.tsHash);

  return CastId.createCastId(builder,
    fid,
    tsHash
  );
}
}
