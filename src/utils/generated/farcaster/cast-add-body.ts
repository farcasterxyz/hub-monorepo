// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CastID, CastIDT } from '../farcaster/cast-id';
import { UserID, UserIDT } from '../farcaster/user-id';


export class CastAddBody {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CastAddBody {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCastAddBody(bb:flatbuffers.ByteBuffer, obj?:CastAddBody):CastAddBody {
  return (obj || new CastAddBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCastAddBody(bb:flatbuffers.ByteBuffer, obj?:CastAddBody):CastAddBody {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CastAddBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

embeds(index: number):string
embeds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
embeds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

embedsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mentions(index: number, obj?:UserID):UserID|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new UserID()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mentionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

parent(obj?:CastID):CastID|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new CastID()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startCastAddBody(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addEmbeds(builder:flatbuffers.Builder, embedsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, embedsOffset, 0);
}

static createEmbedsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEmbedsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMentions(builder:flatbuffers.Builder, mentionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, mentionsOffset, 0);
}

static createMentionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMentionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addParent(builder:flatbuffers.Builder, parentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, parentOffset, 0);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, textOffset, 0);
}

static endCastAddBody(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 10) // text
  return offset;
}


unpack(): CastAddBodyT {
  return new CastAddBodyT(
    this.bb!.createScalarList(this.embeds.bind(this), this.embedsLength()),
    this.bb!.createObjList(this.mentions.bind(this), this.mentionsLength()),
    (this.parent() !== null ? this.parent()!.unpack() : null),
    this.text()
  );
}


unpackTo(_o: CastAddBodyT): void {
  _o.embeds = this.bb!.createScalarList(this.embeds.bind(this), this.embedsLength());
  _o.mentions = this.bb!.createObjList(this.mentions.bind(this), this.mentionsLength());
  _o.parent = (this.parent() !== null ? this.parent()!.unpack() : null);
  _o.text = this.text();
}
}

export class CastAddBodyT {
constructor(
  public embeds: (string)[] = [],
  public mentions: (UserIDT)[] = [],
  public parent: CastIDT|null = null,
  public text: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const embeds = CastAddBody.createEmbedsVector(builder, builder.createObjectOffsetList(this.embeds));
  const mentions = CastAddBody.createMentionsVector(builder, builder.createObjectOffsetList(this.mentions));
  const parent = (this.parent !== null ? this.parent!.pack(builder) : 0);
  const text = (this.text !== null ? builder.createString(this.text!) : 0);

  CastAddBody.startCastAddBody(builder);
  CastAddBody.addEmbeds(builder, embeds);
  CastAddBody.addMentions(builder, mentions);
  CastAddBody.addParent(builder, parent);
  CastAddBody.addText(builder, text);

  return CastAddBody.endCastAddBody(builder);
}
}
