// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Message, MessageT } from '../farcaster/message';


export class MessagesResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MessagesResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMessagesResponse(bb:flatbuffers.ByteBuffer, obj?:MessagesResponse):MessagesResponse {
  return (obj || new MessagesResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMessagesResponse(bb:flatbuffers.ByteBuffer, obj?:MessagesResponse):MessagesResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MessagesResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

messages(index: number, obj?:Message):Message|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Message()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

messagesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startMessagesResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMessages(builder:flatbuffers.Builder, messagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, messagesOffset, 0);
}

static createMessagesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMessagesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endMessagesResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMessagesResponse(builder:flatbuffers.Builder, messagesOffset:flatbuffers.Offset):flatbuffers.Offset {
  MessagesResponse.startMessagesResponse(builder);
  MessagesResponse.addMessages(builder, messagesOffset);
  return MessagesResponse.endMessagesResponse(builder);
}

unpack(): MessagesResponseT {
  return new MessagesResponseT(
    this.bb!.createObjList(this.messages.bind(this), this.messagesLength())
  );
}


unpackTo(_o: MessagesResponseT): void {
  _o.messages = this.bb!.createObjList(this.messages.bind(this), this.messagesLength());
}
}

export class MessagesResponseT {
constructor(
  public messages: (MessageT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const messages = MessagesResponse.createMessagesVector(builder, builder.createObjectOffsetList(this.messages));

  return MessagesResponse.createMessagesResponse(builder,
    messages
  );
}
}
