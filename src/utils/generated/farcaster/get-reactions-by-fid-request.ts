// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ReactionType } from '../farcaster/reaction-type';


export class GetReactionsByFidRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetReactionsByFidRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetReactionsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetReactionsByFidRequest):GetReactionsByFidRequest {
  return (obj || new GetReactionsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetReactionsByFidRequest(bb:flatbuffers.ByteBuffer, obj?:GetReactionsByFidRequest):GetReactionsByFidRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetReactionsByFidRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

type():ReactionType|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : null;
}

static startGetReactionsByFidRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addType(builder:flatbuffers.Builder, type:ReactionType) {
  builder.addFieldInt16(1, type, 0);
}

static endGetReactionsByFidRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  return offset;
}

static createGetReactionsByFidRequest(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset, type:ReactionType|null):flatbuffers.Offset {
  GetReactionsByFidRequest.startGetReactionsByFidRequest(builder);
  GetReactionsByFidRequest.addFid(builder, fidOffset);
  if (type !== null)
    GetReactionsByFidRequest.addType(builder, type);
  return GetReactionsByFidRequest.endGetReactionsByFidRequest(builder);
}

unpack(): GetReactionsByFidRequestT {
  return new GetReactionsByFidRequestT(
    this.bb!.createScalarList(this.fid.bind(this), this.fidLength()),
    this.type()
  );
}


unpackTo(_o: GetReactionsByFidRequestT): void {
  _o.fid = this.bb!.createScalarList(this.fid.bind(this), this.fidLength());
  _o.type = this.type();
}
}

export class GetReactionsByFidRequestT {
constructor(
  public fid: (number)[] = [],
  public type: ReactionType|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetReactionsByFidRequest.createFidVector(builder, this.fid);

  return GetReactionsByFidRequest.createGetReactionsByFidRequest(builder,
    fid,
    this.type
  );
}
}
