// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CastId, CastIdT } from '../farcaster/cast-id';
import { ReactionType } from '../farcaster/reaction-type';


export class GetReactionRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetReactionRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetReactionRequest(bb:flatbuffers.ByteBuffer, obj?:GetReactionRequest):GetReactionRequest {
  return (obj || new GetReactionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetReactionRequest(bb:flatbuffers.ByteBuffer, obj?:GetReactionRequest):GetReactionRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetReactionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fid(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fidLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fidArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

type():ReactionType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : ReactionType.Like;
}

cast(obj?:CastId):CastId|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new CastId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGetReactionRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addFid(builder:flatbuffers.Builder, fidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fidOffset, 0);
}

static createFidVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFidVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addType(builder:flatbuffers.Builder, type:ReactionType) {
  builder.addFieldInt16(1, type, ReactionType.Like);
}

static addCast(builder:flatbuffers.Builder, castOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, castOffset, 0);
}

static endGetReactionRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fid
  builder.requiredField(offset, 8) // cast
  return offset;
}


unpack(): GetReactionRequestT {
  return new GetReactionRequestT(
    this.bb!.createScalarList(this.fid.bind(this), this.fidLength()),
    this.type(),
    (this.cast() !== null ? this.cast()!.unpack() : null)
  );
}


unpackTo(_o: GetReactionRequestT): void {
  _o.fid = this.bb!.createScalarList(this.fid.bind(this), this.fidLength());
  _o.type = this.type();
  _o.cast = (this.cast() !== null ? this.cast()!.unpack() : null);
}
}

export class GetReactionRequestT {
constructor(
  public fid: (number)[] = [],
  public type: ReactionType = ReactionType.Like,
  public cast: CastIdT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fid = GetReactionRequest.createFidVector(builder, this.fid);
  const cast = (this.cast !== null ? this.cast!.pack(builder) : 0);

  GetReactionRequest.startGetReactionRequest(builder);
  GetReactionRequest.addFid(builder, fid);
  GetReactionRequest.addType(builder, this.type);
  GetReactionRequest.addCast(builder, cast);

  return GetReactionRequest.endGetReactionRequest(builder);
}
}
