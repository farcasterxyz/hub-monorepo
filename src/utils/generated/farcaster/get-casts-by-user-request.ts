// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { UserId, UserIdT } from '../farcaster/user-id';


export class GetCastsByUserRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetCastsByUserRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetCastsByUserRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastsByUserRequest):GetCastsByUserRequest {
  return (obj || new GetCastsByUserRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetCastsByUserRequest(bb:flatbuffers.ByteBuffer, obj?:GetCastsByUserRequest):GetCastsByUserRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetCastsByUserRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

user(obj?:UserId):UserId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new UserId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGetCastsByUserRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addUser(builder:flatbuffers.Builder, userOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, userOffset, 0);
}

static endGetCastsByUserRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetCastsByUserRequest(builder:flatbuffers.Builder, userOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetCastsByUserRequest.startGetCastsByUserRequest(builder);
  GetCastsByUserRequest.addUser(builder, userOffset);
  return GetCastsByUserRequest.endGetCastsByUserRequest(builder);
}

unpack(): GetCastsByUserRequestT {
  return new GetCastsByUserRequestT(
    (this.user() !== null ? this.user()!.unpack() : null)
  );
}


unpackTo(_o: GetCastsByUserRequestT): void {
  _o.user = (this.user() !== null ? this.user()!.unpack() : null);
}
}

export class GetCastsByUserRequestT {
constructor(
  public user: UserIdT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const user = (this.user !== null ? this.user!.pack(builder) : 0);

  return GetCastsByUserRequest.createGetCastsByUserRequest(builder,
    user
  );
}
}
