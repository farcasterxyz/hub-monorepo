// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ContractEvent, ContractEventT } from '../farcaster/contract-event';
import { EventType } from '../farcaster/event-type';
import { Message, MessageT } from '../farcaster/message';


export class EventResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EventResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEventResponse(bb:flatbuffers.ByteBuffer, obj?:EventResponse):EventResponse {
  return (obj || new EventResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEventResponse(bb:flatbuffers.ByteBuffer, obj?:EventResponse):EventResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EventResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():EventType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : EventType.MergeMessage;
}

message(obj?:Message):Message|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Message()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

contractEvent(obj?:ContractEvent):ContractEvent|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ContractEvent()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startEventResponse(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addType(builder:flatbuffers.Builder, type:EventType) {
  builder.addFieldInt8(0, type, EventType.MergeMessage);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageOffset, 0);
}

static addContractEvent(builder:flatbuffers.Builder, contractEventOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, contractEventOffset, 0);
}

static endEventResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): EventResponseT {
  return new EventResponseT(
    this.type(),
    (this.message() !== null ? this.message()!.unpack() : null),
    (this.contractEvent() !== null ? this.contractEvent()!.unpack() : null)
  );
}


unpackTo(_o: EventResponseT): void {
  _o.type = this.type();
  _o.message = (this.message() !== null ? this.message()!.unpack() : null);
  _o.contractEvent = (this.contractEvent() !== null ? this.contractEvent()!.unpack() : null);
}
}

export class EventResponseT {
constructor(
  public type: EventType = EventType.MergeMessage,
  public message: MessageT|null = null,
  public contractEvent: ContractEventT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const message = (this.message !== null ? this.message!.pack(builder) : 0);
  const contractEvent = (this.contractEvent !== null ? this.contractEvent!.pack(builder) : 0);

  EventResponse.startEventResponse(builder);
  EventResponse.addType(builder, this.type);
  EventResponse.addMessage(builder, message);
  EventResponse.addContractEvent(builder, contractEvent);

  return EventResponse.endEventResponse(builder);
}
}
