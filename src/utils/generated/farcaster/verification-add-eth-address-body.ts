// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class VerificationAddEthAddressBody {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VerificationAddEthAddressBody {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVerificationAddEthAddressBody(bb:flatbuffers.ByteBuffer, obj?:VerificationAddEthAddressBody):VerificationAddEthAddressBody {
  return (obj || new VerificationAddEthAddressBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVerificationAddEthAddressBody(bb:flatbuffers.ByteBuffer, obj?:VerificationAddEthAddressBody):VerificationAddEthAddressBody {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VerificationAddEthAddressBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

address(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

addressLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

addressArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

ethSignature(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

ethSignatureLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ethSignatureArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

blockHash(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

blockHashLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

blockHashArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startVerificationAddEthAddressBody(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addAddress(builder:flatbuffers.Builder, addressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, addressOffset, 0);
}

static createAddressVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startAddressVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addEthSignature(builder:flatbuffers.Builder, ethSignatureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ethSignatureOffset, 0);
}

static createEthSignatureVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startEthSignatureVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addBlockHash(builder:flatbuffers.Builder, blockHashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, blockHashOffset, 0);
}

static createBlockHashVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startBlockHashVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endVerificationAddEthAddressBody(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // address
  builder.requiredField(offset, 6) // eth_signature
  builder.requiredField(offset, 8) // block_hash
  return offset;
}

static createVerificationAddEthAddressBody(builder:flatbuffers.Builder, addressOffset:flatbuffers.Offset, ethSignatureOffset:flatbuffers.Offset, blockHashOffset:flatbuffers.Offset):flatbuffers.Offset {
  VerificationAddEthAddressBody.startVerificationAddEthAddressBody(builder);
  VerificationAddEthAddressBody.addAddress(builder, addressOffset);
  VerificationAddEthAddressBody.addEthSignature(builder, ethSignatureOffset);
  VerificationAddEthAddressBody.addBlockHash(builder, blockHashOffset);
  return VerificationAddEthAddressBody.endVerificationAddEthAddressBody(builder);
}

unpack(): VerificationAddEthAddressBodyT {
  return new VerificationAddEthAddressBodyT(
    this.bb!.createScalarList(this.address.bind(this), this.addressLength()),
    this.bb!.createScalarList(this.ethSignature.bind(this), this.ethSignatureLength()),
    this.bb!.createScalarList(this.blockHash.bind(this), this.blockHashLength())
  );
}


unpackTo(_o: VerificationAddEthAddressBodyT): void {
  _o.address = this.bb!.createScalarList(this.address.bind(this), this.addressLength());
  _o.ethSignature = this.bb!.createScalarList(this.ethSignature.bind(this), this.ethSignatureLength());
  _o.blockHash = this.bb!.createScalarList(this.blockHash.bind(this), this.blockHashLength());
}
}

export class VerificationAddEthAddressBodyT {
constructor(
  public address: (number)[] = [],
  public ethSignature: (number)[] = [],
  public blockHash: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const address = VerificationAddEthAddressBody.createAddressVector(builder, this.address);
  const ethSignature = VerificationAddEthAddressBody.createEthSignatureVector(builder, this.ethSignature);
  const blockHash = VerificationAddEthAddressBody.createBlockHashVector(builder, this.blockHash);

  return VerificationAddEthAddressBody.createVerificationAddEthAddressBody(builder,
    address,
    ethSignature,
    blockHash
  );
}
}
