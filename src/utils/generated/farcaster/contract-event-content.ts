// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ContractEvent, ContractEventT } from '../farcaster/contract-event';


export class ContractEventContent {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ContractEventContent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsContractEventContent(bb:flatbuffers.ByteBuffer, obj?:ContractEventContent):ContractEventContent {
  return (obj || new ContractEventContent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsContractEventContent(bb:flatbuffers.ByteBuffer, obj?:ContractEventContent):ContractEventContent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ContractEventContent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

message(obj?:ContractEvent):ContractEvent|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ContractEvent()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startContractEventContent(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, messageOffset, 0);
}

static endContractEventContent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // message
  return offset;
}

static createContractEventContent(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset):flatbuffers.Offset {
  ContractEventContent.startContractEventContent(builder);
  ContractEventContent.addMessage(builder, messageOffset);
  return ContractEventContent.endContractEventContent(builder);
}

unpack(): ContractEventContentT {
  return new ContractEventContentT(
    (this.message() !== null ? this.message()!.unpack() : null)
  );
}


unpackTo(_o: ContractEventContentT): void {
  _o.message = (this.message() !== null ? this.message()!.unpack() : null);
}
}

export class ContractEventContentT {
constructor(
  public message: ContractEventT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const message = (this.message !== null ? this.message!.pack(builder) : 0);

  return ContractEventContent.createContractEventContent(builder,
    message
  );
}
}
