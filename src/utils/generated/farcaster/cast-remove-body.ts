// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class CastRemoveBody {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CastRemoveBody {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCastRemoveBody(bb:flatbuffers.ByteBuffer, obj?:CastRemoveBody):CastRemoveBody {
  return (obj || new CastRemoveBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCastRemoveBody(bb:flatbuffers.ByteBuffer, obj?:CastRemoveBody):CastRemoveBody {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CastRemoveBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

hash(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

hashLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

hashArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startCastRemoveBody(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addHash(builder:flatbuffers.Builder, hashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, hashOffset, 0);
}

static createHashVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startHashVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endCastRemoveBody(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // hash
  return offset;
}

static createCastRemoveBody(builder:flatbuffers.Builder, hashOffset:flatbuffers.Offset):flatbuffers.Offset {
  CastRemoveBody.startCastRemoveBody(builder);
  CastRemoveBody.addHash(builder, hashOffset);
  return CastRemoveBody.endCastRemoveBody(builder);
}

unpack(): CastRemoveBodyT {
  return new CastRemoveBodyT(
    this.bb!.createScalarList(this.hash.bind(this), this.hashLength())
  );
}


unpackTo(_o: CastRemoveBodyT): void {
  _o.hash = this.bb!.createScalarList(this.hash.bind(this), this.hashLength());
}
}

export class CastRemoveBodyT {
constructor(
  public hash: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const hash = CastRemoveBody.createHashVector(builder, this.hash);

  return CastRemoveBody.createCastRemoveBody(builder,
    hash
  );
}
}
