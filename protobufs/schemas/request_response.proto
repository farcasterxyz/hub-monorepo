syntax = "proto3";

import "message.proto";
import "onchain_event.proto";
import "hub_event.proto";
import "username_proof.proto";
import "gossip.proto";

message Empty {}

message SubscribeRequest {
  repeated HubEventType event_types = 1;
  optional uint64 from_id = 2;
  optional uint64 total_shards = 3;
  optional uint64 shard_index = 4;
}

message EventRequest {
  uint64 id = 1;
}

message HubInfoRequest {
  bool db_stats = 1;
}

// Response Types for the Sync RPC Methods
message HubInfoResponse {
  string version = 1;
  bool is_syncing = 2;
  string nickname = 3;
  string root_hash = 4;
  DbStats db_stats = 5;
  string peerId = 6;
  uint64 hub_operator_fid = 7;
}

message DbStats {
  uint64 num_messages = 1;
  uint64 num_fid_events = 2;
  uint64 num_fname_events = 3;
  uint64 approx_size = 4;
}

message SyncStatusRequest {
  optional string peerId = 1;
}

message SyncStatusResponse {
  bool is_syncing = 1;
  repeated SyncStatus sync_status = 2;
  bool engine_started = 3;
}

message SyncStatus {
  string peerId = 1;
  string inSync = 2;
  bool shouldSync = 3;
  string divergencePrefix = 4;
  int32 divergenceSecondsAgo = 5;
  uint64 theirMessages = 6;
  uint64 ourMessages = 7;
  int64 lastBadSync = 8;
  int64 score = 9;
}

message TrieNodeMetadataResponse {
  bytes prefix = 1;
  uint64 num_messages = 2;
  string hash = 3;
  repeated TrieNodeMetadataResponse children = 4;
}

message TrieNodeSnapshotResponse {
  bytes prefix = 1;
  repeated string excluded_hashes = 2;
  uint64 num_messages = 3;
  string root_hash = 4;
}

message TrieNodePrefix {
  bytes prefix = 1;
}

message SyncIds {
  repeated bytes sync_ids = 1;
}

message FidRequest {
  uint64 fid = 1;
  optional uint32 page_size = 2;
  optional bytes page_token = 3;
  optional bool reverse = 4;
}

message FidTimestampRequest {
  uint64 fid = 1;
  optional uint32 page_size = 2;
  optional bytes page_token = 3;
  optional bool reverse = 4;
  optional uint64 start_timestamp = 5;
  optional uint64 stop_timestamp = 6;
}

message FidsRequest {
  optional uint32 page_size = 1;
  optional bytes page_token = 2;
  optional bool reverse = 3;
}

message FidsResponse {
  repeated uint64 fids = 1;
  optional bytes next_page_token = 2;
}

message MessagesResponse {
  repeated Message messages = 1;
  optional bytes next_page_token = 2;
}

message CastsByParentRequest {
  oneof parent {
    CastId parent_cast_id = 1;
    string parent_url = 5;
  }
  optional uint32 page_size = 2;
  optional bytes page_token = 3;
  optional bool reverse = 4;
}

message ReactionRequest {
  uint64 fid = 1;
  ReactionType reaction_type = 2;
  oneof target {
    CastId target_cast_id = 3;
    string target_url = 4;
  }
}

message ReactionsByFidRequest {
  uint64 fid = 1;
  optional ReactionType reaction_type = 2;
  optional uint32 page_size = 3;
  optional bytes page_token = 4;
  optional bool reverse = 5;
}

message ReactionsByTargetRequest {
  oneof target {
    CastId target_cast_id = 1;
    string target_url = 6;
  }
  optional ReactionType reaction_type = 2;
  optional uint32 page_size = 3;
  optional bytes page_token = 4;
  optional bool reverse = 5;
}

message UserDataRequest {
  uint64 fid = 1;
  UserDataType user_data_type = 2;
}

message NameRegistryEventRequest {
  bytes name = 1;
}

message RentRegistryEventsRequest {
  uint64 fid = 1;
}

message OnChainEventRequest {
  uint64 fid = 1;
  OnChainEventType event_type = 2;
  optional uint32 page_size = 3;
  optional bytes page_token = 4;
  optional bool reverse = 5;
}

message OnChainEventResponse {
  repeated OnChainEvent events = 1;
  optional bytes next_page_token = 2;
}

message StorageLimitsResponse {
  repeated StorageLimit limits = 1;
  uint32 units = 2;
  repeated StorageUnitDetails unit_details = 3;
}

enum StoreType {
  STORE_TYPE_NONE = 0;
  STORE_TYPE_CASTS = 1;
  STORE_TYPE_LINKS = 2;
  STORE_TYPE_REACTIONS = 3;
  STORE_TYPE_USER_DATA = 4;
  STORE_TYPE_VERIFICATIONS = 5;
  STORE_TYPE_USERNAME_PROOFS = 6;
}

enum StorageUnitType {
  UNIT_TYPE_LEGACY = 0;
  UNIT_TYPE_2024 = 1;
}

message StorageUnitDetails {
  StorageUnitType unit_type = 1;
  uint32 unit_size = 2;
}

message StorageLimit {
  StoreType store_type = 1;
  string name = 2;
  uint64 limit = 3;
  uint64 used = 4;
  uint64 earliestTimestamp = 5;
  bytes earliestHash = 6;
}

message UsernameProofRequest {
  bytes name = 1;
}

message UsernameProofsResponse {
  repeated UserNameProof proofs = 1;
}

message VerificationRequest {
  uint64 fid = 1;
  bytes address = 2;
}

message SignerRequest {
  uint64 fid = 1;
  bytes signer = 2;
}

message LinkRequest {
  uint64 fid = 1;
  string link_type = 2;
  oneof target {
    uint64 target_fid = 3;
  }
}

message LinksByFidRequest {
  uint64 fid = 1;
  optional string link_type = 2;
  optional uint32 page_size = 3;
  optional bytes page_token = 4;
  optional bool reverse = 5;
}

message LinksByTargetRequest {
  oneof target {
    uint64 target_fid = 1;
  }
  optional string link_type = 2;
  optional uint32 page_size = 3;
  optional bytes page_token = 4;
  optional bool reverse = 5;
}

message IdRegistryEventByAddressRequest {
  bytes address = 1;
}

message ContactInfoResponse {
  repeated ContactInfoContentBody contacts = 1;
}

message ValidationResponse {
  bool valid = 1;
  Message message = 2;
}

message StreamSyncRequest {
  oneof request {
    HubInfoRequest get_info = 1;
    Empty get_current_peers = 2;
    Empty stop_sync = 3;
    SyncStatusRequest force_sync = 4;
    SyncStatusRequest get_sync_status = 5;
    TrieNodePrefix get_all_sync_ids_by_prefix = 6;
    SyncIds get_all_messages_by_sync_ids = 7;
    TrieNodePrefix get_sync_metadata_by_prefix = 8;
    TrieNodePrefix get_sync_snapshot_by_prefix = 9;
    OnChainEventRequest get_on_chain_events = 10;
    FidRequest get_on_chain_signers_by_fid = 11;
  }
}

message StreamError {
  string errCode = 1;
  string message = 2;
  string request = 3;
}

message StreamSyncResponse {
  oneof response {
    HubInfoResponse get_info = 1;
    ContactInfoResponse get_current_peers = 2;
    SyncStatusResponse stop_sync = 3;
    SyncStatusResponse force_sync = 4;
    SyncStatusResponse get_sync_status = 5;
    SyncIds get_all_sync_ids_by_prefix = 6;
    MessagesResponse get_all_messages_by_sync_ids = 7;
    TrieNodeMetadataResponse get_sync_metadata_by_prefix = 8;
    TrieNodeSnapshotResponse get_sync_snapshot_by_prefix = 9;
    OnChainEventResponse get_on_chain_events = 10;
    OnChainEventResponse get_on_chain_signers_by_fid = 11;
    StreamError error = 12;
  }
}

message StreamFetchRequest {
  string idempotency_key = 1;
  oneof request {
    FidTimestampRequest cast_messages_by_fid = 2;
    FidTimestampRequest reaction_messages_by_fid = 3;
    FidTimestampRequest verification_messages_by_fid = 4;
    FidTimestampRequest user_data_messages_by_fid = 5;
    FidTimestampRequest link_messages_by_fid = 6;
  }
}

message StreamFetchResponse {
  string idempotency_key = 1;
  oneof response {
    MessagesResponse messages = 2;
    StreamError error = 3;
  }
}