syntax = "proto3";

import "message.proto";
import "hub_event.proto";
import "request_response.proto";
import "username_proof.proto";
import "onchain_event.proto";

// Note about http-api annotations:
// The `httpServer.ts` class implements a HTTP API wrapper on top of this gRPC API.
// The annotations below are used to verify that all the HTTP API endpoints are implemented.
// If you are adding a new RPC method, if there needs to be a corresponding HTTP API endpoint, 
// add the annotation to the method. @http-api: none means that there is no corresponding HTTP API
// If there is no annotation, we assume there is a corresponding HTTP API endpoint with the same name as the RPC method
// Please see `httpServer.ts` for more details

service HubService {
  // Submit Methods
  rpc SubmitMessage(Message) returns (Message);

  // Event Methods
  // @http-api: none
  rpc Subscribe(SubscribeRequest) returns (stream HubEvent);
  // @http-api: events
  rpc GetEvent(EventRequest) returns (HubEvent);

  // Casts
  // @http-api: castById
  rpc GetCast(CastId) returns (Message);
  rpc GetCastsByFid(FidRequest) returns (MessagesResponse);
  rpc GetCastsByParent(CastsByParentRequest) returns (MessagesResponse);
  rpc GetCastsByMention(FidRequest) returns (MessagesResponse);

  // Reactions
  // @http-api: reactionById
  rpc GetReaction(ReactionRequest) returns (Message);
  rpc GetReactionsByFid(ReactionsByFidRequest) returns (MessagesResponse);
  rpc GetReactionsByCast(ReactionsByTargetRequest) returns (MessagesResponse); // To be deprecated
  rpc GetReactionsByTarget(ReactionsByTargetRequest) returns (MessagesResponse);

  // User Data
  // @http-api: none
  rpc GetUserData(UserDataRequest) returns (Message);
  rpc GetUserDataByFid(FidRequest) returns (MessagesResponse);

  // Username Proof
  // @http-api: userNameProofByName
  rpc GetUsernameProof(UsernameProofRequest) returns (UserNameProof);
  rpc GetUserNameProofsByFid(FidRequest) returns (UsernameProofsResponse);

  // Verifications
  // @http-api: none
  rpc GetVerification(VerificationRequest) returns (Message);
  rpc GetVerificationsByFid(FidRequest) returns (MessagesResponse);

  // OnChain Events
  // @http-api: none
  rpc GetOnChainSigner(SignerRequest) returns (OnChainEvent);
  rpc GetOnChainSignersByFid(FidRequest) returns (OnChainEventResponse);
  // @http-api: none
  rpc GetOnChainEvents(OnChainEventRequest) returns (OnChainEventResponse);
  // @http-api: none
  rpc GetIdRegistryOnChainEvent(FidRequest) returns (OnChainEvent);
  // @http-api: onChainIdRegistryEventByAddress
  rpc GetIdRegistryOnChainEventByAddress(IdRegistryEventByAddressRequest) returns (OnChainEvent);
  // @http-api: storageLimitsByFid
  rpc GetCurrentStorageLimitsByFid(FidRequest) returns (StorageLimitsResponse);

  rpc GetFids(FidsRequest) returns (FidsResponse);

  // Links
  // @http-api: linkById
  rpc GetLink(LinkRequest) returns (Message);
  rpc GetLinksByFid(LinksByFidRequest) returns (MessagesResponse);
  // @http-api: linksByTargetFid
  rpc GetLinksByTarget(LinksByTargetRequest) returns (MessagesResponse);

  // Bulk Methods
  // The Bulk methods don't have corresponding HTTP API endpoints because the 
  // regular endpoints can be used to get all the messages
  // @http-api: none
  rpc GetAllCastMessagesByFid(FidRequest) returns (MessagesResponse);
  // @http-api: none
  rpc GetAllReactionMessagesByFid(FidRequest) returns (MessagesResponse);
  // @http-api: none
  rpc GetAllVerificationMessagesByFid(FidRequest) returns (MessagesResponse);
  // @http-api: none
  rpc GetAllUserDataMessagesByFid(FidRequest) returns (MessagesResponse);
  // @http-api: none
  rpc GetAllLinkMessagesByFid(FidRequest) returns (MessagesResponse);

  // Sync Methods  
  // Outside the "info" RPC, the HTTP API doesn't implement any of the sync methods
  rpc GetInfo(HubInfoRequest) returns (HubInfoResponse);
  // @http-api: none
  rpc GetSyncStatus(SyncStatusRequest) returns (SyncStatusResponse);
  // @http-api: none
  rpc GetAllSyncIdsByPrefix(TrieNodePrefix) returns (SyncIds);
  // @http-api: none
  rpc GetAllMessagesBySyncIds(SyncIds) returns (MessagesResponse);
  // @http-api: none
  rpc GetSyncMetadataByPrefix(TrieNodePrefix) returns (TrieNodeMetadataResponse);
  // @http-api: none
  rpc GetSyncSnapshotByPrefix(TrieNodePrefix) returns (TrieNodeSnapshotResponse);
}

service AdminService {
  rpc RebuildSyncTrie(Empty) returns (Empty);
  rpc DeleteAllMessagesFromDb(Empty) returns (Empty);
  
  rpc SubmitOnChainEvent(OnChainEvent) returns (OnChainEvent);
}
